02022f52-336e-4aa3-9131-1b7fff1583ee.2f2e15c7-8c92-4634-9c84-bc4cdddc4e5f.prompt=Password\:
02022f52-336e-4aa3-9131-1b7fff1583ee.52efe09a-d743-42e1-b8dd-ed70a89b817c.description=<pre>Get all device numbers for a specified device type on a Virtual Machine (VM).\n\nInputs\:\n    host - VMWare host hostname or IP\n    user - VMWare username\n    password - VMWare user's password\n    port - Port to connect on\n    protocol - Connection protocol (http or https)\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\n    virtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\n    vmIdentifierType - Virtual machine identifier type\n    vmDatacenter - Virtual machine's datacenter\n    deviceType - Type of device. Valid values are\: hardDisk, floppyDisk, Cdrom, SCSIController, ethernetCard.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nreturnResult - Task result or operation result\ndeviceId - Number of device having the specified deviceType.\n</pre>
02022f52-336e-4aa3-9131-1b7fff1583ee.56d19fcc-e409-4c0d-877e-4ad239b031a3.prompt=VMWare User\:
02022f52-336e-4aa3-9131-1b7fff1583ee.666a0dc0-2679-46e4-9fef-1b5e8bde3e07.prompt=VMWare Host\:
02022f52-336e-4aa3-9131-1b7fff1583ee.6927bbfe-d231-4f02-a364-8138c300a009.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
02022f52-336e-4aa3-9131-1b7fff1583ee.8525596e-790c-4353-8de5-078173b60ee7.prompt=Datacenter to look for VM\:
02022f52-336e-4aa3-9131-1b7fff1583ee.d1182a3f-a029-4fe7-ad41-b55cf21866a1.prompt=Virtual Machine\:
02022f52-336e-4aa3-9131-1b7fff1583ee.description=<pre>\nGet device count by type.\n\nInput Parameters\:\n host -  vCenter host to execute against\n port - Port Number toconnect on\n protocol - Connection prtocol(http, https)\n username - vCenter username\n password - vCenter password\n vmIdentifierType - Virtual machine identifier type\n vmDatacenter - Virtual machine's datacenter\n deviceType - Type of device. Valid values are\: hardDisk, floppyDisk, Cdrom, SCSIController, ethernetCard.\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nOutput\:\n deviceCount - Total number of devices\n</pre>
02022f52-336e-4aa3-9131-1b7fff1583ee.ecf842d8-2dd9-4282-ab44-e1db41c92467.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
02022f52-336e-4aa3-9131-1b7fff1583ee.f000b0bf-4325-44b7-a767-5b1dac02d457.description=<pre>\nAdds two numbers together\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe sum of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
042acf1d-0b05-4059-9e0d-87e44fdbcbac.1f9a3519-426d-410a-b2cd-40eef23a1ad1.prompt=Process Instance ID
042acf1d-0b05-4059-9e0d-87e44fdbcbac.6b0e91f8-ca7c-46eb-b765-e44c254228ef.description=<pre>\nThis workflow gets details of the Resource Pool artifact.\n\nInputs-\nresourcePoolId \t- Resource Pool ID\nuserIdentifier  \t- User Identifier id\nresourceType \t\u2013 Resource Type For eg. CPU,MEMORY etc\nauthType \t\t- The authentication type that this operation uses when trying to execute the request on the target server.\n\t\tvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\n\t\tDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile \t- The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout \t\t- The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite \ttimeout.Default value\: 0.\nuseCookies \t\t- If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy \t\t- A proxy to use when accessing the web site.\nproxyPort \t\t- The port on the proxy to connect to.\nproxyUsername\t - The username to use when connecting to the proxy.\nproxyPassword\t - The password to use when connecting to the proxy.\nencodeURL\t\t - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent\t\t - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots\t\t - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore\t\t - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword \t- Password to unlock the keystore.\ntrustKeystore\t - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword\t - Password to unlock the truststore.\n\nOutputs-\ndocument  \t\t- returned XML document from API\nproviderId\t\t- Provider Id of the Resource Pool\npoolReference\t- Pool Reference Name\navailabilityIndicator\t- Availability Indicator of the resource type\nusedByCSA\t\t- resource value consumed by CSA\nunit\t\t- Unit of the resouce \navailabletoCSA\t- Total resource available to CSA\n</pre>
042acf1d-0b05-4059-9e0d-87e44fdbcbac.6e240eca-24a2-47e3-b489-9b5e846b0875.prompt=User Identifier
042acf1d-0b05-4059-9e0d-87e44fdbcbac.71a103c5-b58b-4182-bcf1-b191a2330623.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
042acf1d-0b05-4059-9e0d-87e44fdbcbac.83474f73-61f9-40ef-915a-59ffe10fabf9.prompt=User Identifier
042acf1d-0b05-4059-9e0d-87e44fdbcbac.852f1635-6982-4803-bd40-bf7b861a337a.prompt=User Identifier
042acf1d-0b05-4059-9e0d-87e44fdbcbac.9514b462-1bc2-481b-8c76-16d543fb7582.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
042acf1d-0b05-4059-9e0d-87e44fdbcbac.b50b0490-f7df-409d-8fee-3204596ca066.prompt=Process Instance ID
042acf1d-0b05-4059-9e0d-87e44fdbcbac.d985b1d8-b851-4832-bc52-94cc8354bca8.description=<pre>\nThis workflow requests the life cycle engine to execute and take the given service component and it's childs to the deployed state.\n\nInputs-\ncomponentId \u2013 Service component id\nserviceInstanceId - Service Instance Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
0657c0d4-fc43-4224-8734-a7a5ba7c54d0.283cb626-b507-482b-ae9a-dbed3ca86809.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,suspended). Does nothing if the virtual machine is already in the desired power state.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"    \n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    async - Asynchronously perform the task.\nValid values\: "true", "false"\n    taskTimeOut - Time to wait before the operation is considered to have failed (seconds).\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmIdentifierType - Virtual machine identifier type.\nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"    \n    vmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n    no action - The operation completed with no action performed.\n\nReturns\:\n    returnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>\n\n\n
0657c0d4-fc43-4224-8734-a7a5ba7c54d0.4cd94129-7676-4327-872b-ecd11ba7e566.prompt=Close session?\:
0657c0d4-fc43-4224-8734-a7a5ba7c54d0.4d6304db-d2f2-46d6-8650-ba86e5e313ee.prompt=Asynchronously Perform Task?\:
0657c0d4-fc43-4224-8734-a7a5ba7c54d0.53eea2cf-9c02-48de-8911-571683cdc3d3.prompt=Virtual Machine\:
0657c0d4-fc43-4224-8734-a7a5ba7c54d0.69591dc8-d5a9-4b54-b6a0-6ed74517dc56.prompt=Password\:
0657c0d4-fc43-4224-8734-a7a5ba7c54d0.80b6e713-44b0-4390-a87a-064a705eae08.prompt=VMWare Host\:
0657c0d4-fc43-4224-8734-a7a5ba7c54d0.87e10e92-ec11-462f-88b0-f07c2e762668.prompt=VMWare Host\:
0657c0d4-fc43-4224-8734-a7a5ba7c54d0.8b8914b4-2469-4790-bc35-180e886b41ec.prompt=Password\:
0657c0d4-fc43-4224-8734-a7a5ba7c54d0.8e20d037-8177-4b37-a0bd-da01030ca12e.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
0657c0d4-fc43-4224-8734-a7a5ba7c54d0.9f5dae4b-938f-4ad9-b803-59227f10e7c4.prompt=Virtual Machine\:
0657c0d4-fc43-4224-8734-a7a5ba7c54d0.description=Deprecated in favor of the flows from OO Virtualization Content Pack\: vCenter Start Virtual Machine and vCenter Stop Virtual Machine
076be6d6-0c64-40a5-8b50-2ec432805877.015117d0-e6c2-49f3-859c-11e150338ad7.description=This operation iterates through a string that contains an array in the JavaScript Object Notation format (JSON).  Each time  this operation is called, it places the value of the current array element into the "returnResult" output and advances the iterator to the next array element.\n\nThe JSON format is used to encode arrays and other values using JavaScript notation.  For arrays, this means that the values need to be enclosed by square brackets, and each element in the array can be a string (enclosed by quotes), a number, true, false, null, or  nested array or object.  Commas are always used as delimiters between array elements, and they can also appear within string elements. \n\nThe benefits of JavaScript arrays are that delimiters are fixed and cannot be confused with data, and that complex nesting of arrays and objects are supported.  The description of the enclosing folder, /Library/Utility Operations/Container/JavaScript Objects has more examples, and the JSON format is described completely at http\://www.json.org.\n\nInputs\:\n    array - The JavaScript array that will be iterated through. A normal OO list is NOT a JavaScript array.\nExamples\:\n    For example, the following is a simple JSON array\:\n        [ "cat", "dog", "horse" ]\n    The equivalent OO list (that is not a JavaScript array) is\:\n        cat,dog,horse\n\n Results\:\n    returnResult - This is the primary output and contains the current array element or an exception message if something went wrong.  When incorporating this operation into a flow, you should assign a meaningful result value from this field.\n    Result - This output field contains the value from the "returnResult" field. \n\nResponses\:\n   has more - The iterator has not yet reached the end of the array. The "returnResult" output will be populated with the value of the current element in the array, and the iterator will advance to the next element in the array.\n   no more - The iterator has reached the end of the array, and there is no more data to return.  The iterator will become undefined after this call, which basically will reset it so that if called again, this operation will begin another iteration at the beginning of the array.\n   failure - There was some error in iterating through the list, and the "returnResult" output will contain information about the error. This will occur if the input array is not a valid JavaScript array. You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with JavaScript Object Notation.\n\nNotes\:\n1. Modifying the contents of the array during iteration is not generally supported, but will be safe as long as the affected item(s) are beyond the current position of the iterator.  The iterator keeps track of where it is in the array by position.  If items are added or removed to the list in a position preceding the iterator, it may cause the iterator to return results that are not obvious.  For example, if the array contains [ "a", "b", "c" ] and the iterator is positioned on the second element, "b" and the first element is removed, then the iterator will now be at the last element in the list, "c".\n2. There is currently a limitation that a flow can only have one of these array iterator steps active at a time without causing possible conflicts. In other words, if you need to iterate through a nested array, you should use a sub-flow to process the inner array.  You may have two or more of these array iterators in the same flow as long as each iterator reaches the end of its array before the next one begins.\n3. Note that since JavaScript arrays may contain nested arrays or other objects, the value returned in "returnResult" field may also require further processing.\n
076be6d6-0c64-40a5-8b50-2ec432805877.19c52af0-58d2-441a-abd7-7857302d8db6.prompt=VMWare User\:
076be6d6-0c64-40a5-8b50-2ec432805877.23b3855a-2471-4fe0-b820-3df94404886a.description=The operation retrieves the list of available customization specifications (which appear in the Customization Specification Manager section of the vSphere client) that can be applied to Virtual Machines.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    authType - The type of authentication used by this operation when trying to execute the request on the proxy server. The authentication is not preemptive\: a plain request not including authentication info will be made and only when the server responds with a 'WWW-Authenticate' header the client will send required headers. If the server needs no authentication but you specify one in this input the request will work nevertheless. The client cannot choose the authentication method and there is no fallback so you have to know which one you need. \nDefault value\: basic\nValid values\: basic, digest or a list of valid values separated by comma.\nExample\: basic,digest\n    proxyHost - The proxy server used to access the web site.\n    proxyPort -The proxy server port. Default\: 8080. Valid values\: -1 and numbers greater than 0.\n    proxyUsername -The user name used when connecting to the proxy. The "authType" input will be used to choose authentication type. The "Basic" and "'Digest" proxy authentication types are supported.\n    proxyPassword - The proxy server password associated with the proxyUsername input value.\n    trustAllRoots - Specifies whether to enable weak security over SSL/TSL. A certificate is trusted even if no trusted certification authority issued it.\nDefault value\: false\nValid values\: true, false\n    x509HostnameVerifier - Specifies the way the server hostname must match a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate. Set this to "allow_all" to skip any checking, but you become vulnerable to attacks. For the value "browser_compatible" the hostname verifier works the same way as Curl and Firefox. The hostname must match either the first CN, or any of the subject-alts. A wildcard can occur in the CN, and in any of the subject-alts. The only difference between "browser_compatible" and "strict" is that a wildcard (such as "*.foo.com") with "browser_compatible" matches all subdomains, including "a.b.foo.com". From the security perspective, to provide protection against possible Man-In-The-Middle attacks, we strongly recommend to use "strict" option.\nDefault value\: strict\nValid values\: strict,browser_compatible,allow_all\n    trustKeystore - The pathname of the Java TrustStore file. This contains certificates from other parties that you expect to communicate with, or from Certificate Authorities that you trust to identify other parties.  If the protocol (specified by the 'url') is not "https" or if trustAllRoots is "true" this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    trustPassword - The password associated with the TrustStore file. If trustAllRoots is false and trustKeystore is empty, trustPassword default will be supplied.\nDefault value\: changeit\n    keystore - The pathname of the Java KeyStore file. You only need this if the server requires client authentication. If the protocol (specified by the URL) is not "https" or if trustAllRoots is "true" this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    keystorePassword - The password associated with the KeyStore file. If trustAllRoots is false and keystore is empty, keystorePassword default will be supplied.\nDefault value\: changeit\n    connectTimeout - The time to wait for a connection to be established, in seconds. A timeout value of 0 represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout - The timeout for waiting for data (a maximum period inactivity between two consecutive data packets), in seconds. A socketTimeout value of 0 represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\n\nResults\:\n    returnResult - This is the primary result. The result is a list representing the names of the customization specification available. Each customization specification in the list is separated by a comma (',').\n\nResponses\:\n    success - The operation completed successfully\n    failure - Something went wrong.\n
076be6d6-0c64-40a5-8b50-2ec432805877.86e8ac12-023f-49ce-99ef-96efa3678fe7.prompt=Password\:
076be6d6-0c64-40a5-8b50-2ec432805877.8a653015-b34c-44fe-824b-4263d79f1d95.description=<pre>\nAccepts an object in the JavaScript Object Notation format (JSON) and\nreturns a value for the specified key.\n\nThe JSON format encodes objects as a set of unordered key/value pairs, which is\nsimilar to a structure or map in other programming languages.  For example,\n   { "city" \: "Palo Alto", \n     "state" \: "CA" }\nis an object with two elements one with the name "city" having the value "Palo\nAlto", and the other being the name "state" with the value "CA". This operation would \nreturn "Palo Alto" if user enters "city" as a key.\n\nIf the input object contains JSON array, array index can be used in the key input. For example, \n{ "location"\: [\n      {"city"\: "Roseville", "country"\: "United States"},\n      {"city"\: "Cluj", "country"\: "Romania"},\n      {"city"\: "Yehud", "country"\: "Israel"}]    \n}\nThe operation would return "Roseville" if user enters "location[0].city" as a key.\n\nJavaScript objects are useful for representing structured data, and are\nespecially when used within an array.  For example, an operation that retrieves\na set of incidents from an external system may return the entire list in one\narray of incident objects.  The description of the enclosing folder,\n/Library/Utility Operations/Container/JavaScript Objects has more examples, and\nthe JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   object\n      The JavaScript object.  \n      The operation will return a failure if it is not a JavaScript object.\n\n   key\n      The key in the object to get the value of.\n\nResponses\n\n   success\n      The value was successfully returned for the specified key. \n\n   failure\n      There was some error in processing the object, most likely because the\n      object is not in valid JavaScript Object Notation or the specified key does not exist in the object.  \n      You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with\n      JavaScript Object Notation.\n\nOutputs\n\n   The primary output will be the value for the specified key in the object.\n\nNote\n\n    If the value in JSON object is in scientific notation, the returned output will be converted to an equivalent decimal number. Ex, 2.9e+1 will be converted to 29.\n</pre>
076be6d6-0c64-40a5-8b50-2ec432805877.aa62e317-3102-4a64-9c85-5d03761888d4.prompt=VMWare Host\:
076be6d6-0c64-40a5-8b50-2ec432805877.c47eedf3-797d-43fd-ba32-67883a3023e5.description=<pre>\nAccepts an object in the JavaScript Object Notation format (JSON) and\nreturns a value for the specified key.\n\nThe JSON format encodes objects as a set of unordered key/value pairs, which is\nsimilar to a structure or map in other programming languages.  For example,\n   { "city" \: "Palo Alto", \n     "state" \: "CA" }\nis an object with two elements one with the name "city" having the value "Palo\nAlto", and the other being the name "state" with the value "CA". This operation would \nreturn "Palo Alto" if user enters "city" as a key.\n\nIf the input object contains JSON array, array index can be used in the key input. For example, \n{ "location"\: [\n      {"city"\: "Roseville", "country"\: "United States"},\n      {"city"\: "Cluj", "country"\: "Romania"},\n      {"city"\: "Yehud", "country"\: "Israel"}]    \n}\nThe operation would return "Roseville" if user enters "location[0].city" as a key.\n\nJavaScript objects are useful for representing structured data, and are\nespecially when used within an array.  For example, an operation that retrieves\na set of incidents from an external system may return the entire list in one\narray of incident objects.  The description of the enclosing folder,\n/Library/Utility Operations/Container/JavaScript Objects has more examples, and\nthe JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   object\n      The JavaScript object.  \n      The operation will return a failure if it is not a JavaScript object.\n\n   key\n      The key in the object to get the value of.\n\nResponses\n\n   success\n      The value was successfully returned for the specified key. \n\n   failure\n      There was some error in processing the object, most likely because the\n      object is not in valid JavaScript Object Notation or the specified key does not exist in the object.  \n      You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with\n      JavaScript Object Notation.\n\nOutputs\n\n   The primary output will be the value for the specified key in the object.\n\nNote\n\n    If the value in JSON object is in scientific notation, the returned output will be converted to an equivalent decimal number. Ex, 2.9e+1 will be converted to 29.\n</pre>
076be6d6-0c64-40a5-8b50-2ec432805877.e695ca22-f585-4e07-95a2-83930351459f.description=<pre>\nAccepts an object in the JavaScript Object Notation format (JSON) and\nreturns a value for the specified key.\n\nThe JSON format encodes objects as a set of unordered key/value pairs, which is\nsimilar to a structure or map in other programming languages.  For example,\n   { "city" \: "Palo Alto", \n     "state" \: "CA" }\nis an object with two elements one with the name "city" having the value "Palo\nAlto", and the other being the name "state" with the value "CA". This operation would \nreturn "Palo Alto" if user enters "city" as a key.\n\nIf the input object contains JSON array, array index can be used in the key input. For example, \n{ "location"\: [\n      {"city"\: "Roseville", "country"\: "United States"},\n      {"city"\: "Cluj", "country"\: "Romania"},\n      {"city"\: "Yehud", "country"\: "Israel"}]    \n}\nThe operation would return "Roseville" if user enters "location[0].city" as a key.\n\nJavaScript objects are useful for representing structured data, and are\nespecially when used within an array.  For example, an operation that retrieves\na set of incidents from an external system may return the entire list in one\narray of incident objects.  The description of the enclosing folder,\n/Library/Utility Operations/Container/JavaScript Objects has more examples, and\nthe JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   object\n      The JavaScript object.  \n      The operation will return a failure if it is not a JavaScript object.\n\n   key\n      The key in the object to get the value of.\n\nResponses\n\n   success\n      The value was successfully returned for the specified key. \n\n   failure\n      There was some error in processing the object, most likely because the\n      object is not in valid JavaScript Object Notation or the specified key does not exist in the object.  \n      You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with\n      JavaScript Object Notation.\n\nOutputs\n\n   The primary output will be the value for the specified key in the object.\n\nNote\n\n    If the value in JSON object is in scientific notation, the returned output will be converted to an equivalent decimal number. Ex, 2.9e+1 will be converted to 29.\n</pre>
076be6d6-0c64-40a5-8b50-2ec432805877.e7286a14-eba9-438e-9b22-be23bcb4e0b2.description=<pre>\nInsert an object into a JSON array, optionally specifying the position at which to insert the new object. \n\nThis Operation differes from the 'Add to Array' operation in that this one will try and validate the new element as\na JSON object, whereas 'Add to Array' will just wrap the element in quotes and treat it as a string. This means \nthat the element passed into this operation must be a valid JSON object, or the operation will fail. \n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n    element - The element to insert into the array. As noted above, this must be a valid JSON object or the operation will fail. It can be \n                    any valid JSON object; such as a number, string, an array, or a name/value pair list. Numbers can be entered as-is, strings\n                    must be wrapped in quotes, and objects must be formated correctly (see examples below for more info)\nValid values\: Any valid JSON object\nExamples\: 1 or "a string" or {"one"\:"two", "three"\:"four"} or [1,2,3]\n\n    index -The index in the array at which to insert the new element. If index is undefined, or index is equal to the length of the array \n               (one past the last element), the new element is placed at the end of the array. See the notes above for more information\n               on using negative numbers to specify array elements.\n               If the index is valid, the new element is inserted at that position, and all remaining elements are shifted one position to the right.\n\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\nDefault value\: undefined (insert the new element at the end of the array)\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array with the inserted element.\n\n</pre>
0b734fc3-765e-41f0-a9b9-71306fcacdcd.082a0617-f59e-4523-980c-dc44062fe3c6.prompt=Component ID
0b734fc3-765e-41f0-a9b9-71306fcacdcd.21ce8f9d-a59f-41d4-bdcd-6c70f30f6d31.prompt=User Identifier
0b734fc3-765e-41f0-a9b9-71306fcacdcd.665edc99-9d77-49a1-8586-3ea929c4ad6a.prompt=User Identifier
0b734fc3-765e-41f0-a9b9-71306fcacdcd.74322616-c3a7-400b-acee-3f7cebd00a04.description=<pre>\nThis workflow adds/updates the service component property using Artifact API.\n\nInputs-\ncomponentId \u2013 Service Component  id\nuserIdentifier  - User Identifier id\ndisplayName - Property Display Name to  add or update\npropertyName \u2013 Property Name to add or update\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\nvalueType - Value type of the property. It can have value from selection list "HP CSA \u2013 Property ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values delimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator - A delimiter that separates elements in the values ( default delimiter used is comma ,)\nconsumerVisible - Do you want to make property visible on consumer portal? (true/false), Default set to true\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
0b734fc3-765e-41f0-a9b9-71306fcacdcd.811f1717-7657-4fc9-90c0-9adabd127143.prompt=User Identifier
0b734fc3-765e-41f0-a9b9-71306fcacdcd.9b43a8e6-71e3-4301-bdd5-e32692093874.prompt=Artifact ID
0b734fc3-765e-41f0-a9b9-71306fcacdcd.b41c8b53-8a81-4234-98ba-70037ffa2cf3.description=<pre>\nThis workflow adds/updates the service component property using Artifact API.\n\nInputs-\ncomponentId \u2013 Service Component  id\nuserIdentifier  - User Identifier id\ndisplayName - Property Display Name to  add or update\npropertyName \u2013 Property Name to add or update\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\nvalueType - Value type of the property. It can have value from selection list "HP CSA \u2013 Property ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values delimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator - A delimiter that separates elements in the values ( default delimiter used is comma ,)\nconsumerVisible - Do you want to make property visible on consumer portal? (true/false), Default set to true\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
0b734fc3-765e-41f0-a9b9-71306fcacdcd.cd85c19a-cc8c-4d17-829a-1f1f757e9592.description=This workflow returns the component properties and values using Artifact APIs.\n\nresult\:\npropertyNameValuesList\: pipe separated list of property name and values ( where each property name and values would be ; seprated and multiple values would be , seprated)\ne.g. - property 1; value1,value2|property 2; value3|property 3; value3,value4|........
0b734fc3-765e-41f0-a9b9-71306fcacdcd.e9963ebd-48fa-4fe2-b77e-54a4631f02e1.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
0b734fc3-765e-41f0-a9b9-71306fcacdcd.f648070f-447a-4aa3-9cb7-e2622f770467.prompt=Component ID
0c914d7b-b6ed-4c5d-8170-c4f711e1c0c5.0b9f70b8-d75a-4c8c-a956-ce903fa7ba04.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
0c914d7b-b6ed-4c5d-8170-c4f711e1c0c5.239196a7-527d-4c2b-a575-b1749838c128.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
0c914d7b-b6ed-4c5d-8170-c4f711e1c0c5.396cb56f-c25a-4e16-85f6-cbb8f559c15c.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
0c914d7b-b6ed-4c5d-8170-c4f711e1c0c5.5acee96e-7bd2-4f8f-8d7a-a5d71efc1b77.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
0c914d7b-b6ed-4c5d-8170-c4f711e1c0c5.7ce11d0a-6e5b-43ad-b7f5-8709b4ecf231.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
0c914d7b-b6ed-4c5d-8170-c4f711e1c0c5.9e230595-277b-4484-900e-d15f147bb442.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
0c914d7b-b6ed-4c5d-8170-c4f711e1c0c5.af45934d-46f4-4dbf-99ec-391db47646f0.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
0c914d7b-b6ed-4c5d-8170-c4f711e1c0c5.description=<pre>\nBuild Fixed IP Customization Specification XML.\n\nInputs Parameters\:\n\n customSpecXml - User provided customization specification\n customSpecType - Type of the customization specification type i.e. Linux or Windows\n osType - OS type specified by the user.\n ipAddress - IP Address\n subnetMask - Subnet Mask\n gatewayIpList - List of gateway IP address\n dnsServerIpList - List of DNS server IP address\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n\nOutput\:\ncustomizationSpecXml - Customization Specification XML with Fixed IP.\n</pre>
0c914d7b-b6ed-4c5d-8170-c4f711e1c0c5.df6f6d69-7b76-4981-a679-4e689c2a7c42.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
0c914d7b-b6ed-4c5d-8170-c4f711e1c0c5.dfc16f26-ddc8-4efa-bb29-becbebc91213.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
0d950c4b-b863-4e7d-a0a2-10add65b8317.5c239759-7ddf-483c-b2d6-39680cd57052.description=<pre>\nThis workflow gets details of the Resource Pool artifact.\n\nInputs-\nresourcePoolId \t- Resource Pool ID\nuserIdentifier  \t- User Identifier id\nresourceType \t\u2013 Resource Type For eg. CPU,MEMORY etc\nauthType \t\t- The authentication type that this operation uses when trying to execute the request on the target server.\n\t\tvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\n\t\tDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile \t- The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout \t\t- The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite \ttimeout.Default value\: 0.\nuseCookies \t\t- If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy \t\t- A proxy to use when accessing the web site.\nproxyPort \t\t- The port on the proxy to connect to.\nproxyUsername\t - The username to use when connecting to the proxy.\nproxyPassword\t - The password to use when connecting to the proxy.\nencodeURL\t\t - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent\t\t - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots\t\t - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore\t\t - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword \t- Password to unlock the keystore.\ntrustKeystore\t - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword\t - Password to unlock the truststore.\n\nOutputs-\ndocument  \t\t- returned XML document from API\nproviderId\t\t- Provider Id of the Resource Pool\npoolReference\t- Pool Reference Name\navailabilityIndicator\t- Availability Indicator of the resource type\nusedByCSA\t\t- resource value consumed by CSA\nunit\t\t- Unit of the resouce \navailabletoCSA\t- Total resource available to CSA\n</pre>
0d950c4b-b863-4e7d-a0a2-10add65b8317.5f0d12de-56d5-4d5e-9333-e0b0102cee84.description=<pre>\nThis workflow requests the life cycle engine to execute and take the given service component and it's childs to the deployed state.\n\nInputs-\ncomponentId \u2013 Service component id\nserviceInstanceId - Service Instance Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
0d950c4b-b863-4e7d-a0a2-10add65b8317.7ad14803-73bd-4409-90de-e12d2db071db.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
0d950c4b-b863-4e7d-a0a2-10add65b8317.85d1963c-1941-4e99-88eb-ae01ec2465eb.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
0d950c4b-b863-4e7d-a0a2-10add65b8317.874ed342-29e9-4d3b-affe-e4ca0ec81167.prompt=Process Instance ID
0d950c4b-b863-4e7d-a0a2-10add65b8317.9ec8c5e5-1998-4c87-ad31-62c7211be893.prompt=User Identifier
0d950c4b-b863-4e7d-a0a2-10add65b8317.aaf2513b-946f-4b6f-8718-13dd2d64f51f.prompt=Process Instance ID
0d950c4b-b863-4e7d-a0a2-10add65b8317.d7f2c422-0bba-4558-b7e6-223ea47ced47.prompt=User Identifier
0d950c4b-b863-4e7d-a0a2-10add65b8317.eec03049-430e-41c8-bf99-2325356c5901.prompt=User Identifier
0d95661d-2fc6-41a0-b0c1-bf101040e0cc.1035fbd5-35b3-44af-86ba-0e3008fe1f75.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
0d95661d-2fc6-41a0-b0c1-bf101040e0cc.2770cff8-19cd-49b4-87f3-475792c591bf.description=f63d4890-514e-4512-a11d-c5a75fb41ffc.f101b760-b061-45f5-a4b9-e29ad5e0332d.description
0d95661d-2fc6-41a0-b0c1-bf101040e0cc.58ff2eec-c103-4983-be46-a59f25a76a07.description=<pre>Search for VMWare objects of type propsType and their properties (propsPathset) from a root object (if any) specified by propsRootObjType and propsRootObj. Retrieves each object's properties one at a time from an initial search query as the one used for the SQL Query operation. Please see VMWare Integration Guide for more details.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n    no more - There are no more results to retrieve.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
0d95661d-2fc6-41a0-b0c1-bf101040e0cc.5e60c318-84b6-47ad-a561-a127cb61c200.prompt=VMWare Host\:
0d95661d-2fc6-41a0-b0c1-bf101040e0cc.a2534f96-7be0-498f-8326-1a76eb694009.prompt=VMWare User\:
0d95661d-2fc6-41a0-b0c1-bf101040e0cc.a96c2334-049c-4c50-b15e-9a08c6f2efd7.prompt=Close session?\:
0d95661d-2fc6-41a0-b0c1-bf101040e0cc.d51ea035-e09d-4f75-89e9-3f77ed11464d.description=<pre>\nInsert an object into a JSON array, optionally specifying the position at which to insert the new object. \n\nThis Operation differes from the 'Add to Array' operation in that this one will try and validate the new element as\na JSON object, whereas 'Add to Array' will just wrap the element in quotes and treat it as a string. This means \nthat the element passed into this operation must be a valid JSON object, or the operation will fail. \n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n    element - The element to insert into the array. As noted above, this must be a valid JSON object or the operation will fail. It can be \n                    any valid JSON object; such as a number, string, an array, or a name/value pair list. Numbers can be entered as-is, strings\n                    must be wrapped in quotes, and objects must be formated correctly (see examples below for more info)\nValid values\: Any valid JSON object\nExamples\: 1 or "a string" or {"one"\:"two", "three"\:"four"} or [1,2,3]\n\n    index -The index in the array at which to insert the new element. If index is undefined, or index is equal to the length of the array \n               (one past the last element), the new element is placed at the end of the array. See the notes above for more information\n               on using negative numbers to specify array elements.\n               If the index is valid, the new element is inserted at that position, and all remaining elements are shifted one position to the right.\n\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\nDefault value\: undefined (insert the new element at the end of the array)\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array with the inserted element.\n\n</pre>
0d95661d-2fc6-41a0-b0c1-bf101040e0cc.description=<pre> This flow will list all the templates in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of templates.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
0d95661d-2fc6-41a0-b0c1-bf101040e0cc.ffa2a44c-4fe3-423e-ab62-545b40b1d3d9.prompt=Password\:
0dd0d801-b567-4448-a229-a3c1068ff606.1199765d-fab8-47f8-9b3f-d7bc1f1d7bbf.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
0dd0d801-b567-4448-a229-a3c1068ff606.1f471bde-9745-4e0f-a4ae-5ef1c6d03d9e.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
0dd0d801-b567-4448-a229-a3c1068ff606.220f1171-ea1d-4d7b-925b-911669219d55.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
0dd0d801-b567-4448-a229-a3c1068ff606.23894da1-e741-42af-b091-62488ba5cce1.prompt=Component ID
0dd0d801-b567-4448-a229-a3c1068ff606.2d7c2792-21eb-44b0-aae0-3e8d84712b55.prompt=User Identifier
0dd0d801-b567-4448-a229-a3c1068ff606.2e85232a-ac34-45fb-ae72-8ad95fcf5890.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
0dd0d801-b567-4448-a229-a3c1068ff606.2f8b6904-b399-4ad0-8bcb-30e6a1469230.prompt=User Identifier
0dd0d801-b567-4448-a229-a3c1068ff606.30358091-ff7e-41fe-b30e-ec248db681c0.prompt=User Identifier
0dd0d801-b567-4448-a229-a3c1068ff606.305e1a44-97bd-4a9b-9b99-e08bb2bd4434.prompt=Component ID
0dd0d801-b567-4448-a229-a3c1068ff606.3f4be96c-2ce2-4158-97cb-beb53e3fcd1e.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
0dd0d801-b567-4448-a229-a3c1068ff606.42909aea-5d02-4ec5-a099-8b30cd908276.prompt=User Identifier
0dd0d801-b567-4448-a229-a3c1068ff606.44ce9d82-ccea-4ab0-85a6-4a98950e2237.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
0dd0d801-b567-4448-a229-a3c1068ff606.6ce3a34b-0ad3-45b5-b4e9-c38801fb154e.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
0dd0d801-b567-4448-a229-a3c1068ff606.74dd5739-55a4-4217-9d1f-aa555d033350.prompt=Component ID
0dd0d801-b567-4448-a229-a3c1068ff606.81729602-6b91-41c5-a7e0-e3ac28e15a1f.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
0dd0d801-b567-4448-a229-a3c1068ff606.8e4cf467-249b-4640-9ed8-2a23ef488ce8.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
0dd0d801-b567-4448-a229-a3c1068ff606.9aa7bd2d-bf6a-4602-8702-5365ebc6117c.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
0dd0d801-b567-4448-a229-a3c1068ff606.b7676dc8-d633-47eb-9ce5-af37a439cfa5.prompt=User Identifier
0dd0d801-b567-4448-a229-a3c1068ff606.bc10ee42-680b-41c2-81bf-cb7ec2a66f75.prompt=Component ID
0dd0d801-b567-4448-a229-a3c1068ff606.c042bd23-fb89-4087-9e04-0102fa915aaf.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
0dd0d801-b567-4448-a229-a3c1068ff606.c8cee04d-bde0-4796-9db1-3cf9118d8396.prompt=Artifact ID
0dd0d801-b567-4448-a229-a3c1068ff606.d0cd134e-d6a6-4e67-aea7-1dd0af53b205.prompt=User Identifier
0dd0d801-b567-4448-a229-a3c1068ff606.d394489f-ad65-4946-951d-e24f907cf50e.prompt=User Identifier
0dd0d801-b567-4448-a229-a3c1068ff606.d4fddb29-b233-4216-aa8b-0128dd1d81e5.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
0dd0d801-b567-4448-a229-a3c1068ff606.d6ddaa4e-a7ea-463e-b969-f15c9e793ba6.prompt=User Identifier
0dd0d801-b567-4448-a229-a3c1068ff606.ed6a18d5-9045-4d92-ba9d-ea8e3840d4d5.prompt=Component ID
0dd0d801-b567-4448-a229-a3c1068ff606.efb0c03a-a144-4ac8-a36e-aa88e490b670.prompt=Component ID
0dd0d801-b567-4448-a229-a3c1068ff606.efef491a-3a0d-4d27-bd6a-d902a4eca2df.prompt=Component ID
0dd0d801-b567-4448-a229-a3c1068ff606.f50622fd-0eab-4e4f-940b-7789ecb78449.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
0dd0d801-b567-4448-a229-a3c1068ff606.fba1492e-c213-419f-bf6b-89a2e823b7ca.description=This workflow returns the component properties and values using Artifact APIs.\n\nresult\:\npropertyNameValuesList\: pipe separated list of property name and values ( where each property name and values would be ; seprated and multiple values would be , seprated)\ne.g. - property 1; value1,value2|property 2; value3|property 3; value3,value4|........
0dd0d801-b567-4448-a229-a3c1068ff606.fc0f2dd0-0435-419b-a837-618e32510a84.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
0f4bd911-2678-40d8-b2f3-3c6ea97810c2.1764ebd7-1abc-4598-bcfb-97b520b33fa6.prompt=Password\:
0f4bd911-2678-40d8-b2f3-3c6ea97810c2.3a57fcac-5155-4e10-bafe-6edf0e251449.prompt=Password\:
0f4bd911-2678-40d8-b2f3-3c6ea97810c2.419aed17-e112-4827-8688-09d524b81429.prompt=Password\:
0f4bd911-2678-40d8-b2f3-3c6ea97810c2.613bc7d3-8995-44be-af14-e2573904be6f.prompt=VMWare Host\:
0f4bd911-2678-40d8-b2f3-3c6ea97810c2.6b6efdf8-a08b-490d-b4ec-3093dc1ff1b1.prompt=Virtual Machine\:
0f4bd911-2678-40d8-b2f3-3c6ea97810c2.7e831d58-514c-49de-9f96-a7d1f242982a.prompt=VMWare User\:
0f4bd911-2678-40d8-b2f3-3c6ea97810c2.87c2b120-d282-43c9-aa9f-166af4529efd.description=<pre>Modifed advanced settings for a virtual machine. Optional inputs that are left empty will not be modified on the VM.\n\nInputs\:\n    host - VMware vCenter, ESX or ESXi host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    async - Asynchronously perform the task.\nValid values\: "true", "false"\n    taskTimeOut - Time to wait in seconds before the operation is considered to have failed.\nDefault value\: 800\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmIdentifierType - Virtual machine identifier type \nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"\n    vmDatacenter - Virtual machine's datacenter.\n    guestOSID - Guest OS ID (eg. win95Guest,winNetEnterprise64Guest,etc.) or OS description (Microsoft Windows 3.1,Microsoft Windows Vista (64-bit),Red Hat Enterprise Linux 3 (64-bit)). A list of valid entries can be retrieved via the GetOSDescriptors operation.\n    enableLogging - Logging setting for the VM.  If true, logging will be enabled for the VM.  If false, logging will be disabled.\nValid values\: "true", "false"\n    disableVideoAccel - Console video acceleration setting for the VM.  If true, video acceleration will be disabled.  If false, videoacceleration will be enabled.\nValid values\: "true", "false"\n    memHotAdd - Allow memory hot add for the VM.  Only supported with virtual hardware 7 or greater.\nValid values\: "true", "false"\n    cpuHotAdd - Allow cpu hot add for the VM.  Only supported with virtual hardware 7 or greater.\nValid values\: "true", "false"\n    cpuHotRemove - Allow cpu hot removal for the VM.  Only supported with virtual hardware 7 or greater.  If true, cpuHotAdd input is forced to true.\nValid values\: "true", "false"\n    swapPlacement - Prefered location of the VM swap file.\nValid values\:\ninherit - Honor the virtual machine swapfile placement policy of the compute resource that contains this virtual machine.\nvmDirectory - Store the seapfile in teh same directory as the virtual machine.\nhostLocal - Store the swapfile in the datastore specified by the localSwapDatastore property of the virtual machine's host.    \n    virtualCpuMmu - CPU instruction set and MMU virtualization preference.\nValid values\: \nauto - Automatically enable hardware instruction set or MMU virtualization if available.\nsoftware - Always used software for instruction set and MMU virtualization.\ninstructionSet - Use instruction set hardware virtualization and software MMU virtualization.\ninstructionSetMMU - Use both instruction set and MMU hardware virtualization.\n    configParamsNames - A list of names separated by <delimiter> which represent the names for the configuration parameters to be set for the given virtual machine. Existing configuration properties will be changed.\nExample\: deploymentPlatform,snapshot.action,isolation.tools.diskWiper.disable\n    configParamsValues - A list of values separated by <delimiter> which represent the values for the configuration parameters to be set for the given virtual machine.\nExample\: windows,keep,true\n    delimiter - The delimiter used for the <configParamsNames> and <configParamsValues> inputs.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    returnResult - Task result or operation result\n\nNotes\:\n1. Inventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
0f4bd911-2678-40d8-b2f3-3c6ea97810c2.920edb14-c81c-427d-88df-a2f1919ffa1b.prompt=VMWare Host\:
0f4bd911-2678-40d8-b2f3-3c6ea97810c2.9a2bf0c8-6d2f-4427-b3b1-e5f19ec05d23.prompt=Virtual Machine\:
0f4bd911-2678-40d8-b2f3-3c6ea97810c2.9da0f1d6-deec-4629-b33e-1aa3a9a3177d.description=<pre>Modifed advanced settings for a virtual machine. Optional inputs that are left empty will not be modified on the VM.\n\nInputs\:\n    host - VMware vCenter, ESX or ESXi host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    async - Asynchronously perform the task.\nValid values\: "true", "false"\n    taskTimeOut - Time to wait in seconds before the operation is considered to have failed.\nDefault value\: 800\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmIdentifierType - Virtual machine identifier type \nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"\n    vmDatacenter - Virtual machine's datacenter.\n    guestOSID - Guest OS ID (eg. win95Guest,winNetEnterprise64Guest,etc.) or OS description (Microsoft Windows 3.1,Microsoft Windows Vista (64-bit),Red Hat Enterprise Linux 3 (64-bit)). A list of valid entries can be retrieved via the GetOSDescriptors operation.\n    enableLogging - Logging setting for the VM.  If true, logging will be enabled for the VM.  If false, logging will be disabled.\nValid values\: "true", "false"\n    disableVideoAccel - Console video acceleration setting for the VM.  If true, video acceleration will be disabled.  If false, videoacceleration will be enabled.\nValid values\: "true", "false"\n    memHotAdd - Allow memory hot add for the VM.  Only supported with virtual hardware 7 or greater.\nValid values\: "true", "false"\n    cpuHotAdd - Allow cpu hot add for the VM.  Only supported with virtual hardware 7 or greater.\nValid values\: "true", "false"\n    cpuHotRemove - Allow cpu hot removal for the VM.  Only supported with virtual hardware 7 or greater.  If true, cpuHotAdd input is forced to true.\nValid values\: "true", "false"\n    swapPlacement - Prefered location of the VM swap file.\nValid values\:\ninherit - Honor the virtual machine swapfile placement policy of the compute resource that contains this virtual machine.\nvmDirectory - Store the seapfile in teh same directory as the virtual machine.\nhostLocal - Store the swapfile in the datastore specified by the localSwapDatastore property of the virtual machine's host.    \n    virtualCpuMmu - CPU instruction set and MMU virtualization preference.\nValid values\: \nauto - Automatically enable hardware instruction set or MMU virtualization if available.\nsoftware - Always used software for instruction set and MMU virtualization.\ninstructionSet - Use instruction set hardware virtualization and software MMU virtualization.\ninstructionSetMMU - Use both instruction set and MMU hardware virtualization.\n    configParamsNames - A list of names separated by <delimiter> which represent the names for the configuration parameters to be set for the given virtual machine. Existing configuration properties will be changed.\nExample\: deploymentPlatform,snapshot.action,isolation.tools.diskWiper.disable\n    configParamsValues - A list of values separated by <delimiter> which represent the values for the configuration parameters to be set for the given virtual machine.\nExample\: windows,keep,true\n    delimiter - The delimiter used for the <configParamsNames> and <configParamsValues> inputs.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    returnResult - Task result or operation result\n\nNotes\:\n1. Inventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
0f4bd911-2678-40d8-b2f3-3c6ea97810c2.ada1d958-de0c-48b8-9755-9c416cf6f615.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
0f4bd911-2678-40d8-b2f3-3c6ea97810c2.b7309834-d748-49ae-83b3-78b0bb0f9a50.prompt=VMWare Host\:
0f4bd911-2678-40d8-b2f3-3c6ea97810c2.c9243ebc-474c-4b1c-ad25-1e28015388be.prompt=VMWare User\:
0f4bd911-2678-40d8-b2f3-3c6ea97810c2.e81a186b-3532-4635-b532-f5ca3372a641.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
1288aeb0-0755-406b-8aab-d573496f4409.193e634f-8b3d-4a46-a2db-49ff8d60ba24.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
1288aeb0-0755-406b-8aab-d573496f4409.a6e6f51e-faff-4c9c-acad-3bf14e6e37d1.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
1288aeb0-0755-406b-8aab-d573496f4409.f80c7a98-9553-4afd-aa90-4ca7b398bf0d.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
14942ff0-0c54-4a77-9d7d-159f415fb817.09ca981b-1ac9-4bf6-a463-63f6e9c19ac1.prompt=VMWare User\:
14942ff0-0c54-4a77-9d7d-159f415fb817.0b02a601-83c7-49f2-9bd7-89b1e3e096d0.prompt=Close session?\:
14942ff0-0c54-4a77-9d7d-159f415fb817.3b9cbd9b-1bca-4bbb-b888-824a8b84a433.prompt=VMWare User\:
14942ff0-0c54-4a77-9d7d-159f415fb817.40599eb5-eea3-4f63-ba1b-baea83894db4.prompt=Target datacenter\:
14942ff0-0c54-4a77-9d7d-159f415fb817.4e2e0c88-25a0-46a3-9323-6bd8be955f87.prompt=Password\:
14942ff0-0c54-4a77-9d7d-159f415fb817.55856fb8-3bf0-4249-b7e2-5dd3abfec435.prompt=Close session?\:
14942ff0-0c54-4a77-9d7d-159f415fb817.5eccd4f7-01ce-4262-a3de-fea7ce094bde.prompt=VMWare User\:
14942ff0-0c54-4a77-9d7d-159f415fb817.7e71bd20-dfd5-4578-876c-2ed61378f0d6.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
14942ff0-0c54-4a77-9d7d-159f415fb817.7f55f528-b661-41ce-8a98-9c038bc1a85f.prompt=VMWare Host\:
14942ff0-0c54-4a77-9d7d-159f415fb817.80b147c2-e895-4af2-ae3c-9ce3fb899e4e.description=Verifies if a specified inventory folder exists in a Datacenter, as seen in vCenter "Inventory > VMs and Templates" view.\n\nInputs\:\n   host - VMWare host hostname or IP address to connect to.\n   user - VMWare username used for authentication on the VMWare host.\n   password - VMWare user's password.\n   port - Port to use when establishing the connection. The value must be a numeric value greater than 0.\n            Example\: 443.\n            Default value\: 443.\n   protocol - Connection protocol. Valid values\: http, https. Default value\: https.\n   closeSession - Close the internally kept VMWare Infrastructure API session at completion of the operation.\n                         Valid values\: true, false.\n                         Default value\: false;\n   vmDatacenter - Datacenter in which to check if the VM inventory folder exists.\n   vmFolder - Path of VM inventory folder to check.  Folder names are delimited by a forward slash "/". This input is case sensitive.\n                   Example\: "Hewlett Packard/Operations Orchestration/Templates".\n\nResponses\:\n   folder exists - The operation completed successfully and the specified folder was found.\n   folder does not exist - The operation completed successfully and the specified folder was not found.\n   failure - Something went wrong.\n\nResults\:\n   returnResult - Primary result of the operation.\n   returnCode - Internal code such as 0 for success which is returned if the specified folder was found, 1 for 'no action' which is returned when the specified folder was not found and -1 for failure used to determine the response of a step\n   exception - exception stack trace, mainly used for debugging the root cause in case of failures.\n   folderID - the ID of the specified VM inventory folder if the folder exists.\n   \nNotes\:\n   1. When 'closeSession' is set to 'false' the value 'SESSION_ON\=true' will be included in the primary result.\n   2. The search for the VM inventory folder starts from the datacenter's root VM inventory folder and proceeds according to the inventory path provided in the 'vmFolder' input.\n   3. The Datacenter name must not be specified as part of the inventory folder path which is provided in the 'vmFolder' input.\n   4. When the folder path provided in the 'vmFolder' input contains consecutive forward slashes "//", these will be interpred as a single forward slash "/".\n   5. Limitation\: The operation will not find inventory folders which contain any '/' (forward slash) characters in the folder name.
14942ff0-0c54-4a77-9d7d-159f415fb817.86e687e5-82af-4c69-83d7-879b46fefa64.description=<pre>Creates a new inventory folder in a Datacenter as seen in vCenter "Inventory > VMs and Templates" view.\n\nInputs\:\n    host - VMware vCenter host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\n    vmDatacenter - Datacenter to create new VM inventory folder in.\n    vmFolder - Path of VM inventory folder to create.  Folder names are delimited by a forward slash "/". Will create any parent folders if they do not already exist.  This input is case sensitive.\nExample\: /Hewlett Packard/Operations Orchestration/Templates\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\nResults\:\n    returnResult - This is the primary output.  Descriptive result of the operation.  Reason for error on failure.\n    folderID - The ID of the created folder.\n</pre>
14942ff0-0c54-4a77-9d7d-159f415fb817.95756df6-1b8f-4fc6-8564-fe2817c57bea.prompt=Folder path to create\:
14942ff0-0c54-4a77-9d7d-159f415fb817.9ab9ba90-29be-4c29-b921-c1850d6b0328.prompt=Folder path to check\:
14942ff0-0c54-4a77-9d7d-159f415fb817.9c0617b7-2249-4a80-baf4-2c8a314450c0.prompt=VMWare Host\:
14942ff0-0c54-4a77-9d7d-159f415fb817.a2b98d6e-664f-4803-af25-e87fb699f3b9.prompt=Password\:
14942ff0-0c54-4a77-9d7d-159f415fb817.abcd3c6d-311d-4092-b49d-9c1f4f8f23fd.prompt=Password\:
14942ff0-0c54-4a77-9d7d-159f415fb817.ad5e2ac5-84e8-47ad-ae48-a5c3c8573348.prompt=Target datacenter\:
14942ff0-0c54-4a77-9d7d-159f415fb817.af514a21-fc0f-45c7-921e-59ad22547d40.prompt=Target datacenter\:
14942ff0-0c54-4a77-9d7d-159f415fb817.ddf8baac-787d-461b-9a92-cd634c81c8a6.prompt=VMWare Host\:
169c0301-f5d0-440e-aeac-9c0223e71bee.e2ae3418-3c86-4863-8d6d-d3caeaaac909.description=<pre>\nThis workflow requests the life cycle engine to execute and take the given service component and it's childs to the deployed state.\n\nInputs-\ncomponentId \u2013 Service component id\nserviceInstanceId - Service Instance Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
182626ea-dcde-4bd8-85b1-f9076538f6a8.04537817-f2f5-4212-be91-be498865a7d1.prompt=Enter a value for proxyPort
182626ea-dcde-4bd8-85b1-f9076538f6a8.050bc52f-f59a-4247-a76a-4dafdfaf9630.prompt=Enter a value for useCookies
182626ea-dcde-4bd8-85b1-f9076538f6a8.065f6ced-6a66-4fe3-9185-59202fe0406e.prompt=Enter a value for socketTimeout
182626ea-dcde-4bd8-85b1-f9076538f6a8.0cf3ad18-9a50-4eec-bfef-94d7303f5fea.description=<pre>\nThis workflow returns the details of the given artifact id.\n\nInputs-\nartifactId \u2013   Artifact  Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nsocketTimeout - The number of milliseconds to wait for the data to be retrieved. This input should be assigned a value greater than or equal to zero. A socketTimeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nfollowRedirects - If true, the GET command automatically follows redirects. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\nname \u2013  name of the artifactr \ndisplayName \u2013 display name of the artifact\nartifactType \u2013 Artifact type\nstate \u2013 state of the artifact\nlifeCycleState \u2013  life cycle state of the artifact\nlifeCycleSubState \u2013 life cycle sub state of the artifact\ndocument  \u2013 returned XML document from API\n</pre>
182626ea-dcde-4bd8-85b1-f9076538f6a8.0d68ae54-e291-4ab5-8e1d-7ee65e665eb6.prompt=Enter a value for trustAllRoots
182626ea-dcde-4bd8-85b1-f9076538f6a8.0dea94f5-1f4d-45a1-8fe3-8a598781b1d1.prompt=Enter a value for keystorePassword
182626ea-dcde-4bd8-85b1-f9076538f6a8.133e6cab-fe0c-4fd0-adb5-36daf6a82c7a.prompt=Artifact ID
182626ea-dcde-4bd8-85b1-f9076538f6a8.180e9a21-730f-4c7f-b09c-adbbdb3edd3e.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
182626ea-dcde-4bd8-85b1-f9076538f6a8.19c63099-f086-472b-ab16-db3a7b32449a.prompt=Enter a value for kerberosConfFile
182626ea-dcde-4bd8-85b1-f9076538f6a8.207e81b8-89f3-41da-b14d-116f3bcb4c6f.prompt=User Identifier
182626ea-dcde-4bd8-85b1-f9076538f6a8.2187398c-fd60-4985-93fd-847bde724c22.prompt=Enter a value for followRedirects
182626ea-dcde-4bd8-85b1-f9076538f6a8.2708a3d4-75a9-4593-a3de-a1141a253a9f.prompt=User Identifier
182626ea-dcde-4bd8-85b1-f9076538f6a8.4163a36d-df1e-46ef-a1db-b56c6179bb86.prompt=Enter a value for proxy
182626ea-dcde-4bd8-85b1-f9076538f6a8.432ced80-47bf-4853-90b8-f58b9456d532.prompt=Enter a value for timeout
182626ea-dcde-4bd8-85b1-f9076538f6a8.4c56522e-b57f-496d-974d-9ebc0080505a.description=<pre>Checks if a number or word is greater than another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 > value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
182626ea-dcde-4bd8-85b1-f9076538f6a8.4cca70a4-89ba-4bef-a868-bfdaca0daf52.prompt=Artifact ID
182626ea-dcde-4bd8-85b1-f9076538f6a8.538c79b7-c336-4680-8a37-42ddc67c6c58.prompt=Enter a value for userAgent
182626ea-dcde-4bd8-85b1-f9076538f6a8.591662cd-3ba2-435b-97f6-a0bc6db69ac2.description=<pre>\nAccepts an object in the JavaScript Object Notation format (JSON) and\nreturns a value for the specified key.\n\nThe JSON format encodes objects as a set of unordered key/value pairs, which is\nsimilar to a structure or map in other programming languages.  For example,\n   { "city" \: "Palo Alto", \n     "state" \: "CA" }\nis an object with two elements one with the name "city" having the value "Palo\nAlto", and the other being the name "state" with the value "CA". This operation would \nreturn "Palo Alto" if user enters "city" as a key.\n\nIf the input object contains JSON array, array index can be used in the key input. For example, \n{ "location"\: [\n      {"city"\: "Roseville", "country"\: "United States"},\n      {"city"\: "Cluj", "country"\: "Romania"},\n      {"city"\: "Yehud", "country"\: "Israel"}]    \n}\nThe operation would return "Roseville" if user enters "location[0].city" as a key.\n\nJavaScript objects are useful for representing structured data, and are\nespecially when used within an array.  For example, an operation that retrieves\na set of incidents from an external system may return the entire list in one\narray of incident objects.  The description of the enclosing folder,\n/Library/Utility Operations/Container/JavaScript Objects has more examples, and\nthe JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   object\n      The JavaScript object.  \n      The operation will return a failure if it is not a JavaScript object.\n\n   key\n      The key in the object to get the value of.\n\nResponses\n\n   success\n      The value was successfully returned for the specified key. \n\n   failure\n      There was some error in processing the object, most likely because the\n      object is not in valid JavaScript Object Notation or the specified key does not exist in the object.  \n      You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with\n      JavaScript Object Notation.\n\nOutputs\n\n   The primary output will be the value for the specified key in the object.\n\nNote\n\n    If the value in JSON object is in scientific notation, the returned output will be converted to an equivalent decimal number. Ex, 2.9e+1 will be converted to 29.\n</pre>
182626ea-dcde-4bd8-85b1-f9076538f6a8.63c82414-2efb-46c3-bebf-7d40a9d29009.description=<pre>\nGet the name and available disk space for a datastore .\n\nInputs\:\nproviderId \t\t- Resource Provider Id \nuserIdentifier\t- User Identifier  \n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nMap of datastore names and its free diskspace (KB)\n\n</pre>
182626ea-dcde-4bd8-85b1-f9076538f6a8.648118e2-27f0-4c30-877e-a4310e22f2ae.prompt=Enter a value for proxyUsername
182626ea-dcde-4bd8-85b1-f9076538f6a8.64ffd228-fc51-4902-9a3f-4810133faefc.prompt=Enter a value for socketTimeout
182626ea-dcde-4bd8-85b1-f9076538f6a8.722ad934-303c-49a0-bd4a-71bb67c1e08d.prompt=Enter a value for trustKeystore
182626ea-dcde-4bd8-85b1-f9076538f6a8.739234e0-a5bb-4087-8416-880639eb1896.prompt=Enter a value for encodeURL
182626ea-dcde-4bd8-85b1-f9076538f6a8.7a090672-9bb5-4324-b962-832d55775f23.prompt=Enter a value for value1
182626ea-dcde-4bd8-85b1-f9076538f6a8.7abb2ca8-17bc-4174-b060-eb19307e4787.prompt=Enter a value for proxyPassword
182626ea-dcde-4bd8-85b1-f9076538f6a8.7d74205a-7806-4cd2-b183-cd3a9ea21e32.prompt=Enter a value for trustPassword
182626ea-dcde-4bd8-85b1-f9076538f6a8.80059601-4997-40d6-94e8-fc69aa9be48c.description=<pre>Checks if a number or word is less than another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 < value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
182626ea-dcde-4bd8-85b1-f9076538f6a8.8645693f-2c0b-4a6f-9cd9-8b93abb505de.description=<pre>Checks to see if a string matches a specific rule.\n\nIf the matchType is RegEx, input matchTo is the regular expression like \: ^-?\\d+(([\\.,]\\d+)?)+$. Input toMatch is the actual string to check to see if it matches the matchTo expression.\n\nInputs\:\nmatchType - The type of match to perform.\ntoMatch - The string to check if matches another string.\nmatchTo - The string to match against. \nignoreCase - Boolean value for whether or not to ignore case during match.\n\nResponses\:\nsuccess - The String matched.\nfailure - The string did not match, or something went wrong.</pre>
182626ea-dcde-4bd8-85b1-f9076538f6a8.876c4f35-54d4-49f5-b1d9-3956ce88ac73.prompt=Enter a value for object
182626ea-dcde-4bd8-85b1-f9076538f6a8.8e499f53-7a80-4be7-b0e2-3bbb8ba4a040.prompt=Enter a value for proxyPort
182626ea-dcde-4bd8-85b1-f9076538f6a8.8ebdf0d1-72e9-4bbc-8055-b3cc63ca682b.prompt=Enter a value for encodeURL
182626ea-dcde-4bd8-85b1-f9076538f6a8.8efab9e0-8d52-456d-90cd-2f8178072fd1.prompt=Enter a value for proxy
182626ea-dcde-4bd8-85b1-f9076538f6a8.92149a7a-60de-49f5-a997-4e5517f62d0f.prompt=Enter a value for keystore
182626ea-dcde-4bd8-85b1-f9076538f6a8.9231f747-c1c4-43bf-b400-654f0477d76f.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
182626ea-dcde-4bd8-85b1-f9076538f6a8.92ce362a-0b9f-4f4e-8314-3c541ddad783.prompt=Enter a value for value2
182626ea-dcde-4bd8-85b1-f9076538f6a8.97a96c36-c811-4255-a782-5a57bd28d0e1.prompt=Enter a value for proxyUsername
182626ea-dcde-4bd8-85b1-f9076538f6a8.9b054f49-46f6-48bf-a68e-239fa7c937e6.prompt=Enter a value for timeout
182626ea-dcde-4bd8-85b1-f9076538f6a8.ac14a713-43bc-4743-90fc-9a494178bcf7.prompt=Enter a value for useCookies
182626ea-dcde-4bd8-85b1-f9076538f6a8.be9ab832-d47d-4833-b76e-b9dc3a5441d2.description=<pre>Clears the value of a flow variable\n\nInput Parameters\:\nkeyName - the name of the flow variable to clear\n\nResponses\:\nsuccess - cleared the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, null];</pre>
182626ea-dcde-4bd8-85b1-f9076538f6a8.c05c8fa3-f3f4-4162-ada8-fe4bfd1a7f5e.prompt=Enter a value for trustKeystore
182626ea-dcde-4bd8-85b1-f9076538f6a8.c2e4bc11-9b41-4a3e-aec9-41f13b11d7ca.prompt=Enter a value for authType
182626ea-dcde-4bd8-85b1-f9076538f6a8.c6f12abd-dee0-43f1-aa37-f579515b4aa0.prompt=Enter a value for trustAllRoots
182626ea-dcde-4bd8-85b1-f9076538f6a8.c80a188f-8778-40eb-9c76-040cb1b947ac.prompt=Enter a value for value1
182626ea-dcde-4bd8-85b1-f9076538f6a8.cdcf5710-a97b-4d75-8941-521554c13c82.description=<pre>\nThis workflow returns the details of the given artifact id.\n\nInputs-\nartifactId \u2013   Artifact  Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nsocketTimeout - The number of milliseconds to wait for the data to be retrieved. This input should be assigned a value greater than or equal to zero. A socketTimeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nfollowRedirects - If true, the GET command automatically follows redirects. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\nname \u2013  name of the artifactr \ndisplayName \u2013 display name of the artifact\nartifactType \u2013 Artifact type\nstate \u2013 state of the artifact\nlifeCycleState \u2013  life cycle state of the artifact\nlifeCycleSubState \u2013 life cycle sub state of the artifact\ndocument  \u2013 returned XML document from API\n</pre>
182626ea-dcde-4bd8-85b1-f9076538f6a8.d3d26775-0b48-49e6-a71b-cfe3f7bb10d7.prompt=Enter a value for kerberosConfFile
182626ea-dcde-4bd8-85b1-f9076538f6a8.da9f97e4-14a7-419c-a5df-b54d3b1338f3.prompt=Enter a value for authType
182626ea-dcde-4bd8-85b1-f9076538f6a8.de3e8609-78d9-4979-8a08-1db45ec11f94.prompt=Enter a value for keystorePassword
182626ea-dcde-4bd8-85b1-f9076538f6a8.de84ca56-b6cd-465c-92a3-5793fd586be8.prompt=Enter a value for trustPassword
182626ea-dcde-4bd8-85b1-f9076538f6a8.e509d39e-a70e-4ff1-8d62-b07495867858.prompt=Enter a value for keystore
182626ea-dcde-4bd8-85b1-f9076538f6a8.f54c5ebd-9bc3-4e10-a76b-c146898e551f.prompt=Enter a value for userAgent
182626ea-dcde-4bd8-85b1-f9076538f6a8.f706a54c-17b9-44f6-8318-a24c46172bdd.prompt=Enter a value for followRedirects
182626ea-dcde-4bd8-85b1-f9076538f6a8.fb3edb08-e485-454d-8248-061ae8f7d455.prompt=Enter a value for proxyPassword
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.1b62f871-59f7-4758-be33-340666d1166e.prompt=Password\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.1c5d72a6-fb7f-4764-8721-b6d28dc305be.prompt=VMWare Host\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.2ebc5f4a-ce07-43cb-80b8-df91ebc2cd97.prompt=Virtual Machine\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.3328639d-08a2-4631-af32-58bf9dd5ae47.prompt=Datastore\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.377b8289-333b-4eb4-9bc3-3233244c729a.prompt=VMWare Host\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.4d901754-8f7b-48de-bf38-017355770d47.prompt=Password\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.5bce8b5a-3dad-4aa9-a2d3-c2dec85b4076.prompt=VMWare User\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.5e266607-c684-4527-8c77-16d84952b74c.description=<pre>\nThis workflow will generate hostname based on subscription name and uuid. 20 charactes from subscription and 15 characters from uuid are appended to create unique id. For Windows  15 characters from uuid are parsed to create the hostname\n\nInputs\:\n\nsubscriptionId\t- Subscription ID\nuuid\t\t- UUID of server component Id\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\n\n\nReturns\nObjectId \t- Returns hostname\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.5f145c0b-ad69-4bcc-adfc-87cbea7a2af7.prompt=VMWare Host\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.7ae24d2a-6dbd-447d-8390-cbea0da14ab3.prompt=Password\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.82028de6-1515-4bd1-81a2-f4233f5d7376.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.821ba83a-808c-4dca-a704-4536d84fad40.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.8c773768-7d59-4213-b3dd-0fbaf6c2d28d.prompt=User Identifier
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.a1cd3694-f55e-4eae-8561-070754e760dd.prompt=Folder (inventory) path in datacenter\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.a238a44b-ca22-44b3-a858-79d5be3f839e.prompt=Password\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.b71e7632-6a79-4191-b108-c28ad68a4f33.prompt=Target datacenter\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.bdd2e6f8-9eb0-4265-8dd4-28c1f1d86c0b.prompt=VMWare User\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.c369faa9-ca3c-4c94-8459-fd874a593391.description=\nInputs\:\n\nhost -  vCenter DNS name/IP Address\nusername - vCenter user\npassword - vCenter user password\nport - vCenter port\nprotocol - vCenter protocol\nhypervisorName - Hypervisor DNS name/IP Address\ndataStore - Datastore of the hypervior\ndatacenterName - Datacenter name\nhostname - VM Server name\ntemplateReference -  VM Template name\nosType -  OS Type of the template\nCPUs - CPU Count to be assigned\nMemory -  Memory Size to be assigned\n\n\nResults\:\n\nvmId - VM Identifies of the created VM\nipAddress - IP Address of the created VM\nmacAddress - MAC Address of the created VM\n\n\n\n\n
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.cca9e824-af6d-4194-a8d4-c2e44d2b7143.description=<pre>\nSearch for VMWare objects of type propsType and their properties (propsPathset) from a root object (if any) specified by propsRootObj and propsRootObj. Retrieve each object's properties one at a time from an initial search query ala SQL Query operation. Please see VMWare Integration Guide for more details.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\npropsType - VMWare properties type (Task, Datacenter, VirtualMachine, etc.) to filter on. Type of object results desired.\npropsPathset - Property filter's pathset, comma-delimited (eg. name, info.name, runtime.host)\npropsRootObjType - VMWare object type (eg. VirtualMachine, HostSystem, ComputeResource,ResourcePool,Alarm)\npropsRootObj - VMWare object ID\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nhardDisk - boot disk space allocated for the VM.\nipaddess - IPAddress of the VM\nmacaddres - Mac Address of the VM.\n\n\n</pre>
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.da343840-b63a-45ea-835e-8a5b767bb8d9.prompt=Datacenter to create in\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.db6c47b6-dc9b-4e07-a8cc-81327807ae38.prompt=VMWare Host\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.description=<pre>\nProvision a  Simple Vcenter Linux VM from a VM template. \n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.e008086e-2fab-4480-8d5d-0d1341febd85.prompt=Guest OS ID\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.e20a5220-ed83-4c8a-81e6-bf25f99d0c16.prompt=VMWare User\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.e324f9cd-705c-4e3d-8e27-7ef2532d688e.prompt=Virtual Machine name\:
19585d80-8e8e-4b0b-bfbb-c76faee0cd66.e7e4e4b2-5361-432c-ab77-966b21d3eff6.prompt=Virtual Machine\:
1b04c6ad-4892-4aa7-a422-771856ff6bac.1eb3cbfa-1efb-4244-8359-9c44e0f56343.prompt=1b04c6ad-4892-4aa7-a422-771856ff6bac.1eb3cbfa-1efb-4244-8359-9c44e0f56343.prompt
1b04c6ad-4892-4aa7-a422-771856ff6bac.26abcb82-3331-4788-84a2-f7df81dc615c.description=<pre> This flow will list all the details like datacenter, datastore, networks, templates, virtual machines, folders and customespecs in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    providerid - Id of the vCenter provider\n\nResponses\:\n    success - The operation completed successfully. It will return the list details like datacenter, datastore, networks, templates, virtual machines, folders and customespecs in the vCenter.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
1b04c6ad-4892-4aa7-a422-771856ff6bac.29679dd9-5e05-4850-9124-8f18cb6e48db.description=1b04c6ad-4892-4aa7-a422-771856ff6bac.29679dd9-5e05-4850-9124-8f18cb6e48db.description
1b04c6ad-4892-4aa7-a422-771856ff6bac.494ac3c8-358d-468a-a4ab-12209974091d.description=1b04c6ad-4892-4aa7-a422-771856ff6bac.494ac3c8-358d-468a-a4ab-12209974091d.description
1b04c6ad-4892-4aa7-a422-771856ff6bac.4ff5c5a8-c79c-446f-9aff-410d545faa90.description=1b04c6ad-4892-4aa7-a422-771856ff6bac.4ff5c5a8-c79c-446f-9aff-410d545faa90.description
1b04c6ad-4892-4aa7-a422-771856ff6bac.67697c53-5b92-4ea2-9eab-94df74dcfa6a.description=1b04c6ad-4892-4aa7-a422-771856ff6bac.67697c53-5b92-4ea2-9eab-94df74dcfa6a.description
1b04c6ad-4892-4aa7-a422-771856ff6bac.6b95b97d-fb2a-44b5-b0fd-8f02d3d664f3.description=<pre> This flow will list all the details like datacenter, datastore, networks, templates, virtual machines, folders and customespecs in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    resourcePoolID - CSA context id\n    userIdentifier - CSA user details\n\nResponses\:\n    success - The operation completed successfully. It will return the list details like datacenter, datastore, networks, templates, virtual machines, folders and customespecs in the vCenter.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
1b04c6ad-4892-4aa7-a422-771856ff6bac.6e3fd9cd-68f4-4caf-bca5-2254ccf6b38a.description=1b04c6ad-4892-4aa7-a422-771856ff6bac.6e3fd9cd-68f4-4caf-bca5-2254ccf6b38a.description
1b04c6ad-4892-4aa7-a422-771856ff6bac.8e9bbc11-bc71-44f6-a7e2-26920cace184.description=1b04c6ad-4892-4aa7-a422-771856ff6bac.8e9bbc11-bc71-44f6-a7e2-26920cace184.description
1b04c6ad-4892-4aa7-a422-771856ff6bac.a016b22d-ed8d-449b-bb23-eb5d32ed628a.description=1b04c6ad-4892-4aa7-a422-771856ff6bac.a016b22d-ed8d-449b-bb23-eb5d32ed628a.description
1b04c6ad-4892-4aa7-a422-771856ff6bac.d10f5c19-a4b6-4e50-b07d-576259c6528a.description=1b04c6ad-4892-4aa7-a422-771856ff6bac.d10f5c19-a4b6-4e50-b07d-576259c6528a.description
1b04c6ad-4892-4aa7-a422-771856ff6bac.d30cda92-3ce6-4659-b1d9-35a600d39053.prompt=1b04c6ad-4892-4aa7-a422-771856ff6bac.d30cda92-3ce6-4659-b1d9-35a600d39053.prompt
1b04c6ad-4892-4aa7-a422-771856ff6bac.description=<pre>This flow is used for vCenter resource sync\n\nInput\:\n    CSA_CONTEXT_ID \: CSA Context Id\n    CSA_PROCESS_ID \: CSA Process Instance Id\n    providerId \: This is the provider id of the vCenter\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\n</pre>
1bf16957-8bb6-4b9d-8afe-14780ff43133.0e277881-45cf-4519-9e0a-ed13eed664a2.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
1bf16957-8bb6-4b9d-8afe-14780ff43133.2cdd2cc9-c88c-4842-bf5a-a9bd16360348.prompt=VMWare Host\:
1bf16957-8bb6-4b9d-8afe-14780ff43133.ba05dcce-3c4c-4196-be58-c4d3a278e158.prompt=Virtual Machine\:
1bf16957-8bb6-4b9d-8afe-14780ff43133.d231d20a-250b-4eb9-8651-f05401929294.prompt=VMWare User\:
1bf16957-8bb6-4b9d-8afe-14780ff43133.e2d26d2c-cf1d-441a-bf63-2331d2d16321.description=Edit an existing optical drive (CD/DVD drive) on a Virtual Machine\n\nInputs\:\n   host - VMWare host hostname or IP.\n   user - VMWare username.\n   password - VMWare user's password.\n   port - Port to connect on.\n   protocol - Connection protocol (http or https).\n   closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation.\nValid values\: true, false\n   async - Asynchronously perform the task.\nValid values\: true, false.\n   taskTimeOut - Time to wait before the operation is considered to have failed (seconds).\n   virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n   vmIdentifierType - Virtual machine identifier type. \nValid values\:inventorypath, name, ip, hostname, uuid, vmid.\n   vmDatacenter - Virtual machine's datacenter.\n   deviceNumber - The optical drive number on the VM.  As an example\: "CD/DVD Drive 1" would be deviceNumber "1".\n   deviceType - Type of optical device.  \nValid values\: \ndatastore - Uses an ISO image from a datastore.  Requires dataStore and diskPath inputs to be populated.\nhostDevice - Uses the optical device of the ESX/ESXi host system.  Optionally hostDevice input can specify the desired host device.  Otherwise the first available device will be used.\nclientEmulate - Sets device type to "Client Device" in "Emulate IDE" mode.\nclientPassthough - Sets deviceType to "Client Device" in "Passthough IDE" mode.\n   dataStore - Datastore (eg. host\:dsname, mydatastore) to find ISO image if deviceType is datastore.\n   diskPath - Path on datastore to use for ISO image. Include .iso suffix and do NOT include leading / . This ISO image must already exist on the datastore.\n   hostDevice - Device path of optical drive on host system.  Used if deviceType is hostDevice. If not specified the first available optical drive will be used.  \nExample value\: /dev/scd0\n   connectAtPowerOn - Connect optical drive at power on time of VM?  Not applicable for client device types.  \nValid values\: true, false.\n   connect - connect the optical drive immediately to the virtual machine. Not applicable for client device types.  \nValid values\: true, false.\n\n\nResponses\:\n   success - The operation completed successfully.\n   failure - Something went wrong.\n\nReturns\:\n   returnResult - Task result or operation result.\n\nNotes\:\n   1.Inventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n   2.When the 'deviceType' is set to 'dataStore' and 'connect' is set to 'true' the ISO image should be accessible immediately to the guest operating system.\n   3.The value specified in the 'connectedAtPowerOn' has priority over the value provided in the 'connect' input during VM power on. The values provided in the 'connectedAtPowerOn' will determine whether or not the optical drive will be connected to the VM after power on regardless of the value provided in the 'connect' input. \n   4.The operation may fail in synchronous mode (the "async" input is set to 'false') when attempting to modify a device already configured to use an ISO from the datastore representing certain Linux distributions. \n       4.1. You will be prompted by vSphere (for example in the vSphere client user interface, in the summary screen of the virtual machine specified in the "virtualMachine" input) to answer the a question. The changes will not take effect until an answer is provided or until the underlying task fails due to timing out.\n       4.2 .The question encountered is "The guest operating system has locked the CD-ROM door and is probably using the CD-ROM, which can prevent the guest from recognizing media changes. If possible, eject the CD-ROM from inside the guest before disconnecting. Disconnect anyway and override the lock?"\n       4.3. In order to overcome this issue it is recommended to run the operation asynchronously (set the "async" input value to 'true') and while the task is running use the "Get Virtual Machine" operation to retrieve the question and the possible answer choices which can be used to answer it and afterwards use the "Answer VM Question" operation to answer the question.\n
1bf16957-8bb6-4b9d-8afe-14780ff43133.e4777cf9-17f2-4693-a3dc-3d5985628ef0.prompt=Password\:
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.014f7ad8-d4c0-4422-afe6-d74a9e4b71a8.description=<pre>\nChecks to see if a list contains every element in another list.\n\nInputs\:\nsublist -Tthe contained list.\ncontainer - The containing list.\ndelimiter - A delimiter separating elements in the two lists.\n\nResponses\:\nsuccess - sublist is contained in container.\nfailure - sublist is not contained in container.\n\nResults\:\nField 1 - All items contained in the sublist that are not in the container. \n</pre>    
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.02ef3e28-e564-4e4b-b79b-d9d3e9d740a3.prompt=Enter a value for trustKeystore
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.04eb1571-a8f1-4b1a-a5b2-8e853ad4a89d.prompt=Enter a value for proxyPort
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.05d4d970-411d-4d5b-b695-24a19355c2bb.prompt=Enter a value for proxyUsername
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.087a92e5-2da0-4555-a3dd-b9a3e11f0737.prompt=Enter a value for encodeURL
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.11b17f2c-665a-441f-810b-4b802936ac2e.prompt=Enter a value for proxy
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.28631a78-8a94-4c64-b7f6-dd04267be29e.prompt=Enter a value for userAgent
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.2c19aaba-5b35-4e98-b6ad-cfbfa82ef1cd.prompt=Enter a value for kerberosConfFile
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.2f2ebecb-7f4e-489b-943f-1f3a70630667.prompt=Enter a value for proxyUsername
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.2f5de93d-04de-4c7a-88de-7ce60503d08c.prompt=Enter a value for proxyPassword
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.348511a2-30b3-434f-b7d9-62b5d0188005.prompt=Enter a value for timeout
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.45dd1e3c-617c-49e8-89d2-3a91ae7c04ec.prompt=Enter a value for useCookies
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.598b5a99-c9be-4323-8172-00e929c929cd.prompt=Enter a value for authType
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.64741a16-9aff-4a7f-a89d-80c984cc6b33.prompt=Enter a value for keystore
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.65385ed0-cf49-40ce-8322-2b7de3588aa9.description=<pre>Checks to see if a string matches a specific rule.\n\nIf the matchType is RegEx, input matchTo is the regular expression like \: ^-?\\d+(([\\.,]\\d+)?)+$. Input toMatch is the actual string to check to see if it matches the matchTo expression.\n\nInputs\:\nmatchType - The type of match to perform.\ntoMatch - The string to check if matches another string.\nmatchTo - The string to match against. \nignoreCase - Boolean value for whether or not to ignore case during match.\n\nResponses\:\nsuccess - The String matched.\nfailure - The string did not match, or something went wrong.</pre>
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.67d9efb6-b0a0-43d9-9d08-2223db7776b7.prompt=Enter a value for trustAllRoots
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.85bf8315-579c-42a9-a3b8-1545042006c6.description=<pre>\nThis workflow artifact details of the Resource Pool .\n\nInputs-\nresourcePoolId \t- Resource Pool ID\nuserIdentifier  \t- User Identifier id\nresourceType \t\u2013 Resource Type For eg. CPU,MEMORY etc\nauthType \t\t- The authentication type that this operation uses when trying to execute the request on the target server.\n\t\tvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\n\t\tDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile \t- The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout \t\t- The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite \ttimeout.Default value\: 0.\nuseCookies \t\t- If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy \t\t- A proxy to use when accessing the web site.\nproxyPort \t\t- The port on the proxy to connect to.\nproxyUsername\t - The username to use when connecting to the proxy.\nproxyPassword\t - The password to use when connecting to the proxy.\nencodeURL\t\t - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent\t\t - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots\t\t - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore\t\t - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword \t- Password to unlock the keystore.\ntrustKeystore\t - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword\t - Password to unlock the truststore.\n\nOutputs-\ndocument  \t\t- returned XML document from API\nproviderId\t\t- Provider Id of the Resource Pool\npoolReference\t- Pool Reference Name\navailabilityIndicator\t- Availability Indicator of the resource type\nusedByCSA\t\t- resource value consumed by CSA\nunit\t\t- Unit of the resouce \navailabletoCSA\t- Total resource available to CSA\n</pre>
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.87c18d5d-a98e-4ba5-84d0-03963122bf89.prompt=Enter a value for userAgent
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.88d80f87-1980-4d8d-86ee-4839a00f6437.prompt=Enter a value for proxyPort
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.8b4a40ba-586e-403a-870b-edc4aa4651ec.prompt=Enter a value for keystore
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.93ff3f4b-5395-4066-90f2-d025e6fee718.prompt=Enter a value for encodeURL
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.958b05c6-6f6f-4938-a15e-03fbc9f57f3c.prompt=Enter a value for proxy
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.9bcd6d6e-28a0-4a39-adac-3565e0dc38ad.prompt=Enter a value for trustKeystore
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.a6c54f85-11aa-4739-888d-671852c0bc44.prompt=Enter a value for keystorePassword
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.ad716207-44f2-4cd2-a0b8-b5a135f73a8c.prompt=Enter a value for kerberosConfFile
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.b7d076ab-2b60-4436-a3bd-3b17bfbfc5ea.prompt=Enter a value for trustPassword
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.c2bd6ecd-d8c7-464c-9065-5b897a93c205.prompt=Enter a value for useCookies
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.c6742376-9b15-48ec-871e-659282246863.prompt=Enter a value for trustAllRoots
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.cb088bad-7edf-48d9-ad76-172aff549031.prompt=Enter a value for timeout
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.d7c53d05-da7c-4714-9cb3-bfb0029133c5.prompt=Enter a value for trustPassword
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.d9706a6b-f3f5-4593-8f03-09c46f2cbe99.prompt=Enter a value for proxyPassword
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.dc14f06e-57b8-4969-8a67-9d1959ff362d.description=<pre>\nThis workflow updates resource type of a Resource Pool .\n\nInputs-\nresourcePoolId \t- Resource Pool ID\nuserIdentifier  \t- User Identifier id\nresourceType \t\u2013 Resource Type For eg. CPU,MEMORY etc\nusedValue \t\t- resource value consumed or released by CSA.                   \n\t\tpositive value signifies resource is been consumped by CSA and negative values signifies resources are release to Provider by CSA. \nauthType \t\t- The authentication type that this operation uses when trying to execute the request on the target server.\n\t\tvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\n\t\tDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile \t- The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout \t\t- The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite \ttimeout.Default value\: 0.\nuseCookies \t\t- If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy \t\t- A proxy to use when accessing the web site.\nproxyPort \t\t- The port on the proxy to connect to.\nproxyUsername\t - The username to use when connecting to the proxy.\nproxyPassword\t - The password to use when connecting to the proxy.\nencodeURL\t\t - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent\t\t - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots\t\t - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore\t\t - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword \t- Password to unlock the keystore.\ntrustKeystore\t - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword\t - Password to unlock the truststore.\n\nOutputs-\ndocument  \t\t\u2013 returned XML document from API\n</pre>
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.description=<pre>The flow will validate the resource capacity and updates the Resource Pool\n\nInputs\:\npoolId\t\t\: Resource Pool artifact Id\nuserIdentifier\t\: User Identifier\nresourceType\t\: The resource capacity types For eg\: CPU,Memory etc .. \ntotalResourceRequired\t\: Total Resource Capacity required/release into the Pool \n\n\nResponse\:\nsuccess\t\t\: Flow is successful\nfailure\t\t\: falow fails\n</pre>\n
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.e54a3616-ca49-43dd-8819-79513cbb982f.prompt=Enter a value for authType
1d7ad7da-9c97-4548-aa73-5b5182de4dcd.eceb6e86-79d6-4378-a363-878e92d07d95.prompt=Enter a value for keystorePassword
1dda9070-8ce4-4311-950a-1765361b4819.0e36a92e-ec8d-430e-b88f-e0d3aea08de6.prompt=Password\:
1dda9070-8ce4-4311-950a-1765361b4819.354046b0-020d-4686-898c-f77f6f1a0620.description=<pre>Search for VMWare objects of type propsType and their properties (propsPathset) from a root object (if any) specified by propsRootObjType and propsRootObj. Retrieves each object's properties one at a time from an initial search query as the one used for the SQL Query operation. Please see VMWare Integration Guide for more details.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n    no more - There are no more results to retrieve.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
1dda9070-8ce4-4311-950a-1765361b4819.53fa6e36-4a73-42f7-adb8-fa6f066ec371.prompt=Close session?\:
1dda9070-8ce4-4311-950a-1765361b4819.54d9e163-03db-4905-9cb7-3a460aaf9404.description=<pre>Checks if a number or word is equal to another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 \=\= value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
1dda9070-8ce4-4311-950a-1765361b4819.5e698d5e-f50a-4a09-8faa-5e962a90dd3b.description=<pre>Retrieve information about a virtual machine or a group of virtual machines in a datacenter or host system (pipe-delimited). Retrieve each object one at a time from an initial search query ala SQL Query operation.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvmDatacenter - Virtual machine's datacenter.\nvmIdentifierType - Virtual machine identifier type.\nhostSystem - Target virtual machine host system.\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123).\ngetDetailed - Retrieve detailed information?\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nvmInfo - Virtual machine information.\nnumberOfResults - Number of results from the query remaining to be retrieved.\nreturnResult - Virtual machine ID or operation results.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
1dda9070-8ce4-4311-950a-1765361b4819.7315a1e2-81b4-4e64-93e5-8f3be204d1d5.prompt=VMWare Host\:
1dda9070-8ce4-4311-950a-1765361b4819.7be71ea4-0bf7-4328-97d3-b5f6485b7625.prompt=VMWare User\:
1dda9070-8ce4-4311-950a-1765361b4819.b05e2f1b-b7b4-4998-bedb-7f508dddbc43.prompt=VMWare User\:
1dda9070-8ce4-4311-950a-1765361b4819.b29c9450-4e97-47cd-a4a8-21f110a5c6b6.prompt=Password\:
1dda9070-8ce4-4311-950a-1765361b4819.bf5b2c1d-1e34-4d7c-a8e9-8b9d40052212.prompt=Close session?\:
1dda9070-8ce4-4311-950a-1765361b4819.c1f6f962-662e-48ef-a309-63fabd56eda3.prompt=VMWare Host\:
1dda9070-8ce4-4311-950a-1765361b4819.df288498-4db8-4c9b-90ea-6d01b28d43b5.description=<pre>Search for VMWare objects of type propsType and their properties (propsPathset) from a root object (if any) specified by propsRootObjType and propsRootObj. Retrieves each object's properties one at a time from an initial search query as the one used for the SQL Query operation. Please see VMWare Integration Guide for more details.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n    no more - There are no more results to retrieve.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.02ba8d30-ed2e-4dc7-a882-cb42ebd22072.prompt=Enter a value for trustAllRoots
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.04768aa1-79e8-4c84-a855-44a81ec690c8.description=<pre>Checks if a number or word is less than another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 < value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.04a273fd-0a4c-44c4-9043-fd1c0dddad2d.prompt=Enter a value for encodeURL
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.04cbd267-6bec-4ca0-b973-aaccc9ad8ed4.prompt=Enter a value for timeout
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.04f40e3f-eacf-465d-91ce-1556357dbfa2.prompt=Enter a value for followRedirects
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.0868ea18-6446-4a8e-89c6-ef0cf224403a.prompt=Enter a value for useCookies
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.0b32805b-0da8-450f-a2cf-2fd6a12dced4.description=<pre>\nGet the name and available disk space for a datastore .\n\nInputs\:\nproviderId \t\t- Resource Provider Id \nuserIdentifier\t- User Identifier  \n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nMap of datastore names and its free diskspace (KB)\n\n</pre>
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.11eaa761-adf9-4a25-a5d6-ae1cdaf63f66.prompt=User Identifier
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.11eaf6fb-a4aa-4d53-826b-d661d23bfd7e.prompt=Artifact ID
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.14a13898-2001-41a5-8246-dcb1560fe44e.prompt=Artifact ID
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.15e3c4af-eaa2-4c8c-8b1c-b45586e2bef5.prompt=Enter a value for timeout
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.1b272d62-0185-40b3-8c78-2676e9fc14ea.prompt=Enter a value for proxyPort
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.2bb20c3c-2e57-4f14-85cb-00de3a591490.prompt=Enter a value for proxyUsername
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.3272363f-a989-46f2-a4a4-e38814b47a84.description=<pre>Checks to see if a string matches a specific rule.\n\nIf the matchType is RegEx, input matchTo is the regular expression like \: ^-?\\d+(([\\.,]\\d+)?)+$. Input toMatch is the actual string to check to see if it matches the matchTo expression.\n\nInputs\:\nmatchType - The type of match to perform.\ntoMatch - The string to check if matches another string.\nmatchTo - The string to match against. \nignoreCase - Boolean value for whether or not to ignore case during match.\n\nResponses\:\nsuccess - The String matched.\nfailure - The string did not match, or something went wrong.</pre>
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.3478d420-731e-4080-b230-f3ae391e8762.prompt=Enter a value for object
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.3a55b39c-999a-4ce0-9ef0-c2fd2c24619a.prompt=Enter a value for trustAllRoots
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.41060313-b109-43ad-9527-8f75efc7c6ba.prompt=Enter a value for trustPassword
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.43a5433f-89f2-45ce-91cc-8aa5ec536269.description=<pre>\nThis workflow returns the details of the given artifact id.\n\nInputs-\nartifactId \u2013   Artifact  Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nsocketTimeout - The number of milliseconds to wait for the data to be retrieved. This input should be assigned a value greater than or equal to zero. A socketTimeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nfollowRedirects - If true, the GET command automatically follows redirects. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\nname \u2013  name of the artifactr \ndisplayName \u2013 display name of the artifact\nartifactType \u2013 Artifact type\nstate \u2013 state of the artifact\nlifeCycleState \u2013  life cycle state of the artifact\nlifeCycleSubState \u2013 life cycle sub state of the artifact\ndocument  \u2013 returned XML document from API\n</pre>
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.47d36cce-f85e-4286-8591-a2e513e4845b.prompt=Enter a value for proxy
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.491639d1-4c90-43ff-beeb-7770c55be5a3.prompt=Enter a value for trustKeystore
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.4b9ddb53-1342-421f-aca3-71ea58cbf6e0.description=<pre>\nThis workflow returns the details of the given artifact id.\n\nInputs-\nartifactId \u2013   Artifact  Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nsocketTimeout - The number of milliseconds to wait for the data to be retrieved. This input should be assigned a value greater than or equal to zero. A socketTimeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nfollowRedirects - If true, the GET command automatically follows redirects. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\nname \u2013  name of the artifactr \ndisplayName \u2013 display name of the artifact\nartifactType \u2013 Artifact type\nstate \u2013 state of the artifact\nlifeCycleState \u2013  life cycle state of the artifact\nlifeCycleSubState \u2013 life cycle sub state of the artifact\ndocument  \u2013 returned XML document from API\n</pre>
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.4db2a2be-44c8-4e98-a527-ff1ca43b9e43.prompt=Enter a value for proxyPassword
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.520e1b82-f26a-484f-aeaa-fd26f176b88f.prompt=Enter a value for keystore
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.5aafbc66-7ab2-495a-9366-b176bab4a581.prompt=Enter a value for proxyPassword
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.615b0dcd-7a84-4acd-91d2-d48b843b08e3.prompt=Enter a value for kerberosConfFile
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.69684a73-dbf9-4730-9eb4-5a69ed224568.prompt=Enter a value for proxyPort
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.69c466f0-7875-499b-b89d-d934cc0f38c9.prompt=Enter a value for keystore
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.6b0a2808-4a16-4881-b254-c4e37484da37.prompt=Enter a value for value1
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.6f0a3382-0323-4da0-a80b-2d1e89f8d577.prompt=Enter a value for value1
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.7030a5be-bc58-45cb-b3b0-f42e96f0c6fc.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.712129c3-6f55-46aa-9591-22a4b8238e3d.prompt=Enter a value for proxyUsername
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.7cac1f14-8534-4504-bd76-16a9c291583e.prompt=Enter a value for value2
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.7f4387c0-d279-4c40-ab3c-a8db50dcc932.prompt=Enter a value for followRedirects
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.81a64144-b581-4dde-8a9d-18700957342c.prompt=Enter a value for useCookies
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.8f23f0ce-a084-4f84-ae88-93abbfc91fa0.prompt=Enter a value for trustKeystore
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.970e7414-db6e-4e81-a2b5-62d86b5b4e04.prompt=User Identifier
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.990e8b7c-3e9b-463c-9699-486ee47217d8.prompt=Enter a value for socketTimeout
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.9ca16e88-7be3-4a2e-b2af-a7e327d4b0bb.prompt=Enter a value for keystorePassword
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.af0c73f9-ad74-4d86-9ca2-1434c68f7599.description=<pre>Checks if a number or word is greater than another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 > value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.b4ac82d6-51a6-45e8-8022-c4b9479f22d4.prompt=Enter a value for keystorePassword
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.b8cc54af-b3cd-4a6c-8c0e-cd93942736c4.prompt=Enter a value for socketTimeout
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.cfc6f2b0-8cc1-4315-93c7-9a2806e2bc91.description=<pre>\nAccepts an object in the JavaScript Object Notation format (JSON) and\nreturns a value for the specified key.\n\nThe JSON format encodes objects as a set of unordered key/value pairs, which is\nsimilar to a structure or map in other programming languages.  For example,\n   { "city" \: "Palo Alto", \n     "state" \: "CA" }\nis an object with two elements one with the name "city" having the value "Palo\nAlto", and the other being the name "state" with the value "CA". This operation would \nreturn "Palo Alto" if user enters "city" as a key.\n\nIf the input object contains JSON array, array index can be used in the key input. For example, \n{ "location"\: [\n      {"city"\: "Roseville", "country"\: "United States"},\n      {"city"\: "Cluj", "country"\: "Romania"},\n      {"city"\: "Yehud", "country"\: "Israel"}]    \n}\nThe operation would return "Roseville" if user enters "location[0].city" as a key.\n\nJavaScript objects are useful for representing structured data, and are\nespecially when used within an array.  For example, an operation that retrieves\na set of incidents from an external system may return the entire list in one\narray of incident objects.  The description of the enclosing folder,\n/Library/Utility Operations/Container/JavaScript Objects has more examples, and\nthe JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   object\n      The JavaScript object.  \n      The operation will return a failure if it is not a JavaScript object.\n\n   key\n      The key in the object to get the value of.\n\nResponses\n\n   success\n      The value was successfully returned for the specified key. \n\n   failure\n      There was some error in processing the object, most likely because the\n      object is not in valid JavaScript Object Notation or the specified key does not exist in the object.  \n      You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with\n      JavaScript Object Notation.\n\nOutputs\n\n   The primary output will be the value for the specified key in the object.\n\nNote\n\n    If the value in JSON object is in scientific notation, the returned output will be converted to an equivalent decimal number. Ex, 2.9e+1 will be converted to 29.\n</pre>
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.d14da1f2-1bf8-4132-8390-2afd3bfc703d.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.d419f52c-dc18-4db2-b116-d077b4f5227e.prompt=Enter a value for userAgent
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.e1069080-254a-4005-970d-10a200ff6fe1.prompt=Enter a value for userAgent
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.eac8e530-936a-458b-87de-ac800ac825a9.description=<pre>Clears the value of a flow variable\n\nInput Parameters\:\nkeyName - the name of the flow variable to clear\n\nResponses\:\nsuccess - cleared the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, null];</pre>
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.ee89d6db-56e6-4109-be95-55a8698aa7c3.prompt=Enter a value for authType
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.f21e667d-452e-4564-88d0-98884ccd1816.prompt=Enter a value for encodeURL
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.f64bdb4d-fee9-4d2a-8a52-375deee36efc.prompt=Enter a value for trustPassword
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.fb7e3978-a7ab-4530-a2f7-4cec9188e052.prompt=Enter a value for kerberosConfFile
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.fe8ddee0-1375-48c8-bd41-771efc92b428.prompt=Enter a value for proxy
1e136ce7-f5e0-431f-92e5-0e9d6c4e881c.ff440386-b1c9-42c2-b65f-e654fae99b12.prompt=Enter a value for authType
1f780cde-baae-4cbe-85c2-870b939eea2a.590bb344-ee55-4ef9-8d01-e8bdb1e1dbf7.prompt=abd3d491-f37f-44fc-877a-f929092b0b8a.79586040-a8d8-43ee-b555-2b7f9322ee59.prompt
1f780cde-baae-4cbe-85c2-870b939eea2a.92a0ad6d-7c05-4725-b99e-ada6482c7ee0.prompt=abd3d491-f37f-44fc-877a-f929092b0b8a.281c1d1a-090d-4058-a5d1-f439b369dc05.prompt
1f780cde-baae-4cbe-85c2-870b939eea2a.ceab76fe-7651-492d-adac-4b98b23fb052.description=abd3d491-f37f-44fc-877a-f929092b0b8a.512c5a1b-504b-483d-9f66-40c563af61de.description
2134d130-85f9-4e1a-a0df-646eb67cca98.3fb24347-7146-4ebf-9131-e978c338d99f.description=Power off and terminate a VM.\n\nInput Parameters\:\n hostname - hostname of the VM to terminate\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VM\n hostSystem - current ESX host for the VM\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise
2134d130-85f9-4e1a-a0df-646eb67cca98.description=<pre>\nPower off and terminate a VM.\n\nInput Parameters\:\n VMID - the unique Identifier of the VM on a vCenter.\n hostname - hostname of the VM to terminate\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VM\n hostSystem - current ESX host for the VM\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n</pre>
21786382-811c-455f-b8f1-543f179859b8.1152ec66-9077-407e-944c-c56e486c0e13.description=21786382-811c-455f-b8f1-543f179859b8.1152ec66-9077-407e-944c-c56e486c0e13.description
21786382-811c-455f-b8f1-543f179859b8.13215d59-3394-46f6-8e0e-bcc34d46cc4d.description=21786382-811c-455f-b8f1-543f179859b8.13215d59-3394-46f6-8e0e-bcc34d46cc4d.description
21786382-811c-455f-b8f1-543f179859b8.4023ea6c-2999-4c27-b6ac-8b4def429a61.description=<pre> This flow will list all the templates in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of templates.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
21786382-811c-455f-b8f1-543f179859b8.54432177-a7ba-4ced-a870-27fd509bdd08.description=21786382-811c-455f-b8f1-543f179859b8.54432177-a7ba-4ced-a870-27fd509bdd08.description
21786382-811c-455f-b8f1-543f179859b8.67b70e72-c374-4deb-8211-37785f4dde7a.description=21786382-811c-455f-b8f1-543f179859b8.67b70e72-c374-4deb-8211-37785f4dde7a.description
21786382-811c-455f-b8f1-543f179859b8.6e290fe6-cc48-41ed-9c06-fd8d2089b99e.description=21786382-811c-455f-b8f1-543f179859b8.6e290fe6-cc48-41ed-9c06-fd8d2089b99e.description
21786382-811c-455f-b8f1-543f179859b8.c0ed04eb-187a-4b28-8082-59d7650a3990.description=21786382-811c-455f-b8f1-543f179859b8.c0ed04eb-187a-4b28-8082-59d7650a3990.description
21786382-811c-455f-b8f1-543f179859b8.description=<pre> This flow will list all the templates in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of templates.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
21786382-811c-455f-b8f1-543f179859b8.ef83562f-5b44-479c-a061-2ad799e42912.description=21786382-811c-455f-b8f1-543f179859b8.ef83562f-5b44-479c-a061-2ad799e42912.description
242c2f70-646c-42d3-a1b4-c0cce954ac5e.41c8925d-f501-40d7-b6d2-f0b24dde700d.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
242c2f70-646c-42d3-a1b4-c0cce954ac5e.description=<pre>\nStart the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
242c2f70-646c-42d3-a1b4-c0cce954ac5e.e8d92bff-d623-4b6a-9a38-2c31daecfc9e.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
25922747-9e7e-4910-b480-d09ca0416934.20d16b2b-7a6e-4003-82f6-2832a7e8c814.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
25922747-9e7e-4910-b480-d09ca0416934.3060b21a-b53e-4fbe-9562-0afd15cb9fb2.description=Changes a VM's power state. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n vmPowerState - the desired power state (on / off etc)\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n serviceXml - xml representation of the server created in vCenter
25922747-9e7e-4910-b480-d09ca0416934.ac9dab32-10e7-4297-b1a7-7c9617a091b2.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
25922747-9e7e-4910-b480-d09ca0416934.d79a441f-31c7-4991-8de7-142370196953.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
25922747-9e7e-4910-b480-d09ca0416934.description=<pre>\nStop the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
26f6e602-82de-4fef-a1d1-105b31137b35.a6004ff8-fe2b-46e5-b484-f765ebaebbb1.prompt=abd3d491-f37f-44fc-877a-f929092b0b8a.79586040-a8d8-43ee-b555-2b7f9322ee59.prompt
26f6e602-82de-4fef-a1d1-105b31137b35.abea9380-a089-4090-beeb-1c64840ba1f0.prompt=abd3d491-f37f-44fc-877a-f929092b0b8a.281c1d1a-090d-4058-a5d1-f439b369dc05.prompt
26f6e602-82de-4fef-a1d1-105b31137b35.b3153ab4-1050-48e4-84c3-93fb4b0caaa7.description=abd3d491-f37f-44fc-877a-f929092b0b8a.512c5a1b-504b-483d-9f66-40c563af61de.description
284c7def-b642-427e-ae69-c342ceaed7ae.123c2283-126d-4d33-b665-eca81c321bd9.prompt=User Identifier
284c7def-b642-427e-ae69-c342ceaed7ae.1a5825ea-021a-4aec-9e7b-e00b82bcb7e2.description=<pre>\nThis workflow adds/updates the service component property using Artifact API.\n\nInputs-\ncomponentId \u2013 Service Component  id\nuserIdentifier  - User Identifier id\ndisplayName - Property Display Name to  add or update\npropertyName \u2013 Property Name to add or update\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\nvalueType - Value type of the property. It can have value from selection list "HP CSA \u2013 Property ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values delimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator - A delimiter that separates elements in the values ( default delimiter used is comma ,)\nconsumerVisible - Do you want to make property visible on consumer portal? (true/false), Default set to true\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
284c7def-b642-427e-ae69-c342ceaed7ae.1e98f967-276a-4d21-87b2-3dc50ec3034c.description=<pre>Get information about all virtual connected hard disks on a Virtual Machine (VM).\n\nInputs\:\n    host - VMWare host hostname or IP\n    user - VMWare username\n    password - VMWare user's password\n    port - Port to connect on\n    protocol - Connection protocol (http or https)\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\n    virtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123). If nothing is specified, all VMs are retrieved.\n    vmIdentifierType - Virtual machine identifier type\n    vmDatacenter - Virtual machine's datacenter\n\nResponses\:\nsuccess - The flow completed successfully.\nfailure - Something went wrong.\n</pre>
284c7def-b642-427e-ae69-c342ceaed7ae.262a3aa4-c9d6-47ee-9522-2a4bcc136e43.prompt=Component ID
284c7def-b642-427e-ae69-c342ceaed7ae.2b8c4fd2-59eb-45ec-9882-a331c5ddbbb7.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
284c7def-b642-427e-ae69-c342ceaed7ae.31f8a5e3-fe25-4276-9829-2b60e1d3cff3.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
284c7def-b642-427e-ae69-c342ceaed7ae.439fb5ca-75cc-42fd-b400-f9fd91f2f913.description=<pre>\nThis operation adds a flow variable to the local context. The variable is available in the current flow and its child flows.\n\nInputs\:\n    keyName - The name of the flow variable to add.\n    myValue - The value to assign to the flow variable.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of "myValue" input field.\n\nResponses\:\n    success - The operation completed as stated in the description.\n\nNote\:\n   If a flow variable with the same name already exists, its value will be overwritten.\n</pre>
284c7def-b642-427e-ae69-c342ceaed7ae.452fce5a-a521-4f91-ba2f-e0a06de4e00d.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
284c7def-b642-427e-ae69-c342ceaed7ae.5152e4b1-1307-41b1-855a-a5dab63694bf.description=<pre>\nThis operation adds a flow variable to the local context. The variable is available in the current flow and its child flows.\n\nInputs\:\n    keyName - The name of the flow variable to add.\n    myValue - The value to assign to the flow variable.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of "myValue" input field.\n\nResponses\:\n    success - The operation completed as stated in the description.\n\nNote\:\n   If a flow variable with the same name already exists, its value will be overwritten.\n</pre>
284c7def-b642-427e-ae69-c342ceaed7ae.8bfce12c-878e-4de0-913e-e262a625e588.description=<pre>Get information about all virtual connected hard disks on a Virtual Machine (VM).\n\nInputs\:\n    host - VMWare host hostname or IP\n    user - VMWare username\n    password - VMWare user's password\n    port - Port to connect on\n    protocol - Connection protocol (http or https)\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\n    virtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123). If nothing is specified, all VMs are retrieved.\n    vmIdentifierType - Virtual machine identifier type\n    vmDatacenter - Virtual machine's datacenter\n\nResponses\:\nsuccess - The flow completed successfully.\nfailure - Something went wrong.\n</pre>
284c7def-b642-427e-ae69-c342ceaed7ae.974210cf-e59e-4558-8dca-107e203c9c22.prompt=Property Name
284c7def-b642-427e-ae69-c342ceaed7ae.af120d31-2c79-4312-ba0c-08a6d533dfd4.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
284c7def-b642-427e-ae69-c342ceaed7ae.c1def899-42b8-4dec-9910-9516bca7f187.description=<pre>Get information about all virtual connected hard disks on a Virtual Machine (VM).\n\nInputs\:\n    host - VMWare host hostname or IP\n    user - VMWare username\n    password - VMWare user's password\n    port - Port to connect on\n    protocol - Connection protocol (http or https)\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\n    virtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123). If nothing is specified, all VMs are retrieved.\n    vmIdentifierType - Virtual machine identifier type\n    vmDatacenter - Virtual machine's datacenter\n\nResponses\:\nsuccess - The flow completed successfully.\nfailure - Something went wrong.\n</pre>
284c7def-b642-427e-ae69-c342ceaed7ae.d5fc533c-2003-4906-962c-399c343d1c2a.description=<pre>Get information about all virtual connected hard disks on a Virtual Machine (VM).\n\nInputs\:\n    host - VMWare host hostname or IP\n    user - VMWare username\n    password - VMWare user's password\n    port - Port to connect on\n    protocol - Connection protocol (http or https)\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\n    virtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123). If nothing is specified, all VMs are retrieved.\n    vmIdentifierType - Virtual machine identifier type\n    vmDatacenter - Virtual machine's datacenter\n\nResponses\:\nsuccess - The flow completed successfully.\nfailure - Something went wrong.\n</pre>
284c7def-b642-427e-ae69-c342ceaed7ae.e292a846-45bf-41b7-aa64-bd4dffcfabe0.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
284c7def-b642-427e-ae69-c342ceaed7ae.f86f58f3-6a05-49dd-b868-2d7eac64c5f1.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
284c7def-b642-427e-ae69-c342ceaed7ae.fb4e4341-c2d2-4184-bea9-85d1c492b6a4.prompt=Password\:
284c7def-b642-427e-ae69-c342ceaed7ae.fe9359fb-0dca-4809-a556-670553416267.prompt=VMWare Host\:
29290817-6bf9-4e3f-9e03-9843364aaf9a.1382d000-9fa3-4316-91ce-0826f0c3f6ed.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
29290817-6bf9-4e3f-9e03-9843364aaf9a.23db505e-7c7e-4240-9cc1-bcf18b33f85b.description=<pre>\nThis workflow will generate hostname based on subscription name and uuid. 20 charactes from subscription and 15 characters from uuid are appended to create unique id. For Windows  15 characters from uuid are parsed to create the hostname\n\nInputs\:\n\nsubscriptionId\t- Subscription ID\nuuid\t\t- UUID of server component Id\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\n\n\nReturns\nObjectId \t- Returns hostname\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
29290817-6bf9-4e3f-9e03-9843364aaf9a.249ccdd3-52b9-40da-97bf-1e1ddc566c3b.prompt=Password\:
29290817-6bf9-4e3f-9e03-9843364aaf9a.46bd8532-e939-4c79-aefe-af930cf9e728.prompt=Target datacenter\:
29290817-6bf9-4e3f-9e03-9843364aaf9a.46d713bb-a5c0-4dd0-9721-dfeac7403cac.prompt=VMWare Host\:
29290817-6bf9-4e3f-9e03-9843364aaf9a.615e79b2-7e3c-4897-8191-008c5a116aac.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
29290817-6bf9-4e3f-9e03-9843364aaf9a.68c5ed1b-4d68-4402-a462-df46b8e1a57a.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
29290817-6bf9-4e3f-9e03-9843364aaf9a.7d1be19f-c6c7-4b98-8480-82c8f85b444c.description=<pre>Checks to see if a string matches a specific rule.\n\nInputs\:\nmatchType - The type of match to perform.\ntoMatch - The string to check if matches another string.\nmatchTo - The string to match against.\nignoreCase - Boolean value for whether or not to ignore case during match.\n\nResponses\:\nsuccess - The String matched.\nfailure - The string did not match, or something went wrong.</pre>
29290817-6bf9-4e3f-9e03-9843364aaf9a.9920534e-3861-4059-99db-d91a52ed481a.description=<pre>Checks to see if a string matches a specific rule.\n\nInputs\:\nmatchType - The type of match to perform.\ntoMatch - The string to check if matches another string.\nmatchTo - The string to match against.\nignoreCase - Boolean value for whether or not to ignore case during match.\n\nResponses\:\nsuccess - The String matched.\nfailure - The string did not match, or something went wrong.</pre>
29290817-6bf9-4e3f-9e03-9843364aaf9a.9dea2a53-8c57-4812-83a0-86d48e24959d.description=\nInputs\:\n\nhost -  vCenter DNS name/IP Address\nusername - vCenter user\npassword - vCenter user password\nport - vCenter port\nprotocol - vCenter protocol\nhypervisorName - Hypervisor DNS name/IP Address\ndataStore - Datastore of the hypervior\ndatacenterName - Datacenter name\nhostname - VM Server name\ntemplateReference -  VM Template name\nosType -  OS Type of the template\nCPUs - CPU Count to be assigned\nMemory -  Memory Size to be assigned\n\n\nResults\:\n\nvmId - VM Identifies of the created VM\nipAddress - IP Address of the created VM\nmacAddress - MAC Address of the created VM\n\n\n\n\n
29290817-6bf9-4e3f-9e03-9843364aaf9a.d5887a14-ba11-4a4c-8c92-b7be9b1aa491.prompt=VMWare User\:
29290817-6bf9-4e3f-9e03-9843364aaf9a.description=<pre>\nProvision a  Simple Vcenter Linux VM from a VM template. \n\nInputs Parameters\:\n\n    vcenterHost -  vCenter host to execute against\n    vcenterUser - vCenter username\n    vcenterPassword - vCenter password\n    memory - Amount of Memory in MB to be set on VMs. Memory should be a multiple of 4.\n    number_of_cpu - Number of cpus to be set on the VMs\n    virtualMachine - VM template Name\n    datacenterName - target Datacenter on the vCenter host for the VMs\n    vmNamePrefix - Prefix to vm name to be created\n    vmFolder - folder name in the datacenter\n    vCenterCustomizationTemplateName - customSpec name existing in datacenter\n    skip - assign value to skip undeploy flow execution.\n         Valid values\: "deploy","undeploy","all" or empty.\n    vmName - name of the vm to be created.\n    vmResourcePool - resourcepool name where new vm to be created.\n    thinProvision - the allocation of memory to the VM will be thin provisoned.\n    remoteConsolePassword - password of the VM created from the template\n    vCenterRemoteConsolePort - port to connect to newly created VM.\n    errorMessage - error message to be shown when some failure occurs.\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
2a06ad48-b3c2-4dd1-bfbb-2e7ee5f9afce.1de1cec4-06d0-4c03-8c8a-cb38bfa47c38.prompt=Password\:
2a06ad48-b3c2-4dd1-bfbb-2e7ee5f9afce.2d8e5643-0004-4eb7-9df9-758c14c82f76.description=<pre>Checks if a number or word is equal to another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 \=\= value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
2a06ad48-b3c2-4dd1-bfbb-2e7ee5f9afce.31fe8718-39c7-4a8e-8d89-dc92e2077eac.description=<pre>\nConfigure VM network interface.\n\nInput Parameters\:\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n customizationTemplateName - Guest customization template name\n artifactId - Service component ID\n userIdentifier - CSA user identifier ID\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nOutput\:\n customizationSpecXml - Guest customization specification xml with fixed IP\n</pre>
2a06ad48-b3c2-4dd1-bfbb-2e7ee5f9afce.3c162ada-27c6-41de-a441-ea5d092d4084.prompt=Name of guest customization template\:
2a06ad48-b3c2-4dd1-bfbb-2e7ee5f9afce.3d1194fc-0a97-4387-8732-ffdbc5af4635.prompt=User Identifier
2a06ad48-b3c2-4dd1-bfbb-2e7ee5f9afce.4eddf59d-1745-4fb7-88b3-9f3a66719af4.description=<pre> Export a guest customization spec to customization spec XML string.\nThe exported customization spec xml string can be modified and imported to the vCenter Customization Specifications Manager using the 'Import Guest Customization Spec' operation.\n\nInputs\:\n    host - VMWare vCenter hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    customizationTemplateName - Name of the customization specification to export. The customization specification should already exist in the vCenter customization specifications manager.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\nReturns\:\n    returnResult - Returns the customization spec Xml string or the failure message.\n\nNotes\:\nThe returnResult of this operation can be used for the 'customizationSpecXml' input in the 'Clone Virtual Machine' operation, 'Clone Virtual Machine to Template' flow and  'Deploy Virtual Machine from Template' flow.\n</pre>
2a06ad48-b3c2-4dd1-bfbb-2e7ee5f9afce.516cdf69-021e-424a-8095-dabbe09b35db.description=<pre>\nProvision a VM from a VM template. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n port - Port Number toconnect on\n protocol - Connection prtocol(http, https)\n datacenterName -  target Datacenter on the vCenter host for the VMs\n hostname - VM Name\n templateReference - clone template Name\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n CPUs - Number of cpus to be set on the VMs\n Memory - Amount of Memory in MB to be set on VMs. Memory should be a multiple of 4.\n availableCPU - Available CPU in  vCenter\n availableMemory - Available Memory in MB in vCenter\n disksize - Size of the disk space needed on the VM in GB\n toEmail - Email Address of the recepient to receive a Email Notification \n fromEmail - Email Address of the Sender\n smtpHost - SMTP Hostname/IP Address\n smtpPort - SMTP Port\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n\nReturns\n vmId - VM Identifies of the created VM\n ipAddress - IP Address of the created VM\n macAddress - MAC Address of the created VM\n</pre>
2a06ad48-b3c2-4dd1-bfbb-2e7ee5f9afce.5f4a6ff7-800b-4299-b0c0-cad545acfba4.prompt=Artifact ID
2a06ad48-b3c2-4dd1-bfbb-2e7ee5f9afce.7dbbe39a-c0ac-4e78-82b3-27d7ce373e51.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
2a06ad48-b3c2-4dd1-bfbb-2e7ee5f9afce.85da9ca8-3504-4752-92fe-a9513e88f7e3.prompt=VMWare Host\:
2a06ad48-b3c2-4dd1-bfbb-2e7ee5f9afce.8f7b42c4-05b1-4179-b15c-2a47e8ef0d18.description=<pre>\nThis workflow returns the list of Artifact\u2019s Properties and values.\n\nInputs-\nartifactId  \u2013  Artifact id\nuserIdentifier  - User Identifier id\npropertyNames \u2013 List of property names separated by pipe |\nIf user provides this inputs, flow will return the values for given property names only. Otherwise flow will return all properties and values for the given artifact.\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nsocketTimeout - The number of milliseconds to wait for the data to be retrieved. This input should be assigned a value greater than or equal to zero. A socketTimeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nfollowRedirects - If true, the GET command automatically follows redirects. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\npropertyNameValuesList \u2013 List of property Names and values\nE.g. property 1;value1,value2|property 2;value3|property 3;value3,value4|........\n</pre>
2a06ad48-b3c2-4dd1-bfbb-2e7ee5f9afce.8faddaf2-fa1c-4773-a27d-5d31ed8e9e40.prompt=User Identifier
2a06ad48-b3c2-4dd1-bfbb-2e7ee5f9afce.a1c86ebb-cfa2-4659-a2f9-5a4069a012bf.prompt=Artifact ID
2a06ad48-b3c2-4dd1-bfbb-2e7ee5f9afce.dd1ecef0-5445-47df-93c7-9b2d8d52f2fa.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
2a06ad48-b3c2-4dd1-bfbb-2e7ee5f9afce.description=<pre>\nConfigure VM network interface.\n\nInput Parameters\:\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n customizationTemplateName - Guest customization template name\n artifactId - Service component ID\n userIdentifier - CSA user identifier ID\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nOutput\:\n customizationSpecXml - Guest customization specification xml with fixed IP\n</pre>
2a06ad48-b3c2-4dd1-bfbb-2e7ee5f9afce.ec4f2bfe-5e43-4c29-838a-4759ca09a461.description=<pre>\nThis workflow returns the list of Artifact\u2019s Properties and values.\n\nInputs-\nartifactId  \u2013  Artifact id\nuserIdentifier  - User Identifier id\npropertyNames \u2013 List of property names separated by pipe |\nIf user provides this inputs, flow will return the values for given property names only. Otherwise flow will return all properties and values for the given artifact.\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nsocketTimeout - The number of milliseconds to wait for the data to be retrieved. This input should be assigned a value greater than or equal to zero. A socketTimeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nfollowRedirects - If true, the GET command automatically follows redirects. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\npropertyNameValuesList \u2013 List of property Names and values\nE.g. property 1;value1,value2|property 2;value3|property 3;value3,value4|........\n</pre>
2aead925-9cfe-4104-957b-f18aae369961.00d3839f-7946-4c48-a6df-5a72232e30e5.description=<pre>\nThis operation adds a flow variable to the local context. The variable is available in the current flow and its child flows.\n\nInputs\:\n    keyName - The name of the flow variable to add.\n    myValue - The value to assign to the flow variable.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of "myValue" input field.\n\nResponses\:\n    success - The operation completed as stated in the description.\n\nNote\:\n   If a flow variable with the same name already exists, its value will be overwritten.\n</pre>
2aead925-9cfe-4104-957b-f18aae369961.37f91b2a-dd4f-4606-ab48-1aa45071b473.description=<pre>\nInsert an object into a JSON array, optionally specifying the position at which to insert the new object. \n\nThis Operation differes from the 'Add to Array' operation in that this one will try and validate the new element as\na JSON object, whereas 'Add to Array' will just wrap the element in quotes and treat it as a string. This means \nthat the element passed into this operation must be a valid JSON object, or the operation will fail. \n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n    element - The element to insert into the array. As noted above, this must be a valid JSON object or the operation will fail. It can be \n                    any valid JSON object; such as a number, string, an array, or a name/value pair list. Numbers can be entered as-is, strings\n                    must be wrapped in quotes, and objects must be formated correctly (see examples below for more info)\nValid values\: Any valid JSON object\nExamples\: 1 or "a string" or {"one"\:"two", "three"\:"four"} or [1,2,3]\n\n    index -The index in the array at which to insert the new element. If index is undefined, or index is equal to the length of the array \n               (one past the last element), the new element is placed at the end of the array. See the notes above for more information\n               on using negative numbers to specify array elements.\n               If the index is valid, the new element is inserted at that position, and all remaining elements are shifted one position to the right.\n\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\nDefault value\: undefined (insert the new element at the end of the array)\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array with the inserted element.\n\n</pre>
2aead925-9cfe-4104-957b-f18aae369961.4fb1acde-4991-43af-8cd1-a595906e3717.description=<pre>Inserts a new name/value property into a JSON object, where the value is a valid JSON string. If the <newPropertyValue> input is not a valid string representation of a JSON object, the operation fails.\n\nThe 'Add Property to Object' operation can be used to add a property with a simple string value. \n\nExamples\: \n1)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: [1,2,3]\n     Result\:\n         { "test"\:[1,2,3]}\n2)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: {"a"\:"b"}\n     Result\:\n         { "test"\:{"a"\:"b"}}\n3)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: 1\n     Result\:\n         { "test"\:1}\n\nInputs\:\n    jsonObject - String representation of a JSON object. Objects in JSON are a collection of name value pairs, separated by a colon and surrounded with curly brackets {}. The name must be a string value, and the value can be a single string or any valid JSON object or array.\nExamples\: {"one"\:1, "two"\:2}, {"one"\:{"a"\:"a","B"\:"B"}, "two"\:"two", "three"\:[1,2,3.4]}\n    newPropertyName - The name of the new property to add to the JSON object. \nExamples\: property1, some_property, another property\n    newPropertyValue - The value for the new property. This must be a valid JSON representation of a JavaScript object.\nExamples\: 1, {"A"\:"A"}, [1,2,3,4]\n\nResults\:\n    Result - The JSON array with the inserted element.\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation completed unsuccessfully. See the message in <returnResult> for details.\n</pre>
2aead925-9cfe-4104-957b-f18aae369961.909aa319-4c70-4f7b-b1ca-e4302f088cf5.description=<pre>Get all device numbers for a specified device type on a Virtual Machine (VM).\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmDatacenter - Virtual machine's datacenter\ndeviceType - Type of device. Valid values are\: hardDisk, floppyDisk, Cdrom, SCSIController, ethernetCard.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nreturnResult - Task result or operation result\ndeviceId - Number of device of the specified deviceType.\n</pre>
2aead925-9cfe-4104-957b-f18aae369961.description=<pre>Get information about all virtual connected hard disks on a Virtual Machine (VM).\n\nInputs\:\n    host - VMWare host hostname or IP\n    user - VMWare username\n    password - VMWare user's password\n    port - Port to connect on\n    protocol - Connection protocol (http or https)\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\n    virtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123). If nothing is specified, all VMs are retrieved.\n    vmIdentifierType - Virtual machine identifier type\n    vmDatacenter - Virtual machine's datacenter\n\nResponses\:\nsuccess - The flow completed successfully.\nfailure - Something went wrong.\n</pre>
2aead925-9cfe-4104-957b-f18aae369961.f7e63e8f-14c6-411f-9e55-dfc4893e0bd9.description=<pre>Retrieves details about an existing hard disk on a virtual machine (VM).\n\nInputs\:\n    host - VMware vCenter, ESX or ESXi host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmIdentifierType - Virtual machine identifier type\nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"\n    vmDatacenter - Virtual machine's datacenter.\n    deviceNumber - The Hard disk number to get details of on the VM.\nExamples\: If a VM as a hard disk named "Hard disk 1" the deviceNumber would be "1".\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    returnResult - Task result or operation result.\n    allocatedSize - Size of the hard disk backing files in bytes.  If the disk is thin provisioned, this value will be lower then the provisioned size (vmDiskSize).\n    diskPath - Path to the disk on the datastore.\n    dataStore - Name of the datastore that contains this disk.\n    diskMode - The disk persistence mode.  Possible values\: persistent, independent_persistent, independent_nonpersistent.\n    thinProvision - Hard disk is thinly provisioned.  Possible values\: true, false.\n    uuid - universally unique identifier (uuid) of the disk.\n    vmDiskSize - The size of the hard disk in bytes.  If the hard disk is thinly provisioned, this is the provisioned size.\n    diskSharesLevel - The vm hard disk shares level. \n    diskShares - The number of shares allocated to the hard disk. The "Normal", "High" and "Low" disk shares level map to a pre-determined set of numeric values for shares. The  "Custom" disk shares level does not map to a pre-determined set of numeric values for shares.\n    parentListJS - If this disk has a delta disk backing file, this result contains a JSON array of the parent virtual disk backing files.\nExample\: ["[datastore] path to\\/parent virtual disk backing file.vmdk","[datastore] path to\\/grandparent virtual disk backing file.vmdk"]\n\nNotes\:\n1. Inventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n\n2. The "parentListJS" result can be used to determine the parent of a linked vm that share the same base disk storage. \n\n3. The "parentListJS" result will be populated with vSphere API 4.0 or greater.\n</pre>
2c259276-ed6e-4e4d-a460-80b952db648a.435196f5-1e63-483e-95fc-4eb4093d268d.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
2c259276-ed6e-4e4d-a460-80b952db648a.46e58bbd-2d25-41aa-b5cf-8c8b17d0b633.description=<pre>Retrieve information about a virtual machine or a group of virtual machines in a datacenter or host system (pipe-delimited). Retrieve each object one at a time from an initial search query ala SQL Query operation.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvmDatacenter - Virtual machine's datacenter.\nvmIdentifierType - Virtual machine identifier type.\nhostSystem - Target virtual machine host system.\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123).\ngetDetailed - Retrieve detailed information?\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nvmInfo - Virtual machine information.\nnumberOfResults - Number of results from the query remaining to be retrieved.\nreturnResult - Virtual machine ID or operation results.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
2c259276-ed6e-4e4d-a460-80b952db648a.5cf9634f-82f5-4032-986a-f3e8de50caf0.prompt=Enter password
2c259276-ed6e-4e4d-a460-80b952db648a.72e7ed12-c70b-4551-ac3a-76c3602aaa20.prompt=Password\:
2c259276-ed6e-4e4d-a460-80b952db648a.743b08fa-dba1-484f-91da-9190b1c999fe.prompt=Enter user
2c259276-ed6e-4e4d-a460-80b952db648a.79f1de97-0514-4b30-8b46-80ec0b2fb0fe.prompt=Virtual Machine\:
2c259276-ed6e-4e4d-a460-80b952db648a.95defc90-a98c-44ed-bcb5-4741c0bd0014.description=<pre>Attempts to shutdown the guest virtual machine.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Operation result message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
2c259276-ed6e-4e4d-a460-80b952db648a.9d903116-f224-41e3-baf1-89d16fb8f7dc.description=<pre>Sleeps for the number of seconds specified in the input.\n\nInputs\:\nseconds - The number of seconds to sleep.\n\nResponses\:\nsuccess - Slept for the number of seconds given as input.\nfailure - Was unable to sleep for some reason.\n</pre>
2c259276-ed6e-4e4d-a460-80b952db648a.a1bda60e-fa98-455c-acc2-f6f01e64bccd.prompt=Virtual Machine\:
2c259276-ed6e-4e4d-a460-80b952db648a.ad9945f6-be76-4b2f-b340-eed0ac49f595.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,paused). Does nothing if the virtual machine is already in the power state.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno action - The operation completed with no action performed.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
2c259276-ed6e-4e4d-a460-80b952db648a.af023b7d-7cdd-43aa-8f02-d7418a134c4f.description=<pre>Retrieve power state of virtual machine (poweredOn,poweredOff,suspended).\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task completion return message.\npowerState - Power state (poweredOn,poweredOff,suspended).\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
2c259276-ed6e-4e4d-a460-80b952db648a.ccbfb515-4faf-472c-88f1-e6de905c9e57.description=<pre>Loops as many number of times as specified in the input, that is, counts from 1 to another number incrementing by 1 for each iteration.\n\nInputs\:\ncount - Number of loops to complete.\nreset - If true, then the counter will restart counting from 1.\n\nReturns\:\nThe number that was just counted.\n\nResponses\:\nhas more \t- Counting has not completed, one or more iterations are pending.\nno more \t- Counting completed. This will only be returned once, then counting restarts.\nfailure \t- Something went wrong.\n</pre>
2c259276-ed6e-4e4d-a460-80b952db648a.description=<pre>\nChanges a VM's power state. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n vmPowerState - the desired power state (on / off etc)\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n serviceXml - xml representation of the server created in vCenter\n</pre>
2c259276-ed6e-4e4d-a460-80b952db648a.e40971b3-5d7b-4dd3-8603-8d63b6175fc9.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
2c259276-ed6e-4e4d-a460-80b952db648a.fba0d384-86b5-40cb-8f22-1b3e0689dc76.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
2dca8e65-b179-4bfd-8a80-048bd7bafe43.0334b8ad-9255-46f1-afca-c76d136fbbbd.prompt=Component ID
2dca8e65-b179-4bfd-8a80-048bd7bafe43.2016097b-69df-4c5d-983a-6060753d98b2.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
2dca8e65-b179-4bfd-8a80-048bd7bafe43.56403a73-c805-4c6f-8368-66d2063267fd.prompt=Component ID
2dca8e65-b179-4bfd-8a80-048bd7bafe43.66d5ec67-0b2e-4669-917d-7da8426a68f4.description=<pre>\nThis workflow adds/updates the service component property using Artifact API.\n\nInputs-\ncomponentId \u2013 Service Component  id\nuserIdentifier  - User Identifier id\ndisplayName - Property Display Name to  add or update\npropertyName \u2013 Property Name to add or update\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\nvalueType - Value type of the property. It can have value from selection list "HP CSA \u2013 Property ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values delimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator - A delimiter that separates elements in the values ( default delimiter used is comma ,)\nconsumerVisible - Do you want to make property visible on consumer portal? (true/false), Default set to true\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
2dca8e65-b179-4bfd-8a80-048bd7bafe43.6c0573ec-79a0-4949-ae80-ef28a32b415e.prompt=User Identifier
2dca8e65-b179-4bfd-8a80-048bd7bafe43.6c1ffff9-1bc4-4714-9fc4-90e4fc731fac.description=<pre>\nThis workflow adds/updates the service component property using Artifact API.\n\nInputs-\ncomponentId \u2013 Service Component  id\nuserIdentifier  - User Identifier id\ndisplayName - Property Display Name to  add or update\npropertyName \u2013 Property Name to add or update\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\nvalueType - Value type of the property. It can have value from selection list "HP CSA \u2013 Property ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values delimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator - A delimiter that separates elements in the values ( default delimiter used is comma ,)\nconsumerVisible - Do you want to make property visible on consumer portal? (true/false), Default set to true\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
2dca8e65-b179-4bfd-8a80-048bd7bafe43.75d065c1-2053-48e6-ae48-dacd484e7d11.prompt=User Identifier
2dca8e65-b179-4bfd-8a80-048bd7bafe43.78847777-7ab2-4a01-b5e8-a81a05ee5b3a.prompt=User Identifier
2dca8e65-b179-4bfd-8a80-048bd7bafe43.78ef5993-8acf-425d-af57-a9da751edbb3.description=<pre>\nThis workflow adds/updates the service component property using Artifact API.\n\nInputs-\ncomponentId \u2013 Service Component  id\nuserIdentifier  - User Identifier id\ndisplayName - Property Display Name to  add or update\npropertyName \u2013 Property Name to add or update\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\nvalueType - Value type of the property. It can have value from selection list "HP CSA \u2013 Property ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values delimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator - A delimiter that separates elements in the values ( default delimiter used is comma ,)\nconsumerVisible - Do you want to make property visible on consumer portal? (true/false), Default set to true\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
2dca8e65-b179-4bfd-8a80-048bd7bafe43.d6fba44d-b8f8-4693-875a-e574f075d6be.prompt=Component ID
2e0e50be-8f51-4cd5-9164-55664d83dab6.00e205d5-f64b-4d3c-aa57-62115e8c0b44.prompt=Resource Provider ID
2e0e50be-8f51-4cd5-9164-55664d83dab6.08de48a3-f233-4028-b3f6-7ea1eadbf288.prompt=VMWare User\:
2e0e50be-8f51-4cd5-9164-55664d83dab6.1d441deb-095c-4075-bffe-4c3aa95d64fc.prompt=User Identifier
2e0e50be-8f51-4cd5-9164-55664d83dab6.1d511aa9-9cc1-4278-a45b-f51f4377b288.prompt=VMWare Host\:
2e0e50be-8f51-4cd5-9164-55664d83dab6.36d24544-2fc5-44ab-981c-ae41fdfd107b.description=<pre>Search for VMWare objects of type propsType and their properties (propsPathset) from a root object (if any) specified by propsRootObj and propsRootObj. Retrieve each object's properties one at a time from an initial search query ala SQL Query operation. Please see VMWare Integration Guide for more details.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\npropsType - VMWare properties type (Task, Datacenter, VirtualMachine, etc.) to filter on. Type of object results desired.\npropsPathset - Property filter's pathset, comma-delimited (eg. name, info.name, runtime.host)\npropsRootObjType - VMWare object type (eg. VirtualMachine, HostSystem, ComputeResource,ResourcePool,Alarm)\npropsRootObj - VMWare object ID\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nnumberOfResults - Number of results from the query remaining to be retrieved\nreturnResult - Query result item or operation result</pre>
2e0e50be-8f51-4cd5-9164-55664d83dab6.9cd1c670-eeb8-481d-bc11-9e13ace46910.description=<pre>\nInserts a new name/value property into a JSON object, where the value is a string. This operation forces the value of the name/vale pair to be a string, no matter what data type it actually is. This means that the <newPropertyValue> input does not need to be wrapped in quotes as any quotes entered in this input will be escaped, ending up in the properties' value. \nThe 'Add JSON Property to Object' operation should be used to add values of type other than string, for example\: another object, an array or a number. \n\nExamples\: \n1)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: test_value\n     Result\:\n         { "test"\:"test_value"}\n2)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: "test_value"\n     Result\:\n         { "test"\:"\\"test_value\\""}\n3)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: 1\n     Result\:\n         { "test"\:"1"}\n4)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: [1,2,3,4]\n     Result\:\n         { "test"\:"[1,2,3,4]"}\n     Note the value in the name/value pair above is not a JSON Array, but a plain string that looks like one. \n\nInputs\:\n    jsonObject - String representation of a JSON object. Objects in JSON are a collection of name value pairs, separated by a colon and surrounded with curly brackets {}. The name must be a string value, and the value can be a single string or any valid JSON object or array.\nExamples\: {"one"\:1, "two"\:2}, {"one"\:{"a"\:"a","B"\:"B"}, "two"\:"two", "three"\:[1,2,3.4]}\n    newPropertyName - The name of the new property to add to the JSON object. \nExamples\: property1, some_property, another property\n    newPropertyValue - The value for the new property. This is interpreted as a string, no matter what the contents of the input. \nExamples\: value1, another value\n\nResults\:\n    Result - The JSON array with the inserted element.\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation completed unsuccessfully. See the message in <returnResult> for details.\n</pre>
2e0e50be-8f51-4cd5-9164-55664d83dab6.description=<pre>\nGet the name and available disk space for a datastore .\n\nInputs\:\nproviderId \t\t- Resource Provider Id \nuserIdentifier\t- User Identifier  \n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nMap of datastore names and its free diskspace (KB)\n\n</pre>
2e0e50be-8f51-4cd5-9164-55664d83dab6.f1c658fe-f6db-47aa-99e0-2ed226ab9553.prompt=Password\:
2ebfe6be-05a3-4774-82e3-c166604f0066.14f7be5e-5a66-47a6-8a0a-42009b47456e.description=<pre>This operation is used to retrieve a value from a list. When the index of an element from a list is known, this operation can be used to extract the element.\n\nInputs\:\n    list - A list to get the value from.\n    delimiter - The delimiter that separates values in the list.\nDefault value\: ','\n    index - The index of the value (starting at 0) to retrieve from the list.\nValid values\: an integer, end (for the last element), end-1 (for the second to last element)\n\nResults\:\n    returnResult - This is the primary output. It contains the value found at the specified index in the list, if the value specified for the "index" input field is positive and less than the size of the list. Otherwise, it contains the value specified for "index".\n\nResponses\:\n     success - The operation completed as stated in the description.\n     failure - The operation completed unsuccessfully.\n</pre>
2ebfe6be-05a3-4774-82e3-c166604f0066.1c132beb-713d-4697-8a1a-39383a9be4c6.description=<pre>\nInsert an object into a JSON array, optionally specifying the position at which to insert the new object. \n\nThis Operation differes from the 'Add to Array' operation in that this one will try and validate the new element as\na JSON object, whereas 'Add to Array' will just wrap the element in quotes and treat it as a string. This means \nthat the element passed into this operation must be a valid JSON object, or the operation will fail. \n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n    element - The element to insert into the array. As noted above, this must be a valid JSON object or the operation will fail. It can be \n                    any valid JSON object; such as a number, string, an array, or a name/value pair list. Numbers can be entered as-is, strings\n                    must be wrapped in quotes, and objects must be formated correctly (see examples below for more info)\nValid values\: Any valid JSON object\nExamples\: 1 or "a string" or {"one"\:"two", "three"\:"four"} or [1,2,3]\n\n    index -The index in the array at which to insert the new element. If index is undefined, or index is equal to the length of the array \n               (one past the last element), the new element is placed at the end of the array. See the notes above for more information\n               on using negative numbers to specify array elements.\n               If the index is valid, the new element is inserted at that position, and all remaining elements are shifted one position to the right.\n\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\nDefault value\: undefined (insert the new element at the end of the array)\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array with the inserted element.\n\n</pre>
2ebfe6be-05a3-4774-82e3-c166604f0066.2d86c801-e874-43db-9865-8bce80a30514.prompt=Password\:
2ebfe6be-05a3-4774-82e3-c166604f0066.31b82fbe-54fd-4794-b063-b7ddc1b6cf19.description=<pre>\nThis operation adds a flow variable to the local context. The variable is available in the current flow and its child flows.\n\nInputs\:\n    keyName - The name of the flow variable to add.\n    myValue - The value to assign to the flow variable.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of "myValue" input field.\n\nResponses\:\n    success - The operation completed as stated in the description.\n\nNote\:\n   If a flow variable with the same name already exists, its value will be overwritten.\n</pre>
2ebfe6be-05a3-4774-82e3-c166604f0066.42166da4-155a-401e-bbbb-6e6bb04fdb51.description=<pre>Returns the length of the list.\n\nInputs\:\ndelimiter - The list delimiter.\nlist - The list to be processed\n\nResponses\:\nsuccess - The operation completed Successfully.\nfailure - Something went wrong.\n\nReturns\:\nThe length of the list.</pre>
2ebfe6be-05a3-4774-82e3-c166604f0066.476f29a5-52c1-43b7-b357-c6430e3d15be.prompt=Number to count to.
2ebfe6be-05a3-4774-82e3-c166604f0066.651a42dc-479c-49f5-9a26-80a21dd59626.prompt=Enter list of values separated by delimiter\:
2ebfe6be-05a3-4774-82e3-c166604f0066.7db26234-b2ef-4e02-a102-bab9098d6618.description=<pre>Searches for VMWare objects containing a given name (ignoring case). Retrieves each object one at a time from an initial search query as the one used for the SQL Query operation.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on. Type of object results desired.\nExample\: VirtualMachine, Network, ComputeResource, ClusterComputeResource, ResourcePool, HostSystem, Datastore, Datacenter, VirtualApp\n    nameToMatch - The string to perform a case insensitive contains match to. Only objects that contain this string in their name will be matched.  If not specified, all objects of the specified type will be matched.\n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResults\:\n    returnResult - This is the primary result. It contains the query result item from the current iteration, a message if there are no more items to be retrieved or an error message otherwise.\n    numberOfResults - This contains the number of results from the query remaining to be retrieved.\n    returnCode - It contains the value 0 if the operation successfully completed but there are still more items to be retrieved, the value 1, if the operation successfully completed and there are no more items to be retrieved and the value -1 if an error occurred.\n\nResponses\:\n    success - The operation completed successfully and there are more results available.\n    failure - Something went wrong.\n    no more - There are no more results to retrieve.\n</pre>
2ebfe6be-05a3-4774-82e3-c166604f0066.80f57427-5ba7-4df9-aa76-6629ca47ddf3.description=<pre>Search for VMWare objects of type propsType and their properties (propsPathset) from a root object (if any) specified by propsRootObjType and propsRootObj. Retrieves each object's properties one at a time from an initial search query as the one used for the SQL Query operation. Please see VMWare Integration Guide for more details.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n    no more - There are no more results to retrieve.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
2ebfe6be-05a3-4774-82e3-c166604f0066.81052317-69ca-414d-b785-90fd3f499d73.prompt=VMWare User\:
2ebfe6be-05a3-4774-82e3-c166604f0066.82ed0da4-3547-45a6-9f21-9e2ef1fb3035.prompt=Password\:
2ebfe6be-05a3-4774-82e3-c166604f0066.84c7f079-4474-4ea7-ac6a-0620257cd348.description=<pre>\nThis operation adds a flow variable to the local context. The variable is available in the current flow and its child flows.\n\nInputs\:\n    keyName - The name of the flow variable to add.\n    myValue - The value to assign to the flow variable.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of "myValue" input field.\n\nResponses\:\n    success - The operation completed as stated in the description.\n\nNote\:\n   If a flow variable with the same name already exists, its value will be overwritten.\n</pre>
2ebfe6be-05a3-4774-82e3-c166604f0066.8ac3d4f3-3a76-45b4-90d8-ae00f93f56af.prompt=VMWare Host\:
2ebfe6be-05a3-4774-82e3-c166604f0066.af81b1c7-ba4c-4850-aa33-24388053d919.prompt=VMWare Host\:
2ebfe6be-05a3-4774-82e3-c166604f0066.c723368d-d942-4da5-9cb5-5b6a2c2942ae.description=Counts from one number to another number.\n\n<pre>\nInputs\:\nfrom - The number to start counting at.\nto - The number to count to.\nincrementBy - The number to increment by while counting. If unspecified this is 1. If you wanted to count 2,4,6,8 this would be 2.\nreset - If true, then the counter will restart counting from the beginning.\n\nNOTE\: These values must be between -9223372036854775808 and 9223372036854775807\n\nReturns\:\nThe number that was just counted.\n\nNote\: the primary result is resultString, Result can also be used. result (All lower case) should not be used as it is the response code.\n\nResponses\:\nhas more - Not yet done counting.\nno more - Done counting. This will only be returned once, then counting restarts.\nfailure - Something went wrong.\n</pre>
2ebfe6be-05a3-4774-82e3-c166604f0066.ec78eb78-af28-45ed-ada4-2d4854aa860e.prompt=Password\:
2ebfe6be-05a3-4774-82e3-c166604f0066.eccc24b8-d844-4b91-81a6-0113fe871867.description=<pre>This operation is used to retrieve a value from a list. When the index of an element from a list is known, this operation can be used to extract the element.\n\nInputs\:\n    list - A list to get the value from.\n    delimiter - The delimiter that separates values in the list.\nDefault value\: ','\n    index - The index of the value (starting at 0) to retrieve from the list.\nValid values\: an integer, end (for the last element), end-1 (for the second to last element)\n\nResults\:\n    returnResult - This is the primary output. It contains the value found at the specified index in the list, if the value specified for the "index" input field is positive and less than the size of the list. Otherwise, it contains the value specified for "index".\n\nResponses\:\n     success - The operation completed as stated in the description.\n     failure - The operation completed unsuccessfully.\n</pre>
2ebfe6be-05a3-4774-82e3-c166604f0066.f314ddbe-945d-420e-9f9e-c235ba72fc2c.description=Identify supported guest OSes on a host system.\n\nInputs\:\n    host - VMware host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nValid values\: 443, 80\nDefault value\: 443\n    protocol - Connection protocol.\nValid values\: https, http\nDefault value\: https\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: true, false \nDefault value\: false\n    vmDatacenter - Virtual machine's datacenter. Use ha-datacenter if host is an ESX host.\n    hostSystem - Target virtual machine host system. If host is an ESX host, use the full hostname of the ESX host as seen in the vSphere client for this host.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\nResults\: \n    returnResult - This is the primary output. Guest OS IDs (pipe-delimited).\n    guestOsId - Guest OS IDs (pipe-delimited).\n    guestOsDescription - Guest OS description (pipe-delimited).
2ebfe6be-05a3-4774-82e3-c166604f0066.f82effed-ab1d-44ad-853a-7670cf03db8c.prompt=VMWare Host\:
2fed997b-b457-4221-82d4-d3bfbcc503bb.40a5d46a-b109-4688-89b1-abf83c6f1739.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
2fed997b-b457-4221-82d4-d3bfbcc503bb.5f94eae6-bc39-46a3-8d80-597645686a27.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
2fed997b-b457-4221-82d4-d3bfbcc503bb.642c3e20-8161-4003-b56e-2437f67a8c8c.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
2fed997b-b457-4221-82d4-d3bfbcc503bb.79e754dc-ca4a-4947-9fdb-0f976d890241.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
2fed997b-b457-4221-82d4-d3bfbcc503bb.81dcc005-362b-4500-8f7a-b738e92eddab.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
2fed997b-b457-4221-82d4-d3bfbcc503bb.833d9f5e-62cf-49fc-8bf0-2b48a4e8d621.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
2fed997b-b457-4221-82d4-d3bfbcc503bb.description=<pre>\nThis workflow will generate unique id based on subscription name and uuid. 9 charactes from subscription and 6 characters from uuid are appended to create unique id.\n\nInputs\:\n\nsubName\t\t- Subscription Name\nuuid\t\t- UUID of component or service instance or any alpha numeric characters\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\ntruncateSpecialChars\t- remove special characters in subscription name\n\nReturns\nObjectId \t- Returns Object Id\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
31e1ee2f-e1dc-4770-a177-329b221c6fdc.0e8fa57d-c3aa-4c3b-bad7-46e1e31d5604.prompt=User Identifier
31e1ee2f-e1dc-4770-a177-329b221c6fdc.29a8e56b-559f-492a-881f-7d752ab8dfdc.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
31e1ee2f-e1dc-4770-a177-329b221c6fdc.2a6cfe9a-c3b7-45d3-a06b-21b56f1c21de.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
31e1ee2f-e1dc-4770-a177-329b221c6fdc.47b54a98-2b0a-418b-853e-f40372ab3a9e.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
31e1ee2f-e1dc-4770-a177-329b221c6fdc.6df3b18b-6de1-4157-9ce7-c5c7600be272.prompt=Property Name
31e1ee2f-e1dc-4770-a177-329b221c6fdc.7d547b22-9fe9-4179-88b7-c17364018ace.description=Service to perform an HTTP PUT via the Java HTTP Client\n\n<pre>\nInputs\:\nurl - the url to PUT from.\nusername - The username to use for basic authentication to the url\npassword - The password to use for basic authentication to the url\ntimeout - a timeout after which the connection should be terminated, or 0 for no timeout.\nuseCookies - Enables cookie tracking. Cookies will be stored between consecutive calls. Valid options are\: true/false\ntrustAllRoots - enables weak security over SSL. A SSH certificate is trusted even if no trusted CA issued it. Valid options are\: true/false\nproxy - a proxy to use when accessing the web site.\nproxyPort - a port on the proxy to connect to.\nproxyUsername - a username to use when connecting to the proxy.\nproxyPassword - a password to use when connecting to the proxy.\nkeystore - the path to the keystore to use for SSL Client Certificates\nkeystorePassword - the password for the keystore\nencodeURL - perform URL encoding.\nfile - The file to put on the specified url.\nuserAgent - if the HTTP header USER_AGENT needs to be overridden, pass in the value here\n\nResponses\:\nsuccess - The PUT command completed\nfailure - The PUT operation failed.\n\nResult\:\nThe operation's return code.\n\nExtraResults\: \nresultText - the raw result of the operation\ndocument - The Complete document returned by the PUT operation\npageLoadTimeInMS - The number of milliseconds it took the page to load.\nresponseTimeInMS - The number of milliseconds it took before the server responded.\nURL - the url to PUT from\nsessionId - the session ID of the connection to the host\nexception - if an error occurred, the message of this error\n</pre>
31e1ee2f-e1dc-4770-a177-329b221c6fdc.85aa0614-b086-4f53-bf9a-7f7815e6ac32.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
31e1ee2f-e1dc-4770-a177-329b221c6fdc.9d6e3827-14ce-4904-9e8c-225015c7d62d.description=<pre>\nIterates through a list of values. Modifying the value of the list and delimiter inputs during iteration is not generally supported.\n\nInputs\:\nlist - The list to iterate through.\nseparator - A delimiter that separates elements in the list.\n\nReturns\:\nThe current element of the list, if the response is has more\n\nResponses\:\nhas more - Another value was in the list, and has been returned.\nhas no more - The iterator has gone fully through the list. This response will only be returned once per iteration through the list, a subsequent call to the Iterator will restart the Iteration through the list.\nfailure - failed to process the list.\n\nNote\: Where the iterator is in the list is tracked by each step's unique id. Therefore you can iterate on the same list from multiple steps simultaneously.\n\nWARNING\: Any step that will use the results of this Iterator operation will, by default, attempt to assign that step's inputs from a flow variable. If this is left checked, then the first element of the iterator will be used for every cycle of iteration.\n\n</pre>
31e1ee2f-e1dc-4770-a177-329b221c6fdc.aa78e09d-bf71-48bf-984d-3328365a7233.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
31e1ee2f-e1dc-4770-a177-329b221c6fdc.ad84e5d0-09ad-4c8a-941f-82a397ccdab8.description=<pre>\nChecks to see if a string matches a specific rule.\n\nInputs\:\nmatchType - The type of match to perform.\ntoMatch - The string to check if matches another string.\nmatchTo - The string to match against.\nignoreCase - Boolean value for whether or not to ignore case during match.\n\nResponses\:\nsuccess - The String matched.\nfailure - The string did not match, or something went wrong.\n</pre>
31e1ee2f-e1dc-4770-a177-329b221c6fdc.b20925b3-9fcf-46dc-9ec1-e51a711ab130.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
31e1ee2f-e1dc-4770-a177-329b221c6fdc.b8b44514-2d52-4041-b0aa-1ffe9894746d.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
31e1ee2f-e1dc-4770-a177-329b221c6fdc.b90bd2fd-d2f7-4949-8470-33d9bc5a2796.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
31e1ee2f-e1dc-4770-a177-329b221c6fdc.bd99b8ef-4b8a-424b-b569-4a43859a9cca.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
31e1ee2f-e1dc-4770-a177-329b221c6fdc.d2fbbdb2-876a-4dc5-973f-f87f39eca719.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
31e1ee2f-e1dc-4770-a177-329b221c6fdc.description=<pre>\nThis workflow adds/updates the service component property using Artifact API.\n\nInputs-\ncomponentId \u2013 Service Component  id\nuserIdentifier  - User Identifier id\ndisplayName - Property Display Name to  add or update\npropertyName \u2013 Property Name to add or update\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\nvalueType - Value type of the property. It can have value from selection list "HP CSA \u2013 Property ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values delimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator - A delimiter that separates elements in the values ( default delimiter used is comma ,)\nconsumerVisible - Do you want to make property visible on consumer portal? (true/false), Default set to true\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
31e1ee2f-e1dc-4770-a177-329b221c6fdc.ecd0221f-513c-4ead-87c3-9524021a15a9.prompt=Component ID
31e1ee2f-e1dc-4770-a177-329b221c6fdc.f0281b6f-98b0-4090-b6cc-4894ad3365ad.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
31e1ee2f-e1dc-4770-a177-329b221c6fdc.f2a7cb6c-f134-48f2-8aa6-b7098ead7d53.description=Service to perform an HTTP PUT via the Java HTTP Client\n\n<pre>\nInputs\:\nurl - the url to PUT from.\nusername - The username to use for basic authentication to the url\npassword - The password to use for basic authentication to the url\ntimeout - a timeout after which the connection should be terminated, or 0 for no timeout.\nuseCookies - Enables cookie tracking. Cookies will be stored between consecutive calls. Valid options are\: true/false\ntrustAllRoots - enables weak security over SSL. A SSH certificate is trusted even if no trusted CA issued it. Valid options are\: true/false\nproxy - a proxy to use when accessing the web site.\nproxyPort - a port on the proxy to connect to.\nproxyUsername - a username to use when connecting to the proxy.\nproxyPassword - a password to use when connecting to the proxy.\nkeystore - the path to the keystore to use for SSL Client Certificates\nkeystorePassword - the password for the keystore\nencodeURL - perform URL encoding.\nfile - The file to put on the specified url.\nuserAgent - if the HTTP header USER_AGENT needs to be overridden, pass in the value here\n\nResponses\:\nsuccess - The PUT command completed\nfailure - The PUT operation failed.\n\nResult\:\nThe operation's return code.\n\nExtraResults\: \nresultText - the raw result of the operation\ndocument - The Complete document returned by the PUT operation\npageLoadTimeInMS - The number of milliseconds it took the page to load.\nresponseTimeInMS - The number of milliseconds it took before the server responded.\nURL - the url to PUT from\nsessionId - the session ID of the connection to the host\nexception - if an error occurred, the message of this error\n</pre>
31e1ee2f-e1dc-4770-a177-329b221c6fdc.fc47fdba-9872-4d88-a5e5-013975e0b5b5.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
31e1ee2f-e1dc-4770-a177-329b221c6fdc.fff0e922-2ac4-4ffa-ae7b-b9cb08324ff1.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
366b15a0-999f-4c02-b637-546a2babff48.050ae283-72f2-469e-9479-8500543037c3.prompt=366b15a0-999f-4c02-b637-546a2babff48.050ae283-72f2-469e-9479-8500543037c3.prompt
366b15a0-999f-4c02-b637-546a2babff48.1b516066-6250-47b8-bf77-b4d42d9338dc.prompt=366b15a0-999f-4c02-b637-546a2babff48.1b516066-6250-47b8-bf77-b4d42d9338dc.prompt
366b15a0-999f-4c02-b637-546a2babff48.6c66d1e6-04fd-4884-b569-c0a115872f93.prompt=366b15a0-999f-4c02-b637-546a2babff48.6c66d1e6-04fd-4884-b569-c0a115872f93.prompt
366b15a0-999f-4c02-b637-546a2babff48.82731d70-b2dc-4456-af2e-5b5d313707e0.prompt=366b15a0-999f-4c02-b637-546a2babff48.82731d70-b2dc-4456-af2e-5b5d313707e0.prompt
366b15a0-999f-4c02-b637-546a2babff48.82824c30-5bf7-46b1-a26f-9a645b0b8066.description=366b15a0-999f-4c02-b637-546a2babff48.82824c30-5bf7-46b1-a26f-9a645b0b8066.description
366b15a0-999f-4c02-b637-546a2babff48.a38ecd43-287e-4f62-b3a0-f02f6146637e.description=366b15a0-999f-4c02-b637-546a2babff48.a38ecd43-287e-4f62-b3a0-f02f6146637e.description
366b15a0-999f-4c02-b637-546a2babff48.c4b1f0a1-3791-45bc-b9b1-6339b82c5c59.prompt=366b15a0-999f-4c02-b637-546a2babff48.c4b1f0a1-3791-45bc-b9b1-6339b82c5c59.prompt
366b15a0-999f-4c02-b637-546a2babff48.c92b6b5a-c0c7-4b2e-9b33-993391b57217.description=366b15a0-999f-4c02-b637-546a2babff48.c92b6b5a-c0c7-4b2e-9b33-993391b57217.description
366b15a0-999f-4c02-b637-546a2babff48.de267c62-4b22-4438-9518-cc12abeaa9b0.prompt=366b15a0-999f-4c02-b637-546a2babff48.de267c62-4b22-4438-9518-cc12abeaa9b0.prompt
366b15a0-999f-4c02-b637-546a2babff48.description=<pre> This flow will list all the clusters in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResponses\:\n    success - The operation completed successfully. It will return the list of clusters.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.25685988-5aa2-4955-b121-efb2bd6a0709.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.2d2fdc2d-d02a-4fb6-a19a-3fa9c1e808ea.description=<pre>Sleeps for the number of seconds specified in the input.\n\nInputs\:\nseconds - The number of seconds to sleep.\n\nResponses\:\nsuccess - Slept for the number of seconds given as input.\nfailure - Was unable to sleep for some reason.\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.3348604c-7354-48b9-b87f-d9af7f015dfc.prompt=Datacenter\:
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.3815f287-2f04-479c-8b61-95713e440a52.prompt=VMWare User\:
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.3b06065b-1878-43ba-b265-8a979831243f.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.490889e2-af0a-43b6-87fc-fc0cd9ad2f50.prompt=VMWare Host\:
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.4940d8b5-d0c0-4191-b0c3-2ace3d3da1ec.description=<pre>This operation checks whether a string matches another string, using a specific matching rule. The "toMatch" input is the string that is checked for matching the "matchTo" expression. \n\nInputs\:\n    matchType - The type of match to perform.\nValid values\: Exact Match, Contains, Contains Once, Does Not Contain, Match All Words, Match No Words, Regex\nDefault value\: Exact Match\n    toMatch - The string that is checked for matching.\n    matchTo - The string to match against.\nExample\: If "matchType" is \u201CRegEx\u201D, the "matchTo" input is a regular expression such as\: ^-?\\d+(([\\.,]\\d+)?)+$. \n    ignoreCase - Specifies whether to ignore case when matching or not.\nValid values\: False, True\nDefault value\: False\n\nResults\:\n    returnResult - This is the primary output. It contains the string "Matches" if the "toMatch" string matches the "matchTo" string. Otherwise, it contains the string "Does Not Match".  \n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation completed unsuccessfully.\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.4ad36d80-2bc9-45d5-9f0f-411625fa518f.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.50f4414d-841f-4766-9765-b3c3e05cd04f.description=<pre>\nIterates through a JavaScript array, i.e. a string value that contains an array\nin the JavaScript Object Notation format (JSON).  Each time that this operation\nis called it places the value of the current array element into the Result\noutput and advances the iterator to the array element.\n\nThe JSON format is basically a way to encode arrays and other values using\nJavaScript notation.  For arrays, this means that the values need to be\nsurrounded by square brackets, and each element in the array can be a string\n(which needs surrounding quotes), a number, true, false, null, or a nested array\nor object.  Commas are always used as delimiters between array elements, and\nthey can appear within string elements without confusion.  For example, the\nfollowing is a simple JSON array\:\n   [ "cat", "dog", "horse" ]\nNote that the equivalent OO list would be \n   cat,dog,horse\nThe benefits of JavaScript arrays are that delimiters are fixed and cannot be\nconfused with data, and that complex nesting of arrays and objects are\nsupported.  The description of the enclosing folder, /Library/Utility\nOperations/Container/JavaScript Objects has more examples, and the JSON format\nis described completely at http\://www.json.org.\n\nModifying the contents of the array during iteration is not generally supported,\nbut will be safe as long as the affected item(s) are beyond the current position\nof the iterator.  The iterator keeps track of where it is in the array by\nposition.  If items are added or removed to the list in a position preceding the\niterator, it may cause the iterator to return results that are not obvious.  For\nexample, if the array contains [ "a", "b", "c" ] and the iterator is positioned\non the second element, "b" and the first element is removed, then the iterator\nwill now be at the last element in the list, "c".\n\nThere is currently a limitation that a flow can only have one of these array\niterator steps active at a time without causing possible conflicts.  In other\nwords, if you need to iterate through a nested array, you will should use a\nsub-flow to process the inner array.  You may have two or more of these array\niterators in the same flow as long as each iterator reaches the end of its array\nbefore the next one begins.\n\nInputs\n\n   array\n      The JavaScript array that will be iterated through.  The operation will\n      return a failure if the array is not a JavaScript array; a normal OO list\n      is NOT a JavaScript array.\n\nResponses\n\n   has more\n      The iterator has not yet reached the end of the array. The Result output\n      will be populated with the value of the current element in the array, and\n      the iterator will advance to the next element in the array.\n\n   no more\n      The iterator has reached the end of the array, and there is no more data\n      to return.  The iterator will become undefined after this call, which\n      basically will reset it so that if called again, this operation will begin\n      another iteration at the beginning of the array.\n\n   failure\n      There was some error in iterating through the list, and the Result output\n      will contain information about the error.  This will occur if the input\n      array is not a valid JavaScript array.  For example, if presented with a\n      common list value such as a,b,c it will fail because it lacks the\n      enclosing brackets and the quotes around each string element.  You may\n      wish to use a tool such as http\://www.jsonlint.com/ to help diagnose\n      problems with JavaScript Object Notation.\n\nOutputs\n\n   Result\n      The current array element.  When incorporating this operation into a flow,\n      you should assign a meaningful result value from this field.  Note that\n      since JavaScript arrays may contain nested arrays or other objects, the\n      value returned in Result may also require further processing.\n\n</pre>\n
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.51273aa8-84cd-4689-b1bb-d0883614cc3f.prompt=Enter a value for object
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.533f1205-1893-4200-b25c-6cb7b291ae21.prompt=Password\:
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.560206f6-ceed-4ace-8e77-8f7dbe86699e.description=<pre>Retrieves information about a guest os running in a virtual machine. VM tools must be running on the guest to retrieve this information.\n\nInputs\:\n    host - VMware vCenter, ESX or ESXi host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\n    vmIdentifierType - Virtual machine identifier type \nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmDatacenter - Virtual machine's datacenter.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\nResults\:\n    returnResult - This is the primary output.  Descriptive result of the operation.  Reason for error on failure.\n    state - Running state of the guest operating system.   Possible values\: running, shuttingdown, resetting, standby, notrunning, unknown\n    hostname - Hostname of the guest according to the guest operating system.\n    ipAddress - Primary IP address of the guest according to the guest operating system.  Example value\: 10.11.22.33\n    guestOsId - Guest operating system identifier (short name).  Example value\: "windows7Server64Guest"\n    guestOsDescription - Guest operating system full name.  Example value\: "Microsoft Windows Server 2008 R2 (64-bit)"\n    guestFamily - Guest operating system family.  Example value\: "WindowsGuest "\n    guestNicInfo - A json array of json objects describing the network interfaces of the guest.  Each json object has three keys\: \nmacaddress - Mac address of the guest nic.  Example value\: 00\:50\:56\:87\:01\:93\nipAddresses - A json array of ip addresses assigned to the nic.  Example value\: ["fe80\:\:9802\:e33\:4e2\:2caf%15","16.93.30.83"]\nnetwork - The name of the network port group the nic is attached to.\n    guestDiskInfo - A json array of json objects describing the disks attached to the guest.  Each json object has three keys\:\ndiskPath - The mount point of the disk on the guest.  Example value\: "C\:\\"\ncapacity - Size of the disk in bytes.\nfreespace - Amount of freespace on the disk in bytes. \n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.575c25ba-ac9e-437a-9900-5d587008074f.prompt=Virtual Machine\:
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.5a3a07b3-6fa6-40c4-aa3a-7b43ac3fded2.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.5e12e8aa-8766-4346-8002-0f6d90c2d6e6.prompt=Password\:
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.5e22921d-7511-43bd-bfe5-5aacd2492dd2.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.60101c78-26bc-4392-86a6-23768a3eed80.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.64a4e1e5-8fb4-446f-ae92-f9a34d99e1b3.prompt=Datacenter\:
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.65d8983b-4e84-4a73-9081-6b0ec2d04545.description=<pre>Retrieves information about a guest os running in a virtual machine. VM tools must be running on the guest to retrieve this information.\n\nInputs\:\n    host - VMware vCenter, ESX or ESXi host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\n    vmIdentifierType - Virtual machine identifier type \nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmDatacenter - Virtual machine's datacenter.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\nResults\:\n    returnResult - This is the primary output.  Descriptive result of the operation.  Reason for error on failure.\n    state - Running state of the guest operating system.   Possible values\: running, shuttingdown, resetting, standby, notrunning, unknown\n    hostname - Hostname of the guest according to the guest operating system.\n    ipAddress - Primary IP address of the guest according to the guest operating system.  Example value\: 10.11.22.33\n    guestOsId - Guest operating system identifier (short name).  Example value\: "windows7Server64Guest"\n    guestOsDescription - Guest operating system full name.  Example value\: "Microsoft Windows Server 2008 R2 (64-bit)"\n    guestFamily - Guest operating system family.  Example value\: "WindowsGuest "\n    guestNicInfo - A json array of json objects describing the network interfaces of the guest.  Each json object has three keys\: \nmacaddress - Mac address of the guest nic.  Example value\: 00\:50\:56\:87\:01\:93\nipAddresses - A json array of ip addresses assigned to the nic.  Example value\: ["fe80\:\:9802\:e33\:4e2\:2caf%15","16.93.30.83"]\nnetwork - The name of the network port group the nic is attached to.\n    guestDiskInfo - A json array of json objects describing the disks attached to the guest.  Each json object has three keys\:\ndiskPath - The mount point of the disk on the guest.  Example value\: "C\:\\"\ncapacity - Size of the disk in bytes.\nfreespace - Amount of freespace on the disk in bytes. \n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.72eafbf7-a317-428a-94e1-217f6ffb16e2.description=<pre>Determines the number of elements in the given JavaScript array.  If an element\nis itself another JavaScript array, it only counts as 1 element; in other\nwords, it will not expand and count embedded arrays.  Null values are also\nconsidered to be an element.\n\nExamples\:\n    The size of [ "apple", "banana" ] is 2.\n\n    The size of [ "apple", "pencil", [ 0, 3, 5, -199 ] ] is 3.\n\n    The size of [ "apple", null, "banana", null ] is 4.\n\n    The size of [] is 0.\n\nThe description of the enclosing folder describes the JSON format with examples,\nand the JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   array\n      The JavaScript array whose elements will be counted.  The operation will\n      return a failure if the array is not a JavaScript array; a normal OO list\n      is NOT a JavaScript array.\n\nResponses\n\n   success\n      The array is a valid JavaScript array, and the Result output will be\n      populated with the count of elements in the array.\n\n   failure\n      The array input does not contain a valid JavaScript array.  Result\n      will contain a message to that effect.  This will occur if the input\n      array is not a valid JavaScript array.  For example, if presented with a\n      common list value such as a,b,c it will fail because it lacks the\n      enclosing brackets and the quotes around each string element.  You may\n      wish to use a tool such as http\://www.jsonlint.com/ to help diagnose\n      problems with JavaScript Object Notation.\n\nOutputs\n\n   Result\n      The number of elements in the array.  Elements that are themselves arrays\n      only count as a single element.\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.74be4a8d-0274-4887-a845-85d86653ac2f.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.7688fd87-41fd-4178-a43b-4282b7d991e5.prompt=VMWare Host\:
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.8398907b-beee-4ce4-9f2c-bd751db355e1.description=<pre>Checks if a number or word is equal to another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 \=\= value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.83b65958-db76-4d9f-83b2-f255434f6507.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.89e40419-5f66-4c9f-86e5-14ad84d0a295.description=Counts from one number to another number.\n\n<pre>\nInputs\:\nfrom - The number to start counting at.\nto - The number to count to.\nincrementBy - The number to increment by while counting. If unspecified this is 1. If you wanted to count 2,4,6,8 this would be 2.\nreset - If true, then the counter will restart counting from the beginning.\n\nNOTE\: These values must be between -9223372036854775808 and 9223372036854775807\n\nReturns\:\nThe number that was just counted.\n\nNote\: the primary result is resultString, Result can also be used. result (All lower case) should not be used as it is the response code.\n\nResponses\:\nhas more - Not yet done counting.\nno more - Done counting. This will only be returned once, then counting restarts.\nfailure - Something went wrong.\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.8e8b986c-617b-418d-8d68-ba3daaef6fc0.description=<pre>Useful Op to keep a running results.\nTakes a string input (resultText) and appends this to a global context key of "runningResults". As a result, the context key whose name is in the keyName input will be appended with the string from the input resultText.\n\nInput Parameters\:\nkeyName - name of context key to append to\nresultText - string input to append\ndelimiter - (leave blank for none) the delimiter to put between what is already in keyName before appending resultText\n\nResponses\:\nsuccess - assigned the context variable\n\nReturns\:\nThe the value of the context variable it appended to.\n\nContext\:\nrunningResults\n\nScriptlet Example\:\ncurrentResults \= scriptletContext.get("runningResults");\n\nif (currentResults \=\= null) {\n   currentResults \= resultText;\n} else {\n   currentResults +\= resultText;\n}\n\n\nscriptletContext.putGlobal("runningResults", currentResults);</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.aa2d7a2c-61c6-4aad-9ee1-a9e329f65a1c.prompt=Virtual Machine\:
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.b602a290-7aa3-40a8-89df-d6017738d994.prompt=Identify VM by\:
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.d24596bc-5f99-4ca1-b7ca-cacd18cb8c98.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.d3536bf7-2756-4ff5-bd97-7245a3d7dce0.prompt=Enter a value for value1
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.d6d173db-a7ad-42ad-83dc-b6289f3af1a7.prompt=Number of seconds to sleep\:
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.d6ec9ae4-043d-4f15-90da-f5c1aee5b99e.description=<pre>\nAccepts an object in the JavaScript Object Notation format (JSON) and\nreturns a value for the specified key.\n\nThe JSON format encodes objects as a set of unordered key/value pairs, which is\nsimilar to a structure or map in other programming languages.  For example,\n   { "city" \: "Palo Alto", \n     "state" \: "CA" }\nis an object with two elements one with the name "city" having the value "Palo\nAlto", and the other being the name "state" with the value "CA". This operation would \nreturn "Palo Alto" if user enters "city" as a key.\n\nIf the input object contains JSON array, array index can be used in the key input. For example, \n{ "location"\: [\n      {"city"\: "Roseville", "country"\: "United States"},\n      {"city"\: "Cluj", "country"\: "Romania"},\n      {"city"\: "Yehud", "country"\: "Israel"}]    \n}\nThe operation would return "Roseville" if user enters "location[0].city" as a key.\n\nJavaScript objects are useful for representing structured data, and are\nespecially when used within an array.  For example, an operation that retrieves\na set of incidents from an external system may return the entire list in one\narray of incident objects.  The description of the enclosing folder,\n/Library/Utility Operations/Container/JavaScript Objects has more examples, and\nthe JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   object\n      The JavaScript object.  \n      The operation will return a failure if it is not a JavaScript object.\n\n   key\n      The key in the object to get the value of.\n\nResponses\n\n   success\n      The value was successfully returned for the specified key. \n\n   failure\n      There was some error in processing the object, most likely because the\n      object is not in valid JavaScript Object Notation or the specified key does not exist in the object.  \n      You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with\n      JavaScript Object Notation.\n\nOutputs\n\n   The primary output will be the value for the specified key in the object.\n\nNote\n\n    If the value in JSON object is in scientific notation, the returned output will be converted to an equivalent decimal number. Ex, 2.9e+1 will be converted to 29.\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.d98eb6f8-d1d8-4bd9-a17a-80f1d22fbced.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.e6170b59-181e-4efc-bede-1fff24049b62.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.e82b1df0-8a67-4e82-bb89-3a0af65a2960.prompt=Enter a value for array
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.eaf9775a-07d4-4329-8f4f-3b3bc1b8e8f5.description=<pre>\nThis operation waits for the number of seconds specified in the "seconds" input.\n\nInputs\:\n    seconds - The number of seconds to wait.\n\nResults\:\n    resultString \u2013 This is the primary output. It contains the "completed sleep" message if the operation completed successfully and an error message otherwise. \n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation completed unsuccessfully.\n</pre>
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.eb1c55d5-c45b-4c0c-a48a-3540b9f90ca0.prompt=VMWare User\:
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.eb55e0a8-7a0d-4bdf-a01f-d9b47b94a5b5.prompt=Identify VM by\:
3be0dd87-a42a-421d-9e75-1269bf7eb2bf.fb977886-90cb-4dc2-b4a9-3510378f5d90.prompt=Enter a value for array
3e085b93-2b4f-479c-9de9-b90bc380bcd2.0570399a-4964-4236-8812-4ed244348c55.prompt=Enter a value for host
3e085b93-2b4f-479c-9de9-b90bc380bcd2.1605acf8-6009-4e0e-b7eb-0cd209d31976.prompt=Enter a value for protocol
3e085b93-2b4f-479c-9de9-b90bc380bcd2.220c7aff-583c-4d09-a97d-1495603d2564.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
3e085b93-2b4f-479c-9de9-b90bc380bcd2.280999ee-5298-4b22-befe-04d05471c8d3.prompt=Enter a value for vmID
3e085b93-2b4f-479c-9de9-b90bc380bcd2.435eb485-c21a-47a3-bc24-0e40f649bf49.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
3e085b93-2b4f-479c-9de9-b90bc380bcd2.88fa9d12-3870-4a09-a817-54b71ce8a085.prompt=Enter a value for port
3e085b93-2b4f-479c-9de9-b90bc380bcd2.90e6ce61-fbd4-4a3d-8cfe-3d5a3d04f857.description=<pre>\nStart the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
3e085b93-2b4f-479c-9de9-b90bc380bcd2.9cc9b764-278a-44e4-9507-ecb4681fe92b.prompt=Enter a value for password
3e085b93-2b4f-479c-9de9-b90bc380bcd2.cebd49f4-e96b-41c3-9dff-3f58d53bdb47.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
3e085b93-2b4f-479c-9de9-b90bc380bcd2.d7347819-a7ff-4a4f-a77c-f42c3be5fd14.prompt=Enter a value for user
3e085b93-2b4f-479c-9de9-b90bc380bcd2.description=<pre>\nStart the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
3e18bdac-60c0-405a-ad0a-718de12cf740.22276168-3040-46c8-9eec-e71c080f0185.prompt=VMWare Host\:
3e18bdac-60c0-405a-ad0a-718de12cf740.333d25a0-d337-4326-9c2b-a9abbb9871f3.prompt=VMWare Host\:
3e18bdac-60c0-405a-ad0a-718de12cf740.3400c23c-b916-4f6d-b268-1f8505a1ce89.description=<pre>\nMerge the contents of 2 JSON arrays. \n\nThis operation does not modify either of the input arrays. The result is the contents or array1 and array2, merged\ninto a single array. \n\nInputs\:\n    array1 - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n    array2 - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - String representation of the new JSON array with the contents of array1 and array2.\n\n</pre>
3e18bdac-60c0-405a-ad0a-718de12cf740.37affa07-41cc-42ee-8634-4e7463c7a19d.prompt=VMWare Host\:
3e18bdac-60c0-405a-ad0a-718de12cf740.43017eb4-914d-487d-a84c-1b921219eb18.prompt=Datastore\:
3e18bdac-60c0-405a-ad0a-718de12cf740.5129d6fc-5d52-4cca-b253-220eec910dad.prompt=VMWare User\:
3e18bdac-60c0-405a-ad0a-718de12cf740.57210a6d-857d-4fa4-b084-b313b38fdb8a.description=<pre>Search for VMWare objects of type propsType and their properties (propsPathset) from a root object (if any) specified by propsRootObjType and propsRootObj. Retrieves each object's properties one at a time from an initial search query as the one used for the SQL Query operation. Please see VMWare Integration Guide for more details.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n    no more - There are no more results to retrieve.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
3e18bdac-60c0-405a-ad0a-718de12cf740.774955ac-b6b3-4949-98b4-c08663ad2901.prompt=Datacenter\:
3e18bdac-60c0-405a-ad0a-718de12cf740.7b086f2c-7a46-4ac5-a9c2-9a1e99d9b9b6.description=This flow returns a list of ISO files found on a Datastore.\n\nInputs\: \n    host - The VMware host hostname or IP address.\n    user - The VMware username.\n    password - The VMware user's password. \n    port - The Port to connect to the VMware server. \n    protocol - The connection protocol.\nValid values\: "https", "http"\n    closeSession - Specifies whether to close the internally kept VMwware Infrastructure API session when the operation completes. \nValid values\: "true", "false"\n    datacenter - The datacenter in which the search is performed.\n    dataStore - The datastore in which the search is performed. \n    path - The path of the folder in which the search is being done.\nExample\: path/to/folder\n\nResults\:\nreturnResult - This is the primary output.  If the flow ran with success this result contains the JSON array containing the path and the name of the ISO files.\nIn case the flow failed this result will contain the error message.\n\nResponses\: \n    success - The operation succeeded.\n    failure - The operation failed. The path could not be found, or it represents a file.\n\nNotes\:\n   1. When 'path' input is left empty, the flow will attempt to go through all the folders in the given datastore.\n   2. The datacenter specified in the "datacenter" input should  contain the dataStore specified in the "dataStore" input.\n   3. In case no ISO files were found in the provided path, the returned JSON array will be empty.\n   4. If an ISO file is found in the root of the provided path, the path field of the JSON array will contain a "/" in front of the name of the ISO file.\n
3e18bdac-60c0-405a-ad0a-718de12cf740.8c9a1aa6-3ad3-45dd-aa57-f653d1e167ef.prompt=VMWare User\:
3e18bdac-60c0-405a-ad0a-718de12cf740.b1900fdf-2040-4579-b51e-fa4ae4d5e925.description=<pre>Searches for VMWare objects containing a given name (ignoring case). Retrieves each object one at a time from an initial search query as the one used for the SQL Query operation.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on. Type of object results desired.\nExample\: VirtualMachine, Network, ComputeResource, ClusterComputeResource, ResourcePool, HostSystem, Datastore, Datacenter, VirtualApp\n    nameToMatch - The string to perform a case insensitive contains match to. Only objects that contain this string in their name will be matched.  If not specified, all objects of the specified type will be matched.\n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResults\:\n    returnResult - This is the primary result. It contains the query result item from the current iteration, a message if there are no more items to be retrieved or an error message otherwise.\n    numberOfResults - This contains the number of results from the query remaining to be retrieved.\n    returnCode - It contains the value 0 if the operation successfully completed but there are still more items to be retrieved, the value 1, if the operation successfully completed and there are no more items to be retrieved and the value -1 if an error occurred.\n\nResponses\:\n    success - The operation completed successfully and there are more results available.\n    failure - Something went wrong.\n    no more - There are no more results to retrieve.\n</pre>
3e18bdac-60c0-405a-ad0a-718de12cf740.b5a0ffdd-1fc0-4702-bdb8-91bc55743e4f.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
3e18bdac-60c0-405a-ad0a-718de12cf740.ba4d5085-57c3-460c-8db1-7ba4d81928e1.prompt=Password\:
3e18bdac-60c0-405a-ad0a-718de12cf740.bcb79358-7be8-4fbd-9fcf-e5577c1f2d96.prompt=Password\:
3e18bdac-60c0-405a-ad0a-718de12cf740.c3b0a2f7-79bb-42ee-83f1-0f7d2c1d762f.prompt=Password\:
3e5fe072-9db9-4a64-9a4a-7657b28b9ca5.20f91613-037e-4ff9-a5c2-01d5d3fe3b3a.description=<pre>Inserts a new name/value property into a JSON object, where the value is a valid JSON string. If the <newPropertyValue> input is not a valid string representation of a JSON object, the operation fails.\n\nThe 'Add Property to Object' operation can be used to add a property with a simple string value. \n\nExamples\: \n1)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: [1,2,3]\n     Result\:\n         { "test"\:[1,2,3]}\n2)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: {"a"\:"b"}\n     Result\:\n         { "test"\:{"a"\:"b"}}\n3)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: 1\n     Result\:\n         { "test"\:1}\n\nInputs\:\n    jsonObject - String representation of a JSON object. Objects in JSON are a collection of name value pairs, separated by a colon and surrounded with curly brackets {}. The name must be a string value, and the value can be a single string or any valid JSON object or array.\nExamples\: {"one"\:1, "two"\:2}, {"one"\:{"a"\:"a","B"\:"B"}, "two"\:"two", "three"\:[1,2,3.4]}\n    newPropertyName - The name of the new property to add to the JSON object. \nExamples\: property1, some_property, another property\n    newPropertyValue - The value for the new property. This must be a valid JSON representation of a JavaScript object.\nExamples\: 1, {"A"\:"A"}, [1,2,3,4]\n\nResults\:\n    Result - The JSON array with the inserted element.\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation completed unsuccessfully. See the message in <returnResult> for details.\n</pre>
3e5fe072-9db9-4a64-9a4a-7657b28b9ca5.2a1553b1-efd9-42bb-b7ee-dc9356914c8c.description=<pre>Retrieves details about an existing Network Interface Card (NIC) on a virtual machine.\n\nInputs\:\n    host - VMware vCenter, ESX or ESXi host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmIdentifierType - Virtual machine identifier type \nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"\n    vmDatacenter - Virtual machine's datacenter.\n    deviceNumber - The NIC number to get details of on the VM.  As an example\: "Network Adapter 1" would have be deviceNumber "1".\nExamples\: If a VM as a network adapter named "Network Adapter 1" the deviceNumber would be "1".\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    returnResult - Task result or operation result\n    connectAtPowerOn - The network adapter will automatically be connected to the network when the VM is powered on.  Possible values\: true, false.\n    connect - The network adapter is currently connected to the network.  Possible values\: true, false.\n    netPortGroup - The name of the port group the network adapter is attached to.  This can be either a legacy port group or a distributed virtual port group.\n    netMacAddr - The MAC address of the network adapter.  Example format\: "00\:50\:56\:94\:AB\:EF"\n    netMacGeneration - The MAC address assignment method configured for the network adapter.  Possible values\: assigned, generated, manual.\n    netWakeOnLan - Wake on Lan has been enabled for this network adapter.  Possible values\: true, false.\n    netNicType - The type of network adapter.  Possible values\: PCNet32, E1000, VmxNet, VmxNet2, VmxNet3.\n\nNotes\:\n1. Inventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
3e5fe072-9db9-4a64-9a4a-7657b28b9ca5.4f0a7fc7-c6f9-4f6a-b3d9-a675e8f1fd1a.description=<pre>Get all device numbers for a specified device type on a Virtual Machine (VM).\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmDatacenter - Virtual machine's datacenter\ndeviceType - Type of device. Valid values are\: hardDisk, floppyDisk, Cdrom, SCSIController, ethernetCard.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nreturnResult - Task result or operation result\ndeviceId - Number of device of the specified deviceType.\n</pre>
3e5fe072-9db9-4a64-9a4a-7657b28b9ca5.614c10e7-b3cd-46c8-b7e1-2aa6a404e12b.prompt=VMWare Host\:
3e5fe072-9db9-4a64-9a4a-7657b28b9ca5.65d9530b-5ced-4761-944f-a6ae4a6c46be.prompt=VMWare User\:
3e5fe072-9db9-4a64-9a4a-7657b28b9ca5.7c2995d7-bf70-406a-a265-993743b38f28.prompt=Virtual Machine\:
3e5fe072-9db9-4a64-9a4a-7657b28b9ca5.895760ff-c5e1-497b-956f-eda3dbfd75da.description=<pre>\nThis operation adds a flow variable to the local context. The variable is available in the current flow and its child flows.\n\nInputs\:\n    keyName - The name of the flow variable to add.\n    myValue - The value to assign to the flow variable.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of "myValue" input field.\n\nResponses\:\n    success - The operation completed as stated in the description.\n\nNote\:\n   If a flow variable with the same name already exists, its value will be overwritten.\n</pre>
3e5fe072-9db9-4a64-9a4a-7657b28b9ca5.9cb1cae9-b7e3-48ca-9358-1620d25d1048.prompt=Close session?\:
3e5fe072-9db9-4a64-9a4a-7657b28b9ca5.ddbbd0bf-1eee-4744-bb3a-8828f6749b2f.description=<pre>\nInsert an object into a JSON array, optionally specifying the position at which to insert the new object. \n\nThis Operation differes from the 'Add to Array' operation in that this one will try and validate the new element as\na JSON object, whereas 'Add to Array' will just wrap the element in quotes and treat it as a string. This means \nthat the element passed into this operation must be a valid JSON object, or the operation will fail. \n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n    element - The element to insert into the array. As noted above, this must be a valid JSON object or the operation will fail. It can be \n                    any valid JSON object; such as a number, string, an array, or a name/value pair list. Numbers can be entered as-is, strings\n                    must be wrapped in quotes, and objects must be formated correctly (see examples below for more info)\nValid values\: Any valid JSON object\nExamples\: 1 or "a string" or {"one"\:"two", "three"\:"four"} or [1,2,3]\n\n    index -The index in the array at which to insert the new element. If index is undefined, or index is equal to the length of the array \n               (one past the last element), the new element is placed at the end of the array. See the notes above for more information\n               on using negative numbers to specify array elements.\n               If the index is valid, the new element is inserted at that position, and all remaining elements are shifted one position to the right.\n\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\nDefault value\: undefined (insert the new element at the end of the array)\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array with the inserted element.\n\n</pre>
3e5fe072-9db9-4a64-9a4a-7657b28b9ca5.description=<pre>Get information about all virtual connected hard disks on a Virtual Machine (VM).\n\nInputs\:\n    host - VMWare host hostname or IP\n    user - VMWare username\n    password - VMWare user's password\n    port - Port to connect on\n    protocol - Connection protocol (http or https)\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\n    virtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123). If nothing is specified, all VMs are retrieved.\n    vmIdentifierType - Virtual machine identifier type\n    vmDatacenter - Virtual machine's datacenter\n\nResponses\:\nsuccess - The flow completed successfully.\nfailure - Something went wrong.\n</pre>
3e5fe072-9db9-4a64-9a4a-7657b28b9ca5.e9c2c397-c0b5-46fa-be28-6fbbe4ae9a67.description=<pre>Useful Op to keep a running results.\nTakes a string input (resultText) and appends this to a global context key of "runningResults". As a result, the context key whose name is in the keyName input will be appended with the string from the input resultText.\n\nInput Parameters\:\nkeyName - name of context key to append to\nresultText - string input to append\ndelimiter - (leave blank for none) the delimiter to put between what is already in keyName before appending resultText\n\nResponses\:\nsuccess - assigned the context variable\n\nReturns\:\nThe the value of the context variable it appended to.\n\nContext\:\nrunningResults\n\nScriptlet Example\:\ncurrentResults \= scriptletContext.get("runningResults");\n\nif (currentResults \=\= null) {\n   currentResults \= resultText;\n} else {\n   currentResults +\= resultText;\n}\n\n\nscriptletContext.putGlobal("runningResults", currentResults);</pre>
3e5fe072-9db9-4a64-9a4a-7657b28b9ca5.ee0d18ad-154e-4c5b-b754-591f753d9713.prompt=String to Append \:
3e5fe072-9db9-4a64-9a4a-7657b28b9ca5.f3be3ec2-9077-4367-b043-ec5fd3355e35.prompt=Network Card Number\:
3e5fe072-9db9-4a64-9a4a-7657b28b9ca5.f82c0974-63e6-48df-966b-117b3cdb69b6.prompt=Password\:
3f2d2eb8-b5f4-4122-ae3d-839e7574dfa0.0b4a9e97-610f-441a-89d3-903178803231.description=3f2d2eb8-b5f4-4122-ae3d-839e7574dfa0.0b4a9e97-610f-441a-89d3-903178803231.description
3f2d2eb8-b5f4-4122-ae3d-839e7574dfa0.5bb7d0d2-fbe8-4bf0-80a0-e422f7c3f270.description=3f2d2eb8-b5f4-4122-ae3d-839e7574dfa0.5bb7d0d2-fbe8-4bf0-80a0-e422f7c3f270.description
3f2d2eb8-b5f4-4122-ae3d-839e7574dfa0.721482d3-20fa-4695-adfe-af1e811eb3a8.description=3f2d2eb8-b5f4-4122-ae3d-839e7574dfa0.721482d3-20fa-4695-adfe-af1e811eb3a8.description
3f2d2eb8-b5f4-4122-ae3d-839e7574dfa0.943d5769-2ec2-4885-87be-c339b7f0cb28.description=3f2d2eb8-b5f4-4122-ae3d-839e7574dfa0.943d5769-2ec2-4885-87be-c339b7f0cb28.description
3f2d2eb8-b5f4-4122-ae3d-839e7574dfa0.description=<pre> This flow will list all the folders in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    datacenter -  Name of the datacenter.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of folders.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
4002ac5f-41f6-4192-8fef-478a4e82b8a8.05a24e12-278c-458b-9580-b4e19acca072.prompt=Password\:
4002ac5f-41f6-4192-8fef-478a4e82b8a8.0bbc55cb-cb08-4449-a1f1-fa65770515b0.prompt=Virtual Machine\:
4002ac5f-41f6-4192-8fef-478a4e82b8a8.12f8fbd4-cc77-4ed7-a004-e5111ca5630c.prompt=VMWare Host\:
4002ac5f-41f6-4192-8fef-478a4e82b8a8.1d56c129-e78e-4f51-81a2-53a6fa9b308a.description=<pre>Revert a virtual machine to an existing named snapshot or the most current one if none specified.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    async - Asynchronously perform the task.\nValid values\: "true", "false"\n    taskTimeOut - Time to wait before the operation is considered to have failed (seconds).\nDefault value\: 800\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n    snapshotName - Name of snapshot. If the snapshot name is not provided the operation performs a revert to the current snapshot (one level up in the hierachy from the 'You are here' position).\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\nReturns\:\n    returnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
4002ac5f-41f6-4192-8fef-478a4e82b8a8.42f30126-bc94-4fbd-8e76-ae77dca007cf.prompt=VMWare Host\:
4002ac5f-41f6-4192-8fef-478a4e82b8a8.54b0aa98-5b41-4442-acbc-fbfd2dcf23da.prompt=Name of the snapshot\: 
4002ac5f-41f6-4192-8fef-478a4e82b8a8.7114fbd1-20f3-4337-845f-80d7241e0155.prompt=Password\:
4002ac5f-41f6-4192-8fef-478a4e82b8a8.86e497d3-33f5-4c3e-b789-a051b0f8e7b2.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
4002ac5f-41f6-4192-8fef-478a4e82b8a8.a885c7cd-615c-4357-a7ec-f50bcd65ebea.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,suspended). Does nothing if the virtual machine is already in the desired power state.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"    \n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    async - Asynchronously perform the task.\nValid values\: "true", "false"\n    taskTimeOut - Time to wait before the operation is considered to have failed (seconds).\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmIdentifierType - Virtual machine identifier type.\nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"    \n    vmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n    no action - The operation completed with no action performed.\n\nReturns\:\n    returnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>\n\n\n
4002ac5f-41f6-4192-8fef-478a4e82b8a8.baaa99da-887e-4edd-939f-d016a67e9577.prompt=Virtual Machine\:
4002ac5f-41f6-4192-8fef-478a4e82b8a8.e23f25f6-c7d2-4d8f-ac45-e07ba7e6b596.prompt=VMWare User\:
4002ac5f-41f6-4192-8fef-478a4e82b8a8.e3bab673-5583-4e88-9995-9c2ca705b0f4.description=<pre>Retrieve information about a virtual machine or a group of virtual machines in a datacenter or host system (pipe-delimited). Retrieve each object one at a time from an initial search query ala SQL Query operation.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvmDatacenter - Virtual machine's datacenter.\nvmIdentifierType - Virtual machine identifier type.\nhostSystem - Target virtual machine host system.\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123).\ngetDetailed - Retrieve detailed information?\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nvmInfo - Virtual machine information.\nnumberOfResults - Number of results from the query remaining to be retrieved.\nreturnResult - Virtual machine ID or operation results.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
41ef8675-4c88-4e1a-9a5f-dfafbab70f61.1c7d439a-d585-4eca-8df7-6a5e9faea696.prompt=User Identifier
41ef8675-4c88-4e1a-9a5f-dfafbab70f61.247cc639-a04d-47e2-b7dc-c21ae7f0fb0d.description=<pre>\nConfigure VM network interface.\n\nInput Parameters\:\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n customizationTemplateName - Guest customization template name\n artifactId - Service component ID\n userIdentifier - CSA user identifier ID\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nOutput\:\n customizationSpecXml - Guest customization specification xml with fixed IP\n</pre>
41ef8675-4c88-4e1a-9a5f-dfafbab70f61.2559f6c2-9875-492d-8252-7e10bae2a178.prompt=Artifact ID
41ef8675-4c88-4e1a-9a5f-dfafbab70f61.40c1ff1f-b1df-4d83-9f86-6263054bd4cf.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
41ef8675-4c88-4e1a-9a5f-dfafbab70f61.46c0d4f3-83d2-4f70-a83c-9b127fe73430.description=<pre>Checks if a number or word is equal to another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 \=\= value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
41ef8675-4c88-4e1a-9a5f-dfafbab70f61.61355f3d-9314-41e9-a7e5-9bbb773306c5.prompt=VMWare Host\:
41ef8675-4c88-4e1a-9a5f-dfafbab70f61.7211e5ee-53bf-4f36-abec-9d633df00c75.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
41ef8675-4c88-4e1a-9a5f-dfafbab70f61.725f5a97-8cf3-491f-bee4-b38d9e1912ac.prompt=User Identifier
41ef8675-4c88-4e1a-9a5f-dfafbab70f61.7de5a5a4-b95d-42e9-b7c5-1734fbe3e87f.prompt=Artifact ID
41ef8675-4c88-4e1a-9a5f-dfafbab70f61.92921655-982b-44d4-bed0-880b368f8f32.description=<pre>\nThis workflow returns the list of Artifact\u2019s Properties and values.\n\nInputs-\nartifactId  \u2013  Artifact id\nuserIdentifier  - User Identifier id\npropertyNames \u2013 List of property names separated by pipe |\nIf user provides this inputs, flow will return the values for given property names only. Otherwise flow will return all properties and values for the given artifact.\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nsocketTimeout - The number of milliseconds to wait for the data to be retrieved. This input should be assigned a value greater than or equal to zero. A socketTimeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nfollowRedirects - If true, the GET command automatically follows redirects. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\npropertyNameValuesList \u2013 List of property Names and values\nE.g. property 1;value1,value2|property 2;value3|property 3;value3,value4|........\n</pre>
41ef8675-4c88-4e1a-9a5f-dfafbab70f61.c384c758-7b6c-4b95-9ba2-17ac5d31402b.prompt=Name of guest customization template\:
41ef8675-4c88-4e1a-9a5f-dfafbab70f61.d061002c-131b-4d05-b936-d41332aa751d.prompt=Password\:
41ef8675-4c88-4e1a-9a5f-dfafbab70f61.description=<pre>\nConfigure VM network interface.\n\nInput Parameters\:\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n customizationTemplateName - Guest customization template name\n artifactId - Service component ID\n userIdentifier - CSA user identifier ID\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nOutput\:\n customizationSpecXml - Guest customization specification xml with fixed IP\n</pre>
41ef8675-4c88-4e1a-9a5f-dfafbab70f61.df5a9624-970d-4d59-9229-c3f191d6c5f0.description=<pre> Export a guest customization spec to customization spec XML string.\nThe exported customization spec xml string can be modified and imported to the vCenter Customization Specifications Manager using the 'Import Guest Customization Spec' operation.\n\nInputs\:\n    host - VMWare vCenter hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    customizationTemplateName - Name of the customization specification to export. The customization specification should already exist in the vCenter customization specifications manager.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\nReturns\:\n    returnResult - Returns the customization spec Xml string or the failure message.\n\nNotes\:\nThe returnResult of this operation can be used for the 'customizationSpecXml' input in the 'Clone Virtual Machine' operation, 'Clone Virtual Machine to Template' flow and  'Deploy Virtual Machine from Template' flow.\n</pre>
41ef8675-4c88-4e1a-9a5f-dfafbab70f61.e47358d8-a74a-49b7-8303-8932e81fe109.description=<pre>\nProvision a VM from a VM template. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n port - Port Number toconnect on\n protocol - Connection prtocol(http, https)\n datacenterName -  target Datacenter on the vCenter host for the VMs\n hostname - VM Name\n templateReference - clone template Name\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n CPUs - Number of cpus to be set on the VMs\n Memory - Amount of Memory in MB to be set on VMs. Memory should be a multiple of 4.\n availableCPU - Available CPU in  vCenter\n availableMemory - Available Memory in MB in vCenter\n disksize - Size of the disk space needed on the VM in GB\n toEmail - Email Address of the recepient to receive a Email Notification \n fromEmail - Email Address of the Sender\n smtpHost - SMTP Hostname/IP Address\n smtpPort - SMTP Port\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n\nReturns\n vmId - VM Identifies of the created VM\n ipAddress - IP Address of the created VM\n macAddress - MAC Address of the created VM\n</pre>
41ef8675-4c88-4e1a-9a5f-dfafbab70f61.eb723383-76e6-4280-a8ea-9a2297d444cd.description=<pre>\nThis workflow returns the list of Artifact\u2019s Properties and values.\n\nInputs-\nartifactId  \u2013  Artifact id\nuserIdentifier  - User Identifier id\npropertyNames \u2013 List of property names separated by pipe |\nIf user provides this inputs, flow will return the values for given property names only. Otherwise flow will return all properties and values for the given artifact.\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nsocketTimeout - The number of milliseconds to wait for the data to be retrieved. This input should be assigned a value greater than or equal to zero. A socketTimeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nfollowRedirects - If true, the GET command automatically follows redirects. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\npropertyNameValuesList \u2013 List of property Names and values\nE.g. property 1;value1,value2|property 2;value3|property 3;value3,value4|........\n</pre>
43e45caf-511d-44aa-9c86-26cfb6634cd1.0b53356f-3216-4438-a947-0c75a8d1445d.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
43e45caf-511d-44aa-9c86-26cfb6634cd1.45232ec1-0a95-45d6-acab-e63607886d3b.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
43e45caf-511d-44aa-9c86-26cfb6634cd1.868dd573-852d-401c-812c-bd93b9eaafef.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
43e45caf-511d-44aa-9c86-26cfb6634cd1.a860e057-67ef-4d32-af60-a15b64234145.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
43e45caf-511d-44aa-9c86-26cfb6634cd1.c4da7202-3c28-4112-aa80-9ca30c9bdfed.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
43e45caf-511d-44aa-9c86-26cfb6634cd1.d079095a-4864-467e-8627-689a87c9ce2c.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
43e45caf-511d-44aa-9c86-26cfb6634cd1.description=<pre>This flow updates cpu and memory values on the component.\n\nInputs\:\ncomponentId\t\t\: Component Id\nuserIdentifier\t\: User Identifier\nnCPU\t\t\: Number of CPUs\nmemory\t\t\: Memory (MB)\nnCPU_deployed\t\: CPUs Deployed\nmemory_deployed\t\: memory Deployed \n\n\nResponse\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n</pre>
43e45caf-511d-44aa-9c86-26cfb6634cd1.e1e13e77-2cc6-4e13-923b-5db6226a88e6.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
43e45caf-511d-44aa-9c86-26cfb6634cd1.fbb8d00b-6752-4583-bb48-70ba5b71bdc7.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
46c03bf1-c322-4d2b-8550-315330145bfa.0ee4a73c-c1e6-4c1a-b36b-469d6ab0dfe3.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
46c03bf1-c322-4d2b-8550-315330145bfa.11a6ae99-67f5-4040-8615-d5d1f5cf8835.prompt=Enter a value for userIdentifier
46c03bf1-c322-4d2b-8550-315330145bfa.4066c6a2-df5e-4ebc-83ea-6cf5040728b5.prompt=Enter a value for index
46c03bf1-c322-4d2b-8550-315330145bfa.42b68446-43ad-4b2f-b502-e65018e56a3e.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
46c03bf1-c322-4d2b-8550-315330145bfa.4804839b-d4ed-413c-a6ba-c9edabedf60d.prompt=User Identifier
46c03bf1-c322-4d2b-8550-315330145bfa.586881c8-24ab-41ae-9a20-d5f89fcfe75e.description=<pre>Retrieves a value from a list.\n\nInputs\:\nlist - A list to get the value from.\ndelimiter - the delimiter that separates values in the list.\nindex - the index of the value (Starting at 0) to retrieve from the list, or end for the last element, or end-1 for the second to last element.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nThe value read from the list.</pre>
46c03bf1-c322-4d2b-8550-315330145bfa.67a7412f-e82c-4f38-9680-785070b62248.prompt=Process Instance ID
46c03bf1-c322-4d2b-8550-315330145bfa.6f93ae01-7a77-44ef-a054-6b6a256e67f5.prompt=Enter a value for serverCountBuffer
46c03bf1-c322-4d2b-8550-315330145bfa.8616a96d-c2fa-4963-946b-45f9feab61c3.prompt=Enter a value for serviceInstanceId
46c03bf1-c322-4d2b-8550-315330145bfa.979f9d26-d5d6-4edf-9f42-de200d0b4420.prompt=Enter a value for serverGrpId
46c03bf1-c322-4d2b-8550-315330145bfa.a44a7aaa-98b9-47e1-bfef-c2af70c20529.prompt=Enter a value for serverId
46c03bf1-c322-4d2b-8550-315330145bfa.aa1c26e8-2ace-4219-804c-cf0e8720d9d5.prompt=Process Instance ID
46c03bf1-c322-4d2b-8550-315330145bfa.b1fd9a4b-cf71-42d3-9e62-7f2b9b68b180.description=<pre>Returns the length of the list.\n\nInputs\:\ndelimiter - The list delimiter.\nlist - The list to be processed\n\nResponses\:\nsuccess - The operation completed Successfully.\nfailure - Something went wrong.\n\nReturns\:\nThe length of the list.</pre>
46c03bf1-c322-4d2b-8550-315330145bfa.b5bb6861-c215-4cdd-8551-9db2083fdc99.prompt=User Identifier
46c03bf1-c322-4d2b-8550-315330145bfa.ce4be3e6-0d8e-497a-a075-70658baa9c18.prompt=Process Instance ID
46c03bf1-c322-4d2b-8550-315330145bfa.d0ef4868-5145-4b2b-84ae-e68d69a78db3.prompt=User Identifier
46c03bf1-c322-4d2b-8550-315330145bfa.d6bfad99-a5d3-4f20-b86a-706e5052441c.prompt=Enter a value for value1
46c03bf1-c322-4d2b-8550-315330145bfa.d93e2c9a-fe30-4523-a2f4-57ce1506afef.prompt=Enter a value for max
46c03bf1-c322-4d2b-8550-315330145bfa.db0747e7-a484-4f85-a70e-2b212413c4db.description=<pre>Checks if a number or word is greater than another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 > value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
46c03bf1-c322-4d2b-8550-315330145bfa.de3055fc-c7c8-4fe1-bc1d-d2299a56fa1b.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
46c03bf1-c322-4d2b-8550-315330145bfa.description=<pre>\nRemove a Server from the Server Group. Random Server will be selected from the Server Group.\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>   
46c03bf1-c322-4d2b-8550-315330145bfa.e2756b00-318e-49ec-9606-54a576948ae3.prompt=Enter list of values separated by delimiter\:
46c03bf1-c322-4d2b-8550-315330145bfa.e27c7adc-21bb-4e2c-a2a1-8d432530c184.prompt=Process Instance ID
46c03bf1-c322-4d2b-8550-315330145bfa.e75dbe39-f807-4c72-8870-9285e370524b.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
46c03bf1-c322-4d2b-8550-315330145bfa.ea519aa5-7bc4-47a8-9931-6a9fb7144ee0.description=<pre>Generates a random number.\n\nInputs\:\nmax - The maximum number that can be returned.\nmin - The minimum number that can be returned.\n\nResponses\:\nsuccess - The operation completed Successfully.\nfailure - Something went wrong.\n\nReturns\:\nA random number between max and min (inclusive)</pre>
46c03bf1-c322-4d2b-8550-315330145bfa.eb67448a-e63a-401d-b32f-f825fe38c503.prompt=Enter a value for list
46c03bf1-c322-4d2b-8550-315330145bfa.f0342989-c204-44fe-923c-9670dec3b38f.prompt=User Identifier
46c03bf1-c322-4d2b-8550-315330145bfa.fdbadd0e-9f83-4125-a94f-92cab1aee27c.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
4823b7f7-6568-40ac-ae16-87d1db23b687.0020c7d3-e7df-4fff-b430-a010a57e4d0c.prompt=Component ID
4823b7f7-6568-40ac-ae16-87d1db23b687.0040b001-00a7-41a5-a8d6-d9f8e91f238f.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
4823b7f7-6568-40ac-ae16-87d1db23b687.019c1c31-74e8-4676-a606-af93fb2a1c68.prompt=Enter a value for kerberosConfFile
4823b7f7-6568-40ac-ae16-87d1db23b687.0e6268d6-4c07-4669-9410-0894870e838d.prompt=Component ID
4823b7f7-6568-40ac-ae16-87d1db23b687.13f57ae2-e437-4818-8f1e-c0d7b6da4ec9.prompt=Enter a value for trustAllRoots
4823b7f7-6568-40ac-ae16-87d1db23b687.15ffb3f4-3888-47cc-a668-b8daf3a56f57.prompt=Enter a value for trustKeystore
4823b7f7-6568-40ac-ae16-87d1db23b687.1868a151-d203-453c-858f-9ebc39564b01.prompt=Component ID
4823b7f7-6568-40ac-ae16-87d1db23b687.1a55d0c3-82cf-4d96-be3a-f0c1a6be8da8.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
4823b7f7-6568-40ac-ae16-87d1db23b687.22d416c2-5e1b-4622-b1e6-18b226da853a.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
4823b7f7-6568-40ac-ae16-87d1db23b687.279bb492-d6e3-4a81-803d-1620598a9acb.prompt=User Identifier
4823b7f7-6568-40ac-ae16-87d1db23b687.2843deeb-07a8-4951-9901-32ccc126cf0d.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
4823b7f7-6568-40ac-ae16-87d1db23b687.29a0db34-cc43-4dd5-9e56-0723136fe4ca.description=This workflow adds/updates the component property using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\n\nvalueType - Value type of the property. It can have value from selection list "CSA-Property-ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values dilimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator -  A delimiter that separates elements in the values ( default dilimiter used is comma ,)
4823b7f7-6568-40ac-ae16-87d1db23b687.2f1d2d26-b85c-4028-94b8-dc5157233c82.prompt=Component ID
4823b7f7-6568-40ac-ae16-87d1db23b687.416a5be5-86ec-4f6b-a794-96250ccc85db.description=<pre>\nThis workflow updates service component display name.\n\nInputs-\ncomponentId \u2013 Service component id\nuserIdentifier  - User Identifier id\ndisplayName \u2013 Display name of the service component to be added\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
4823b7f7-6568-40ac-ae16-87d1db23b687.4a0911a4-2e4e-4653-9a13-a45c7babffd2.prompt=Enter a value for keystore
4823b7f7-6568-40ac-ae16-87d1db23b687.4a1be391-4ed3-4101-9638-5178105eb650.prompt=Component ID
4823b7f7-6568-40ac-ae16-87d1db23b687.548bbadd-cec9-4597-b899-581a1c0e5def.prompt=Component ID
4823b7f7-6568-40ac-ae16-87d1db23b687.5b4fea72-b9aa-4e89-9e1b-4f974721e148.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
4823b7f7-6568-40ac-ae16-87d1db23b687.5cf06f1b-b3ff-4ec9-b777-e0fc9224f8c2.prompt=User Identifier
4823b7f7-6568-40ac-ae16-87d1db23b687.678ca202-d6a3-4b86-8e8c-8f1b256f8163.prompt=User Identifier
4823b7f7-6568-40ac-ae16-87d1db23b687.6da474d7-de73-46b9-b2d0-58f0509863ea.prompt=Component ID
4823b7f7-6568-40ac-ae16-87d1db23b687.74b30f9e-0c3c-4807-96ed-816175ab0ebf.prompt=Enter a value for authType
4823b7f7-6568-40ac-ae16-87d1db23b687.74ba03c0-1f53-4870-9b6a-1c0dabaabfca.prompt=Enter a value for trustPassword
4823b7f7-6568-40ac-ae16-87d1db23b687.7c19fcd2-964c-4504-8465-9db3368cb113.prompt=Enter a value for useCookies
4823b7f7-6568-40ac-ae16-87d1db23b687.7c82c34b-30bb-4e47-98b7-d09128c62efa.prompt=Enter a value for proxy
4823b7f7-6568-40ac-ae16-87d1db23b687.8fb44500-1db2-43d4-94a2-e3e951584c10.prompt=User Identifier
4823b7f7-6568-40ac-ae16-87d1db23b687.9808c675-e752-4cf4-80ab-87e5ebfdbddc.prompt=User Identifier
4823b7f7-6568-40ac-ae16-87d1db23b687.994f3d94-4629-4581-80aa-73189f75f309.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
4823b7f7-6568-40ac-ae16-87d1db23b687.998e6e4c-672e-48d5-b2a0-62d87297c620.prompt=Enter a value for timeout
4823b7f7-6568-40ac-ae16-87d1db23b687.9a806952-f176-400a-9005-95d178e14822.prompt=Enter a value for proxyPort
4823b7f7-6568-40ac-ae16-87d1db23b687.a2595080-39d8-4b33-acc0-e4608cc6ab58.prompt=Enter a value for proxyPassword
4823b7f7-6568-40ac-ae16-87d1db23b687.ab8e630b-b207-483d-8bc6-ffdfb1ee7b55.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
4823b7f7-6568-40ac-ae16-87d1db23b687.adc3cb5d-52c8-42e6-80fb-ebb7e3b83acf.prompt=Enter a value for proxyUsername
4823b7f7-6568-40ac-ae16-87d1db23b687.ca99c2ea-9e9b-4e5c-a784-cde2dcba89c8.prompt=User Identifier
4823b7f7-6568-40ac-ae16-87d1db23b687.d420f024-f3c2-49c3-aa0f-961db412e4ac.prompt=Enter a value for encodeURL
4823b7f7-6568-40ac-ae16-87d1db23b687.d426f7cb-b88d-4761-bdb9-156433d4ef9d.prompt=User Identifier
4823b7f7-6568-40ac-ae16-87d1db23b687.e6094883-a17a-4840-8a4d-8b8a1a56a616.prompt=Enter a value for keystorePassword
4823b7f7-6568-40ac-ae16-87d1db23b687.eaa8c26b-c5a6-4959-8d9d-07ef1a97aaf5.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
4823b7f7-6568-40ac-ae16-87d1db23b687.ef6fe70e-b052-45ed-b8fe-fa9b387e1fb4.prompt=Enter a value for userAgent
4823b7f7-6568-40ac-ae16-87d1db23b687.f2d52b13-f5b5-41a9-a072-6efa9bf21b5f.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
4823b7f7-6568-40ac-ae16-87d1db23b687.f584e536-8682-4453-84c3-197f462c66fe.prompt=User Identifier
4823b7f7-6568-40ac-ae16-87d1db23b687.fa25d15d-0f75-4bd5-b912-cc9029328f1a.prompt=Component ID
4855302e-3b98-4127-976b-7e8cecd0e8cd.0689b4de-96e5-474f-8fc7-822af4d85994.prompt=Password\:
4855302e-3b98-4127-976b-7e8cecd0e8cd.2541fd31-9176-42b2-a55b-c0b213c51d6c.description=<pre>\nAdds two numbers together\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe sum of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
4855302e-3b98-4127-976b-7e8cecd0e8cd.304346a7-cd28-40a7-b73d-70ee654cc093.prompt=Datacenter to look for VM\:
4855302e-3b98-4127-976b-7e8cecd0e8cd.34e36d4b-7234-4c2a-bac1-54964da8901f.prompt=VMWare Host\:
4855302e-3b98-4127-976b-7e8cecd0e8cd.7d4118e2-a5dc-462e-826a-9116aa7cbebd.prompt=VMWare User\:
4855302e-3b98-4127-976b-7e8cecd0e8cd.7d97e0ee-5727-4384-a26d-7d08e7d6f243.prompt=Virtual Machine\:
4855302e-3b98-4127-976b-7e8cecd0e8cd.942fa5c0-3871-483c-ae60-7904b6aef889.description=<pre>Get all device numbers for a specified device type on a Virtual Machine (VM).\n\nInputs\:\n    host - VMWare host hostname or IP\n    user - VMWare username\n    password - VMWare user's password\n    port - Port to connect on\n    protocol - Connection protocol (http or https)\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\n    virtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\n    vmIdentifierType - Virtual machine identifier type\n    vmDatacenter - Virtual machine's datacenter\n    deviceType - Type of device. Valid values are\: hardDisk, floppyDisk, Cdrom, SCSIController, ethernetCard.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nreturnResult - Task result or operation result\ndeviceId - Number of device having the specified deviceType.\n</pre>
4855302e-3b98-4127-976b-7e8cecd0e8cd.ae4a4603-e42a-4e6f-bd26-2dafeccbc384.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
4855302e-3b98-4127-976b-7e8cecd0e8cd.description=<pre>\nGet device count by type.\n\nInput Parameters\:\n host -  vCenter host to execute against\n port - Port Number toconnect on\n protocol - Connection prtocol(http, https)\n username - vCenter username\n password - vCenter password\n vmIdentifierType - Virtual machine identifier type\n vmDatacenter - Virtual machine's datacenter\n deviceType - Type of device. Valid values are\: hardDisk, floppyDisk, Cdrom, SCSIController, ethernetCard.\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nOutput\:\n deviceCount - Total number of devices\n</pre>
4855302e-3b98-4127-976b-7e8cecd0e8cd.e9e12a34-558b-43a2-b86b-02ac66ba3e76.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
488936a2-2501-4bf9-97ad-1c1d86d55f18.92737341-dc94-435a-86b5-80710010c779.description=<pre>Determines the number of elements in the given JavaScript array.  If an element\nis itself another JavaScript array, it only counts as 1 element; in other\nwords, it will not expand and count embedded arrays.  Null values are also\nconsidered to be an element.\n\nExamples\:\n    The size of [ "apple", "banana" ] is 2.\n\n    The size of [ "apple", "pencil", [ 0, 3, 5, -199 ] ] is 3.\n\n    The size of [ "apple", null, "banana", null ] is 4.\n\n    The size of [] is 0.\n\nThe description of the enclosing folder describes the JSON format with examples,\nand the JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   array\n      The JavaScript array whose elements will be counted.  The operation will\n      return a failure if the array is not a JavaScript array; a normal OO list\n      is NOT a JavaScript array.\n\nResponses\n\n   success\n      The array is a valid JavaScript array, and the Result output will be\n      populated with the count of elements in the array.\n\n   failure\n      The array input does not contain a valid JavaScript array.  Result\n      will contain a message to that effect.  This will occur if the input\n      array is not a valid JavaScript array.  For example, if presented with a\n      common list value such as a,b,c it will fail because it lacks the\n      enclosing brackets and the quotes around each string element.  You may\n      wish to use a tool such as http\://www.jsonlint.com/ to help diagnose\n      problems with JavaScript Object Notation.\n\nOutputs\n\n   Result\n      The number of elements in the array.  Elements that are themselves arrays\n      only count as a single element.\n</pre>
488936a2-2501-4bf9-97ad-1c1d86d55f18.972edae9-5677-42cf-a55a-a1c3f2aa8cbd.description=<pre>\nAdds two numbers together\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe sum of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
488936a2-2501-4bf9-97ad-1c1d86d55f18.d5a9d008-ee90-48c5-ad10-9078ee455545.description=<pre>\nThis operation adds a flow variable to the local context. The variable is available in the current flow and its child flows.\n\nInputs\:\n    keyName - The name of the flow variable to add.\n    myValue - The value to assign to the flow variable.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of "myValue" input field.\n\nResponses\:\n    success - The operation completed as stated in the description.\n\nNote\:\n   If a flow variable with the same name already exists, its value will be overwritten.\n</pre>
488936a2-2501-4bf9-97ad-1c1d86d55f18.d7f5db41-8fad-471e-a6b7-aa5566d67759.description=<pre>\nThis operation adds a flow variable to the local context. The variable is available in the current flow and its child flows.\n\nInputs\:\n    keyName - The name of the flow variable to add.\n    myValue - The value to assign to the flow variable.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of "myValue" input field.\n\nResponses\:\n    success - The operation completed as stated in the description.\n\nNote\:\n   If a flow variable with the same name already exists, its value will be overwritten.\n</pre>
488936a2-2501-4bf9-97ad-1c1d86d55f18.f435afad-70be-4e4b-8af4-f2b2624a4eef.description=<pre>\nAdds two numbers together\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe sum of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
4a5ad3d9-9929-4b55-a732-8d74bca54086.080c07e6-479d-4bc4-b356-c6feef724648.prompt=Password\:
4a5ad3d9-9929-4b55-a732-8d74bca54086.1252ffe7-890d-483d-9a11-a01585f48564.description=<pre>Search for VMWare objects of type propsType and their properties (propsPathset) from a root object (if any) specified by propsRootObjType and propsRootObj. Retrieves each object's properties one at a time from an initial search query as the one used for the SQL Query operation. Please see VMWare Integration Guide for more details.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n    no more - There are no more results to retrieve.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
4a5ad3d9-9929-4b55-a732-8d74bca54086.2b5cc88c-8d7c-45a6-af70-87295005c79d.description=This flow returns a list of ISO files found on a Datastore.\n\nInputs\: \n    host - The VMware host hostname or IP address.\n    user - The VMware username.\n    password - The VMware user's password. \n    port - The Port to connect to the VMware server. \n    protocol - The connection protocol.\nValid values\: "https", "http"\n    closeSession - Specifies whether to close the internally kept VMwware Infrastructure API session when the operation completes. \nValid values\: "true", "false"\n    datacenter - The datacenter in which the search is performed.\n    dataStore - The datastore in which the search is performed. \n    path - The path of the folder in which the search is being done.\nExample\: path/to/folder\n\nResults\:\nreturnResult - This is the primary output.  If the flow ran with success this result contains the JSON array containing the path and the name of the ISO files.\nIn case the flow failed this result will contain the error message.\n\nResponses\: \n    success - The operation succeeded.\n    failure - The operation failed. The path could not be found, or it represents a file.\n\nNotes\:\n   1. When 'path' input is left empty, the flow will attempt to go through all the folders in the given datastore.\n   2. The datacenter specified in the "datacenter" input should  contain the dataStore specified in the "dataStore" input.\n   3. In case no ISO files were found in the provided path, the returned JSON array will be empty.\n   4. If an ISO file is found in the root of the provided path, the path field of the JSON array will contain a "/" in front of the name of the ISO file.\n
4a5ad3d9-9929-4b55-a732-8d74bca54086.3298f1f5-d5e8-44bd-9e97-0ed1a5b9738d.prompt=Password\:
4a5ad3d9-9929-4b55-a732-8d74bca54086.3b53d468-ca92-4aa0-a68f-d154c290f9a0.prompt=VMWare User\:
4a5ad3d9-9929-4b55-a732-8d74bca54086.46b73680-8ac5-4b17-8eae-5300da7b0431.prompt=VMWare Host\:
4a5ad3d9-9929-4b55-a732-8d74bca54086.542e5113-5d23-42e5-b99e-c3273b32d056.prompt=VMWare Host\:
4a5ad3d9-9929-4b55-a732-8d74bca54086.69c5a14b-efcc-4535-a5bd-a709e00f6923.prompt=Datastore\:
4a5ad3d9-9929-4b55-a732-8d74bca54086.734e5122-2320-472f-b7bc-29d1f3e8207c.prompt=VMWare Host\:
4a5ad3d9-9929-4b55-a732-8d74bca54086.73942b6c-7f3c-4c8f-8a6b-892f4c7ef9f7.prompt=VMWare User\:
4a5ad3d9-9929-4b55-a732-8d74bca54086.8151836f-3e22-42f8-a223-42c153f9ec39.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
4a5ad3d9-9929-4b55-a732-8d74bca54086.aa6e5b9b-d636-4209-864f-e619a375f430.prompt=Password\:
4a5ad3d9-9929-4b55-a732-8d74bca54086.abb9fe43-8df3-4648-8b06-7055f831c978.description=<pre>\nMerge the contents of 2 JSON arrays. \n\nThis operation does not modify either of the input arrays. The result is the contents or array1 and array2, merged\ninto a single array. \n\nInputs\:\n    array1 - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n    array2 - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - String representation of the new JSON array with the contents of array1 and array2.\n\n</pre>
4a5ad3d9-9929-4b55-a732-8d74bca54086.c82d1b67-7abf-4e7e-af73-cda263325a3b.description=<pre>Searches for VMWare objects containing a given name (ignoring case). Retrieves each object one at a time from an initial search query as the one used for the SQL Query operation.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on. Type of object results desired.\nExample\: VirtualMachine, Network, ComputeResource, ClusterComputeResource, ResourcePool, HostSystem, Datastore, Datacenter, VirtualApp\n    nameToMatch - The string to perform a case insensitive contains match to. Only objects that contain this string in their name will be matched.  If not specified, all objects of the specified type will be matched.\n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResults\:\n    returnResult - This is the primary result. It contains the query result item from the current iteration, a message if there are no more items to be retrieved or an error message otherwise.\n    numberOfResults - This contains the number of results from the query remaining to be retrieved.\n    returnCode - It contains the value 0 if the operation successfully completed but there are still more items to be retrieved, the value 1, if the operation successfully completed and there are no more items to be retrieved and the value -1 if an error occurred.\n\nResponses\:\n    success - The operation completed successfully and there are more results available.\n    failure - Something went wrong.\n    no more - There are no more results to retrieve.\n</pre>
4a5ad3d9-9929-4b55-a732-8d74bca54086.cbe825bc-5cc2-45e6-b809-fc3916c45c68.prompt=Datacenter\:
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.21f55563-f053-4850-acee-85547bac5d89.prompt=Enter a value for trustPassword
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.22ffe51b-15d1-44ff-9e8c-771299326a45.prompt=User Identifier
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.29e33999-19b4-4bc7-94a8-037a89feb340.prompt=Enter a value for value1
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.44a9c8b0-4910-4bbd-ac98-e2612d91b3e0.prompt=Enter a value for trustAllRoots
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.513152eb-a2b9-4c7e-bd23-bc8aea913098.prompt=Enter a value for trustAllRoots
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.573aea5d-83f5-4ff7-87db-d3cff9063ac9.prompt=Enter a value for trustKeystore
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.5b727b46-7659-4cd4-919b-89a0f4e511e8.prompt=Enter a value for trustPassword
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.63b3d0dc-96ca-4c71-9f44-1ee32f8a2e13.description=<pre>This flow runs a flex up/flex down action on a server group. It identifies all the servers in a group and runs the flex memory action on each server to set the memory configuration based on the user input.\n\nInputs\:\nuserIdentifier\t\: The user identifier associated with the CSA login\t\nartifactId\t\t\: The server group component ID\nhost\t\t\: The hostname or IP address of the vCenter provider\nuser\t\t\: The name of the user account to login to the vCenter provider\npassword\t\t\: The password of the user account to login to the vCenter provider\nport\t\t\: The port used by the vCenter provider\nprotocol\t\t\: The protocol used by the vCenter provider\navailableMemory\t\: The memory that is available for flex operations on the vCenter provider\nmemoryInMb\t\t\: The memory in MB that the server should be flex to\n\n\nResponse\:\nsuccess\t\t\: Memory for all servers were flexed\nignored\t\t\: Flex memory was not executed on at least one server as it has the same memory configuration as the desired configuration\nfailure\t\t\: Flex memory failed on at least one server \n</pre>
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.7a4f015c-5388-463b-86cb-8058dd323a5c.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.9f298f71-0552-4001-a059-42cbae90bbee.description=<pre>Checks to see if a string matches a specific rule.\n\nIf the matchType is RegEx, input matchTo is the regular expression like \: ^-?\\d+(([\\.,]\\d+)?)+$. Input toMatch is the actual string to check to see if it matches the matchTo expression.\n\nInputs\:\nmatchType - The type of match to perform.\ntoMatch - The string to check if matches another string.\nmatchTo - The string to match against. \nignoreCase - Boolean value for whether or not to ignore case during match.\n\nResponses\:\nsuccess - The String matched.\nfailure - The string did not match, or something went wrong.</pre>
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.a27973ea-2f9a-4f5c-9a71-10c8b2435d39.description=<pre>\nMultiplies two numbers\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe product of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.a3e16c0c-d9e3-47de-b63b-5df64156d152.prompt=Enter a value for trustKeystore
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.ab49cd6b-6484-4e96-83f9-a8a776fbb31c.prompt=Enter a value for trustPassword
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.b8ad04a9-52b3-4751-be57-0255215ca61d.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.c26739f9-137e-4396-aa28-b194db0e50bc.prompt=Enter a value for trustKeystore
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.d1a30bc5-6471-4388-bafa-cbe71f20c681.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.dbb68874-1b7e-4c4d-9f42-0837e448a841.prompt=Enter a value for trustAllRoots
4b38c26a-8af6-4bdd-ac08-0d5cd9a3bcd1.description=<pre>This flow will flex up or flex down the cpu and memory configuration of all the servers in a server group. \n\nThe flex up and flex down operations will execute whether the server is running, suspended or in switched off state.\nIf the flex up or flex down operation fails for one server, the action will continue on the remaining servers in the server group.\nThe maximum number that can be given as input for a flex up operation depends on the underlying configured vCenter.\n\nInputs\:\nCSA_CONTEXT_ID \t\: CSA Context Id\nCSA_PROCESS_ID \t\: CSA Process Instance Id\nSVC_COMPONENT_ID \t\: This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\nRSC_PROVIDER_ID \t\: This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\nSVC_SUBSCRIPTION_EMAIL \: This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\nRSC_SUBSCRIPTION_ID \t\: This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time. Default value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\nSVC_COMPONENT_TYPE \t\: This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\nRSC_POOL_ID \t\: This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\nSVC_INSTANCE_ID \t\: This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\nSVC_SUBSCRIPTION_ID \t\: This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\nPRN_COMPONENT_ID \t\: This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\nREQ_ORG_ID \t\: This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\nREQ_USER_ID \t\: This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\nUSR_ORG_ID \t\: This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\nRSC_BINDING_ID \t\: This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nThese tokens with the default values are resolved by CSA when the flow is invoked.\n\nResponses\:\nsuccess\t\t\: The flex up/flex down operation succeeded on all servers of the server group\nfailure\t\t\: The flex up/flex down operation may have failed on one or more servers of the server group\n</pre>
4d3749a6-45e5-4ebc-a26e-6bfa4116b0d5.1a752f98-174f-4e7e-af0c-f2bd061733ca.description=Check if there is atleast 2 server components in Deployed State to perform Flexin\n\nInput Parameters\:\nserverIds - List of server UUIDs separated by a delimiter\ndelimiter - the list delimiter.\nuserIdentifier - OO Application UUID to authorize a REST Call\n\nResponses\:\n   success - if there are > 1 valid server\n   failure - if there are <\= 1 valid server \n\nResult Fields\:\n NA
4d3749a6-45e5-4ebc-a26e-6bfa4116b0d5.27973d02-d185-4ed4-b758-731bab937c52.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
4d3749a6-45e5-4ebc-a26e-6bfa4116b0d5.3f01377b-dadb-4dde-8621-1191ea16138e.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
4d3749a6-45e5-4ebc-a26e-6bfa4116b0d5.7dfe8439-b506-4ffc-a687-61be677544cc.prompt=User Identifier
4d3749a6-45e5-4ebc-a26e-6bfa4116b0d5.94942e21-95a5-4013-83b4-a85ac794f302.description=<pre>\nIterates through a list of values. Modifying the value of the list and delimiter inputs during iteration is not generally supported.\n\nInputs\:\nlist - The list to iterate through.\nseparator - A delimiter that separates elements in the list.\n\nReturns\:\nThe current element of the list, if the response is has more\n\nResponses\:\nhas more - Another value was in the list, and has been returned.\nhas no more - The iterator has gone fully through the list. This response will only be returned once per iteration through the list, a subsequent call to the Iterator will restart the Iteration through the list.\nfailure - failed to process the list.\n\nNote\: Where the iterator is in the list is tracked by each step's unique id. Therefore you can iterate on the same list from multiple steps simultaneously.\n\nWARNING\: Any step that will use the results of this Iterator operation will, by default, attempt to assign that step's inputs from a flow variable. If this is left checked, then the first element of the iterator will be used for every cycle of iteration.\n\n</pre>
4d3749a6-45e5-4ebc-a26e-6bfa4116b0d5.a3745538-ff71-4259-8f95-f42c7d6ed21f.description=<pre>\nThis workflow retrieves all the child components of the parent component id sorted by created time.\n\nInputs\:\n\nartifactId\t\t- Component id for which the child components will be retrieved\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\n\nReturns\:\nchildIds\t- List of child component ids each separated by ","\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
4d3749a6-45e5-4ebc-a26e-6bfa4116b0d5.a46b942c-312e-4d09-b1ca-83912481a642.prompt=Artifact ID
4d3749a6-45e5-4ebc-a26e-6bfa4116b0d5.b0d4edf4-bbe4-474c-9ba8-46291f6d769e.description=Flex up a VM to the specific CPU Memory and Disk that is requested.\n\nInput Parameters\:\n serviceName -name of the service that will be created with this flow\n VCenterHost -  vCenter host to execute against\n VCenterUsername - vCenter username\n VCenterPassword - vCenter password.\n virtualMachine - This is the virtual machine that will be flexed.\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n cpuCount - number of cpus the virtual machine should have.\n memSize - amount of memory the virtual machine should have.\n addDisk - whether or not disk should be added to the vm.\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n NA
4d3749a6-45e5-4ebc-a26e-6bfa4116b0d5.ceb78d74-d3f9-4e89-b734-cbdde9335e49.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
4d3749a6-45e5-4ebc-a26e-6bfa4116b0d5.description=<pre>This flow runs a flex up/flex down action on a server group. It identifies all the servers in a group and runs the flex memory action on each server to set the memory configuration based on the user input.\n\nInputs\:\nuserIdentifier\t\: The user identifier associated with the CSA login\t\nartifactId\t\t\: The server group component ID\nhost\t\t\: The hostname or IP address of the vCenter provider\nuser\t\t\: The name of the user account to login to the vCenter provider\npassword\t\t\: The password of the user account to login to the vCenter provider\nport\t\t\: The port used by the vCenter provider\nprotocol\t\t\: The protocol used by the vCenter provider\ncpuCount\t\t\: The number of cpus to be flexed\nmemoryInMb\t\t\: The memory in MB that the server should be flex to\n\n\nResponse\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n</pre>
4d3749a6-45e5-4ebc-a26e-6bfa4116b0d5.fe2ee4a3-5460-4166-a2a2-a7a368f83263.description=This workflow returns the component properties and values using Artifact APIs.\n\nresult\:\npropertyNameValuesList\: pipe separated list of property name and values ( where each property name and values would be ; seprated and multiple values would be , seprated)\ne.g. - property 1; value1,value2|property 2; value3|property 3; value3,value4|........
4d872873-7dc9-457d-b816-93c906c13116.08d06e12-d9ed-48d8-85f4-b7bb4705ac30.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
4d872873-7dc9-457d-b816-93c906c13116.14003364-3514-4104-9ee6-096bbb0df204.prompt=Artifact ID
4d872873-7dc9-457d-b816-93c906c13116.3606582f-25c1-4085-a0d7-c2cae2c6319e.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
4d872873-7dc9-457d-b816-93c906c13116.37d03bb0-b2af-4703-a7f3-c2d5827119ba.prompt=Component ID
4d872873-7dc9-457d-b816-93c906c13116.3c5a91f2-e6ce-4018-a6f2-5db6a4f118e9.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
4d872873-7dc9-457d-b816-93c906c13116.3e77b063-9faf-4b5c-9274-cbfeb7650924.prompt=User Identifier
4d872873-7dc9-457d-b816-93c906c13116.40b6d66c-5808-45d3-a91a-70d036d107ff.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
4d872873-7dc9-457d-b816-93c906c13116.437c53bb-e4b9-4e7a-ad52-bf17ad352bbc.prompt=User Identifier
4d872873-7dc9-457d-b816-93c906c13116.4876a203-2725-46de-a683-4606f945e17d.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
4d872873-7dc9-457d-b816-93c906c13116.4bd40faf-3cac-446c-bd51-2c2b127265c0.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
4d872873-7dc9-457d-b816-93c906c13116.5580ec01-1606-448a-b195-79df11ac2bad.prompt=Component ID
4d872873-7dc9-457d-b816-93c906c13116.5d64badc-6427-4994-b932-016f70f42b8d.prompt=User Identifier
4d872873-7dc9-457d-b816-93c906c13116.6231a3dd-0e6c-46a1-b98c-b5d0ce67a1af.prompt=User Identifier
4d872873-7dc9-457d-b816-93c906c13116.6328540e-fced-4f21-9698-91fdf692bacb.prompt=Component ID
4d872873-7dc9-457d-b816-93c906c13116.642c05c4-afab-4667-9b5c-549e69c52d62.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
4d872873-7dc9-457d-b816-93c906c13116.659273b9-888a-4ca1-bc1b-18c8d68d55c6.prompt=Component ID
4d872873-7dc9-457d-b816-93c906c13116.65ad7675-2686-4c04-b57b-6420ee1d1916.prompt=User Identifier
4d872873-7dc9-457d-b816-93c906c13116.77e4f230-5b56-48f8-a0d3-4a83b9a54625.prompt=User Identifier
4d872873-7dc9-457d-b816-93c906c13116.8a64ce72-ed07-42c7-94af-da6479ac5111.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
4d872873-7dc9-457d-b816-93c906c13116.97c1fef6-a4f7-4f72-8646-e8fd03108ee2.prompt=Component ID
4d872873-7dc9-457d-b816-93c906c13116.99bbb38d-7769-42ec-917d-b5415ce57d0e.prompt=User Identifier
4d872873-7dc9-457d-b816-93c906c13116.9b08d4a1-de97-473f-a841-6a83f24c8f1b.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
4d872873-7dc9-457d-b816-93c906c13116.9f104b77-b45d-4d0a-a4a4-36623d30f13a.prompt=Component ID
4d872873-7dc9-457d-b816-93c906c13116.a21ffc4a-dc0b-4d10-859f-162e6b4681fb.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
4d872873-7dc9-457d-b816-93c906c13116.c6922a35-7ab8-4756-863b-5c59af48b8f3.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
4d872873-7dc9-457d-b816-93c906c13116.c77cfd19-cb85-412a-812d-8c61ac5b2c97.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
4d872873-7dc9-457d-b816-93c906c13116.cbd8d482-98da-467b-b653-b6cadda54dd5.prompt=Component ID
4d872873-7dc9-457d-b816-93c906c13116.d1909580-ca98-448a-8d13-38ed92879f61.description=This workflow returns the component properties and values using Artifact APIs.\n\nresult\:\npropertyNameValuesList\: pipe separated list of property name and values ( where each property name and values would be ; seprated and multiple values would be , seprated)\ne.g. - property 1; value1,value2|property 2; value3|property 3; value3,value4|........
4d872873-7dc9-457d-b816-93c906c13116.d5f1d322-ba3a-43a4-ba83-5e65284eff3f.prompt=User Identifier
4d872873-7dc9-457d-b816-93c906c13116.dadb3a8e-3004-497c-87b8-2a1966241039.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
4d872873-7dc9-457d-b816-93c906c13116.e2aaf2b7-1053-4bb3-84f1-a5c26cf2ef10.prompt=User Identifier
4d872873-7dc9-457d-b816-93c906c13116.e7865f0e-10d6-448f-b6f4-2dfbdf6769c3.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
4d872873-7dc9-457d-b816-93c906c13116.f1d2e873-0665-43d9-8083-dd2ef0a044d6.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
4d872873-7dc9-457d-b816-93c906c13116.fbf73a4c-9225-4e85-a3c5-a67be75f8c56.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
4d872873-7dc9-457d-b816-93c906c13116.feed3ecc-5487-4017-8a01-2154c42afd06.prompt=Component ID
4f8cad2a-cc3d-4900-a358-364a9ad87795.2767a7be-a6fd-4ded-af43-e3d6d7773cc7.description=Attempts to acquire the specified lock, and sleeps until the lock is available.\n\n<pre>\nInputs\:\n   lockId - the id of the lock, maximum 255 characters.\n   timeout - The maximum number of seconds this flow will run for.\n  seconds - The number of seconds to sleep for between each attempt at acquiring the lock.\n\nResponses\:\n   success - if the lock has been successfully acquired.\n   failure - if the lock could not be acquired.\n\nResult\:\n   Code - 0 if the operation succeeds, 1 otherwise.\n\nNotes\:\n1) The locks acquired by this operation are not reentrant. This means that \n   once a lock is acquired by a run, all subsequent attempts at acquiring \n   the same lock by the same run (or any other run) will fail.\n\n2) Once a run terminates, all the locks that were acquired during its execution\n   are automatically released.\n</pre>
4f8cad2a-cc3d-4900-a358-364a9ad87795.6123f6a7-42cb-4edd-a694-e6af089fad31.description=Releases a lock with an id given by the value of the lockId input.\n\n<pre>\nInputs\:\n   lockId - the id of the lock, maximum 255 characters.\n\nResponses\:\n   success - the only response returned.\n\nResults\:\n   there are no results.\n\nNotes\:\n1) The operation only releases locks acquired by the current run. \n   It cannot release another run's locks.\n\n2) The operation succeeds whether or not there is a lock held \n   by the current run with the supplied id.\n</pre>
4f8cad2a-cc3d-4900-a358-364a9ad87795.7b040d2a-444c-4a11-85c6-86f27f0ca654.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
4f8cad2a-cc3d-4900-a358-364a9ad87795.87206032-ac65-4483-a0e1-71e298da2a5d.prompt=Enter a value for lockId
4f8cad2a-cc3d-4900-a358-364a9ad87795.bc62d42c-2664-43d4-81b3-8aacb9eb37b1.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
4f8cad2a-cc3d-4900-a358-364a9ad87795.e0d94870-32e2-4963-80d1-08c997263c5c.prompt=Enter a value for lockId
54668503-568e-4072-8f39-0856c8745c37.1c7bee22-ac08-4155-b2ae-69b080cdc747.prompt=User Identifier
54668503-568e-4072-8f39-0856c8745c37.25f6b6d8-7e37-4a57-be2d-8976ce10b346.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
54668503-568e-4072-8f39-0856c8745c37.7617c447-cd10-45fc-94ce-d9b12bdda637.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
54668503-568e-4072-8f39-0856c8745c37.9d903e4b-e494-48cf-a363-7ac13836512d.description=Changes a VM's power state. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n vmPowerState - the desired power state (on / off etc)\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n serviceXml - xml representation of the server created in vCenter
54668503-568e-4072-8f39-0856c8745c37.description=<pre>\nStart the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
55f285d3-887a-4d2c-8c39-63035db92cab.04c32c41-c6ee-4a88-9d45-cd39973d94cf.prompt=Password\:
55f285d3-887a-4d2c-8c39-63035db92cab.5854638e-63e3-49f7-af85-abb8985fa8ac.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
55f285d3-887a-4d2c-8c39-63035db92cab.63e0d284-4834-4045-8c63-b27a328a7610.prompt=VMWare Host\:
55f285d3-887a-4d2c-8c39-63035db92cab.763fa86a-6546-46e4-aeeb-c6607f97987b.description=<pre> Export a guest customization spec to customization spec XML string.\nThe exported customization spec xml string can be modified and imported to the vCenter Customization Specifications Manager using the 'Import Guest Customization Spec' operation.\n\nInputs\:\n    host - VMWare vCenter hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    customizationTemplateName - Name of the customization specification to export. The customization specification should already exist in the vCenter customization specifications manager.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\nReturns\:\n    returnResult - Returns the customization spec Xml string or the failure message.\n\nNotes\:\nThe returnResult of this operation can be used for the 'customizationSpecXml' input in the 'Clone Virtual Machine' operation, 'Clone Virtual Machine to Template' flow and  'Deploy Virtual Machine from Template' flow.\n</pre>
55f285d3-887a-4d2c-8c39-63035db92cab.9207799b-54bd-49a4-8ca6-8a2f03e43a30.prompt=VMWare Host\:
55f285d3-887a-4d2c-8c39-63035db92cab.bcfe8747-ce41-4ad4-88ba-d6a735d53823.prompt=Name of guest customization template\:
55f285d3-887a-4d2c-8c39-63035db92cab.ea6d42dc-4943-4269-997d-6036dd2a8842.prompt=Name of guest customization template\:
55f285d3-887a-4d2c-8c39-63035db92cab.eac6f7c9-1556-475c-a308-ccfa6f05220e.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
55f285d3-887a-4d2c-8c39-63035db92cab.f0ef2120-c44b-480a-9a47-2ced42b4753d.description=<pre>\nBuild Fixed IP Customization Specification XML.\n\nInputs Parameters\:\n\n customSpecXml - User provided customization specification\n customSpecType - Type of the customization specification type i.e. Linux or Windows\n osType - OS type specified by the user.\n ipAddress - IP Address\n subnetMask - Subnet Mask\n gatewayIpList - List of gateway IP address\n dnsServerIpList - List of DNS server IP address\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n\nOutput\:\ncustomizationSpecXml - Customization Specification XML with Fixed IP.\n</pre>
55f285d3-887a-4d2c-8c39-63035db92cab.f94193f3-3854-4b75-98a9-2ea0ed70cf67.prompt=Password\:
56c9556c-90f1-484a-96ee-339325b3a518.30dd95ab-a470-4e8c-bc13-fb8a259be173.description=<pre>Get information about all virtual connected hard disks on a Virtual Machine (VM).\n\nInputs\:\n    host - VMWare host hostname or IP\n    user - VMWare username\n    password - VMWare user's password\n    port - Port to connect on\n    protocol - Connection protocol (http or https)\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\n    virtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123). If nothing is specified, all VMs are retrieved.\n    vmIdentifierType - Virtual machine identifier type\n    vmDatacenter - Virtual machine's datacenter\n\nResponses\:\nsuccess - The flow completed successfully.\nfailure - Something went wrong.\n</pre>
56c9556c-90f1-484a-96ee-339325b3a518.59af4c9b-09d0-4508-923f-b92c3db9b22c.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
56c9556c-90f1-484a-96ee-339325b3a518.64be7dc6-9199-4e06-b75d-f64468292167.prompt=VMWare Host\:
56c9556c-90f1-484a-96ee-339325b3a518.731ce939-7130-438c-b9c9-3af32fbe9214.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
56c9556c-90f1-484a-96ee-339325b3a518.7d04ba0b-3cdf-4669-8b31-686b1c4de022.description=<pre>\nThis operation adds a flow variable to the local context. The variable is available in the current flow and its child flows.\n\nInputs\:\n    keyName - The name of the flow variable to add.\n    myValue - The value to assign to the flow variable.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of "myValue" input field.\n\nResponses\:\n    success - The operation completed as stated in the description.\n\nNote\:\n   If a flow variable with the same name already exists, its value will be overwritten.\n</pre>
56c9556c-90f1-484a-96ee-339325b3a518.87548735-142c-4269-936d-fcefa6dd4a62.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
56c9556c-90f1-484a-96ee-339325b3a518.8b8cd984-b2a2-4e88-9f13-5ecdbb956c54.prompt=Property Name
56c9556c-90f1-484a-96ee-339325b3a518.8cc8df32-ab24-4ec3-be1a-52c58e3fdc81.description=<pre>Get information about all virtual connected hard disks on a Virtual Machine (VM).\n\nInputs\:\n    host - VMWare host hostname or IP\n    user - VMWare username\n    password - VMWare user's password\n    port - Port to connect on\n    protocol - Connection protocol (http or https)\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\n    virtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123). If nothing is specified, all VMs are retrieved.\n    vmIdentifierType - Virtual machine identifier type\n    vmDatacenter - Virtual machine's datacenter\n\nResponses\:\nsuccess - The flow completed successfully.\nfailure - Something went wrong.\n</pre>
56c9556c-90f1-484a-96ee-339325b3a518.90a042f6-20ad-4ee9-8e9e-eb8f942da1e9.prompt=Password\:
56c9556c-90f1-484a-96ee-339325b3a518.91c36b21-f702-4ea1-9712-48e87606c6fd.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
56c9556c-90f1-484a-96ee-339325b3a518.932ce3cb-dd49-40f9-b34b-71090b7f3da8.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
56c9556c-90f1-484a-96ee-339325b3a518.9ecaedfb-0b7e-4b30-b801-912bee717836.description=<pre>\nThis operation adds a flow variable to the local context. The variable is available in the current flow and its child flows.\n\nInputs\:\n    keyName - The name of the flow variable to add.\n    myValue - The value to assign to the flow variable.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of "myValue" input field.\n\nResponses\:\n    success - The operation completed as stated in the description.\n\nNote\:\n   If a flow variable with the same name already exists, its value will be overwritten.\n</pre>
56c9556c-90f1-484a-96ee-339325b3a518.c08265ee-58ab-4760-b17c-55e0d490ed6a.description=<pre>Get information about all virtual connected hard disks on a Virtual Machine (VM).\n\nInputs\:\n    host - VMWare host hostname or IP\n    user - VMWare username\n    password - VMWare user's password\n    port - Port to connect on\n    protocol - Connection protocol (http or https)\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\n    virtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123). If nothing is specified, all VMs are retrieved.\n    vmIdentifierType - Virtual machine identifier type\n    vmDatacenter - Virtual machine's datacenter\n\nResponses\:\nsuccess - The flow completed successfully.\nfailure - Something went wrong.\n</pre>
56c9556c-90f1-484a-96ee-339325b3a518.c27fc4a7-be2a-444b-856b-ef5d9b47ff81.description=<pre>\nThis workflow adds/updates the service component property using Artifact API.\n\nInputs-\ncomponentId \u2013 Service Component  id\nuserIdentifier  - User Identifier id\ndisplayName - Property Display Name to  add or update\npropertyName \u2013 Property Name to add or update\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\nvalueType - Value type of the property. It can have value from selection list "HP CSA \u2013 Property ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values delimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator - A delimiter that separates elements in the values ( default delimiter used is comma ,)\nconsumerVisible - Do you want to make property visible on consumer portal? (true/false), Default set to true\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
56c9556c-90f1-484a-96ee-339325b3a518.d9f59478-7d62-48a8-9aba-8bf7d53ba833.description=<pre>Get information about all virtual connected hard disks on a Virtual Machine (VM).\n\nInputs\:\n    host - VMWare host hostname or IP\n    user - VMWare username\n    password - VMWare user's password\n    port - Port to connect on\n    protocol - Connection protocol (http or https)\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\n    virtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123). If nothing is specified, all VMs are retrieved.\n    vmIdentifierType - Virtual machine identifier type\n    vmDatacenter - Virtual machine's datacenter\n\nResponses\:\nsuccess - The flow completed successfully.\nfailure - Something went wrong.\n</pre>
56c9556c-90f1-484a-96ee-339325b3a518.e296e327-2159-4eb7-a330-2d0fa9efe0d6.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
56c9556c-90f1-484a-96ee-339325b3a518.ece2ff9b-fe60-458d-9501-b2929d0e06e0.prompt=User Identifier
56c9556c-90f1-484a-96ee-339325b3a518.f2f4a2ea-2acf-4634-8f65-f8cfdf8bf59d.prompt=Component ID
58bcf61b-ac92-4d76-a84a-4d28dd269cf4.048e3eb2-cde8-4aca-9ea5-5161ba472027.description=<pre>\nAccepts an object in the JavaScript Object Notation format (JSON) and\nreturns a value for the specified key.\n\nThe JSON format encodes objects as a set of unordered key/value pairs, which is\nsimilar to a structure or map in other programming languages.  For example,\n   { "city" \: "Palo Alto", \n     "state" \: "CA" }\nis an object with two elements one with the name "city" having the value "Palo\nAlto", and the other being the name "state" with the value "CA". This operation would \nreturn "Palo Alto" if user enters "city" as a key.\n\nIf the input object contains JSON array, array index can be used in the key input. For example, \n{ "location"\: [\n      {"city"\: "Roseville", "country"\: "United States"},\n      {"city"\: "Cluj", "country"\: "Romania"},\n      {"city"\: "Yehud", "country"\: "Israel"}]    \n}\nThe operation would return "Roseville" if user enters "location[0].city" as a key.\n\nJavaScript objects are useful for representing structured data, and are\nespecially when used within an array.  For example, an operation that retrieves\na set of incidents from an external system may return the entire list in one\narray of incident objects.  The description of the enclosing folder,\n/Library/Utility Operations/Container/JavaScript Objects has more examples, and\nthe JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   object\n      The JavaScript object.  \n      The operation will return a failure if it is not a JavaScript object.\n\n   key\n      The key in the object to get the value of.\n\nResponses\n\n   success\n      The value was successfully returned for the specified key. \n\n   failure\n      There was some error in processing the object, most likely because the\n      object is not in valid JavaScript Object Notation or the specified key does not exist in the object.  \n      You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with\n      JavaScript Object Notation.\n\nOutputs\n\n   The primary output will be the value for the specified key in the object.\n\nNote\n\n    If the value in JSON object is in scientific notation, the returned output will be converted to an equivalent decimal number. Ex, 2.9e+1 will be converted to 29.\n</pre>
58bcf61b-ac92-4d76-a84a-4d28dd269cf4.05ad8bf0-7f45-45bc-b3a2-610099066e62.description=This operation iterates through a string that contains an array in the JavaScript Object Notation format (JSON).  Each time  this operation is called, it places the value of the current array element into the "returnResult" output and advances the iterator to the next array element.\n\nThe JSON format is used to encode arrays and other values using JavaScript notation.  For arrays, this means that the values need to be enclosed by square brackets, and each element in the array can be a string (enclosed by quotes), a number, true, false, null, or  nested array or object.  Commas are always used as delimiters between array elements, and they can also appear within string elements. \n\nThe benefits of JavaScript arrays are that delimiters are fixed and cannot be confused with data, and that complex nesting of arrays and objects are supported.  The description of the enclosing folder, /Library/Utility Operations/Container/JavaScript Objects has more examples, and the JSON format is described completely at http\://www.json.org.\n\nInputs\:\n    array - The JavaScript array that will be iterated through. A normal OO list is NOT a JavaScript array.\nExamples\:\n    For example, the following is a simple JSON array\:\n        [ "cat", "dog", "horse" ]\n    The equivalent OO list (that is not a JavaScript array) is\:\n        cat,dog,horse\n\n Results\:\n    returnResult - This is the primary output and contains the current array element or an exception message if something went wrong.  When incorporating this operation into a flow, you should assign a meaningful result value from this field.\n    Result - This output field contains the value from the "returnResult" field. \n\nResponses\:\n   has more - The iterator has not yet reached the end of the array. The "returnResult" output will be populated with the value of the current element in the array, and the iterator will advance to the next element in the array.\n   no more - The iterator has reached the end of the array, and there is no more data to return.  The iterator will become undefined after this call, which basically will reset it so that if called again, this operation will begin another iteration at the beginning of the array.\n   failure - There was some error in iterating through the list, and the "returnResult" output will contain information about the error. This will occur if the input array is not a valid JavaScript array. You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with JavaScript Object Notation.\n\nNotes\:\n1. Modifying the contents of the array during iteration is not generally supported, but will be safe as long as the affected item(s) are beyond the current position of the iterator.  The iterator keeps track of where it is in the array by position.  If items are added or removed to the list in a position preceding the iterator, it may cause the iterator to return results that are not obvious.  For example, if the array contains [ "a", "b", "c" ] and the iterator is positioned on the second element, "b" and the first element is removed, then the iterator will now be at the last element in the list, "c".\n2. There is currently a limitation that a flow can only have one of these array iterator steps active at a time without causing possible conflicts. In other words, if you need to iterate through a nested array, you should use a sub-flow to process the inner array.  You may have two or more of these array iterators in the same flow as long as each iterator reaches the end of its array before the next one begins.\n3. Note that since JavaScript arrays may contain nested arrays or other objects, the value returned in "returnResult" field may also require further processing.\n
58bcf61b-ac92-4d76-a84a-4d28dd269cf4.0b5f46b4-3471-4e11-99be-661142d9751a.prompt=closeSession\:
58bcf61b-ac92-4d76-a84a-4d28dd269cf4.0db16b8f-5da4-412b-8650-897e3d011be2.description=<pre>\nInsert an object into a JSON array, optionally specifying the position at which to insert the new object. \n\nThis Operation differes from the 'Add to Array' operation in that this one will try and validate the new element as\na JSON object, whereas 'Add to Array' will just wrap the element in quotes and treat it as a string. This means \nthat the element passed into this operation must be a valid JSON object, or the operation will fail. \n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n    element - The element to insert into the array. As noted above, this must be a valid JSON object or the operation will fail. It can be \n                    any valid JSON object; such as a number, string, an array, or a name/value pair list. Numbers can be entered as-is, strings\n                    must be wrapped in quotes, and objects must be formated correctly (see examples below for more info)\nValid values\: Any valid JSON object\nExamples\: 1 or "a string" or {"one"\:"two", "three"\:"four"} or [1,2,3]\n\n    index -The index in the array at which to insert the new element. If index is undefined, or index is equal to the length of the array \n               (one past the last element), the new element is placed at the end of the array. See the notes above for more information\n               on using negative numbers to specify array elements.\n               If the index is valid, the new element is inserted at that position, and all remaining elements are shifted one position to the right.\n\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\nDefault value\: undefined (insert the new element at the end of the array)\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array with the inserted element.\n\n</pre>
58bcf61b-ac92-4d76-a84a-4d28dd269cf4.14b035d9-0b6d-4156-ad18-769a2f5c489d.prompt=host\:
58bcf61b-ac92-4d76-a84a-4d28dd269cf4.151c9cc1-5f33-46f1-a852-ea61f7e03515.prompt=datastore\:
58bcf61b-ac92-4d76-a84a-4d28dd269cf4.22365a68-5075-4960-aefa-9d688f47a6f2.prompt=Datastore\:
58bcf61b-ac92-4d76-a84a-4d28dd269cf4.2262fe78-df54-4b40-981d-e489216374fb.description=\nRetrieves a list fo files and folders located under a specified datastore diretory. The operation can also be used to retrieve the contents of subdireories starting from the specified path.\n\nInputs\: \n    host - The VMware host hostname or IP address.\n    user - The VMware username.\n    password - The VMware user's password. \n    port - The Port to connect to the VMware server. \n    protocol - The connection protocol.\nValid values\: "https", "http"\n    closeSession - Specifies whether to close the internally kept VMwware Infrastructure API session when the operation completes. \nValid values\: "true", "false"\n    datacenter - The datacenter of the folder.\n    dataStore - The datastore of the folder.\n    path - The path of the folder to check.\nExample\: path/to/folder\n    searchRecursive - Specifies whethere to retrieve the contents located directly under the specified diretory or retrieve the contents of subdirectories as well.\nValid values\: "true", "false"\nDefault\: "false"\n    type - The type of datastore objects to retrieve. Multiple types can be specified  as long as they are separated using commas (","). When left empty the operation will retrieve all files and folders located under the specified directory regardless of type.\nValid values\: "FloppyImage", "Folder", "IsoImage", "TemplateConfig", "VmConfig", "VmDisk", "VmLog", "VmNvram", "VmSnapshot"\n    matchPattern - regular expressions that should be used for filtering the content.\nExample\: "*.iso" will retrieve all the files in the datastore that have the name ending with ".iso"\n\n\nResults\:\n    returnResult - This is the primary output. Returns the children of the folder.\n    files - The files in the folder.\n    folders - The folders in the folder.\n    detailedResultList - JSON array containing JSON objects with the following properties\: name, path, type.\n    \nResponses\: \n    success - The operation succeeded.\n    failure - The operation failed. The folder probably could not be found, or was a file.\n\nNotes\:\n    1. The format of the output data returned by the 'returnsResult','files','folders' varies then the operation is used to retrieve the contents of subfolders.\n       1.1. When retrieving the files and folders located directly under the specified directory the outputs will return the names of the files and folder found as a comma separated list\n       1.2. When retrieving the contents located under the subdirectories theoutputs will return a list of paths.\n    
58bcf61b-ac92-4d76-a84a-4d28dd269cf4.36e311a4-6376-499a-95e7-447c2d28990e.prompt=datacenter\:
58bcf61b-ac92-4d76-a84a-4d28dd269cf4.4244026b-175a-4bbb-acbd-533d2212d388.prompt=user\:
58bcf61b-ac92-4d76-a84a-4d28dd269cf4.87d80d12-fd38-4db1-a6b1-a1036dbf37d7.prompt=Password\:
58bcf61b-ac92-4d76-a84a-4d28dd269cf4.a7b18522-dd74-4bd5-a9ae-23794d37292b.prompt=password\:
58bcf61b-ac92-4d76-a84a-4d28dd269cf4.d4d67bae-43dc-481f-bc11-0cce927ef872.description=<pre>\nAccepts an object in the JavaScript Object Notation format (JSON) and\nreturns a value for the specified key.\n\nThe JSON format encodes objects as a set of unordered key/value pairs, which is\nsimilar to a structure or map in other programming languages.  For example,\n   { "city" \: "Palo Alto", \n     "state" \: "CA" }\nis an object with two elements one with the name "city" having the value "Palo\nAlto", and the other being the name "state" with the value "CA". This operation would \nreturn "Palo Alto" if user enters "city" as a key.\n\nIf the input object contains JSON array, array index can be used in the key input. For example, \n{ "location"\: [\n      {"city"\: "Roseville", "country"\: "United States"},\n      {"city"\: "Cluj", "country"\: "Romania"},\n      {"city"\: "Yehud", "country"\: "Israel"}]    \n}\nThe operation would return "Roseville" if user enters "location[0].city" as a key.\n\nJavaScript objects are useful for representing structured data, and are\nespecially when used within an array.  For example, an operation that retrieves\na set of incidents from an external system may return the entire list in one\narray of incident objects.  The description of the enclosing folder,\n/Library/Utility Operations/Container/JavaScript Objects has more examples, and\nthe JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   object\n      The JavaScript object.  \n      The operation will return a failure if it is not a JavaScript object.\n\n   key\n      The key in the object to get the value of.\n\nResponses\n\n   success\n      The value was successfully returned for the specified key. \n\n   failure\n      There was some error in processing the object, most likely because the\n      object is not in valid JavaScript Object Notation or the specified key does not exist in the object.  \n      You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with\n      JavaScript Object Notation.\n\nOutputs\n\n   The primary output will be the value for the specified key in the object.\n\nNote\n\n    If the value in JSON object is in scientific notation, the returned output will be converted to an equivalent decimal number. Ex, 2.9e+1 will be converted to 29.\n</pre>
58bcf61b-ac92-4d76-a84a-4d28dd269cf4.description=This flow returns a list of ISO files found on a Datastore.\n\nInputs\: \n    host - The VMware host hostname or IP address.\n    user - The VMware username.\n    password - The VMware user's password. \n    port - The Port to connect to the VMware server. \n    protocol - The connection protocol.\nValid values\: "https", "http"\n    closeSession - Specifies whether to close the internally kept VMwware Infrastructure API session when the operation completes. \nValid values\: "true", "false"\n    datacenter - The datacenter in which the search is performed.\n    dataStore - The datastore in which the search is performed. \n    path - The path of the folder in which the search is being done.\nExample\: path/to/folder\n\nResults\:\nreturnResult - This is the primary output.  If the flow ran with success this result contains the JSON array containing the path and the name of the ISO files.\nIn case the flow failed this result will contain the error message.\n\nResponses\: \n    success - The operation succeeded.\n    failure - The operation failed. The path could not be found, or it represents a file.\n\nNotes\:\n   1. When 'path' input is left empty, the flow will attempt to go through all the folders in the given datastore.\n   2. The datacenter specified in the "datacenter" input should  contain the dataStore specified in the "dataStore" input.\n   3. In case no ISO files were found in the provided path, the returned JSON array will be empty.\n   4. If an ISO file is found in the root of the provided path, the path field of the JSON array will contain a "/" in front of the name of the ISO file.\n
58bcf61b-ac92-4d76-a84a-4d28dd269cf4.e528aaab-6dfb-4a28-980e-0ec62ce6448a.prompt=VMWare User\:
58bcf61b-ac92-4d76-a84a-4d28dd269cf4.f6087178-25e7-471d-90d9-bdb829bb7ae9.prompt=VMWare Host\:
58bcf61b-ac92-4d76-a84a-4d28dd269cf4.fda2faf6-8179-466e-a9fc-1b0119907781.prompt=Datacenter\:
5921c074-e863-45d0-985c-e1afa1c88fde.0877a8a8-661e-4fe4-b76a-ae2245fda329.description=<pre>\nInsert an object into a JSON array, optionally specifying the position at which to insert the new object. \n\nThis Operation differes from the 'Add to Array' operation in that this one will try and validate the new element as\na JSON object, whereas 'Add to Array' will just wrap the element in quotes and treat it as a string. This means \nthat the element passed into this operation must be a valid JSON object, or the operation will fail. \n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n    element - The element to insert into the array. As noted above, this must be a valid JSON object or the operation will fail. It can be \n                    any valid JSON object; such as a number, string, an array, or a name/value pair list. Numbers can be entered as-is, strings\n                    must be wrapped in quotes, and objects must be formated correctly (see examples below for more info)\nValid values\: Any valid JSON object\nExamples\: 1 or "a string" or {"one"\:"two", "three"\:"four"} or [1,2,3]\n\n    index -The index in the array at which to insert the new element. If index is undefined, or index is equal to the length of the array \n               (one past the last element), the new element is placed at the end of the array. See the notes above for more information\n               on using negative numbers to specify array elements.\n               If the index is valid, the new element is inserted at that position, and all remaining elements are shifted one position to the right.\n\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\nDefault value\: undefined (insert the new element at the end of the array)\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array with the inserted element.\n\n</pre>
5921c074-e863-45d0-985c-e1afa1c88fde.13ad6fca-6a2e-41fc-9fc0-fffdee2b5640.prompt=VMWare User\:
5921c074-e863-45d0-985c-e1afa1c88fde.1dacada0-ec42-4bad-b204-bd52a4bfb686.prompt=password\:
5921c074-e863-45d0-985c-e1afa1c88fde.2312b959-b375-41fa-93fb-87e64d39a715.prompt=Password\:
5921c074-e863-45d0-985c-e1afa1c88fde.270158ef-8998-4fcc-98ad-94cae797983b.description=\nRetrieves a list fo files and folders located under a specified datastore diretory. The operation can also be used to retrieve the contents of subdireories starting from the specified path.\n\nInputs\: \n    host - The VMware host hostname or IP address.\n    user - The VMware username.\n    password - The VMware user's password. \n    port - The Port to connect to the VMware server. \n    protocol - The connection protocol.\nValid values\: "https", "http"\n    closeSession - Specifies whether to close the internally kept VMwware Infrastructure API session when the operation completes. \nValid values\: "true", "false"\n    datacenter - The datacenter of the folder.\n    dataStore - The datastore of the folder.\n    path - The path of the folder to check.\nExample\: path/to/folder\n    searchRecursive - Specifies whethere to retrieve the contents located directly under the specified diretory or retrieve the contents of subdirectories as well.\nValid values\: "true", "false"\nDefault\: "false"\n    type - The type of datastore objects to retrieve. Multiple types can be specified  as long as they are separated using commas (","). When left empty the operation will retrieve all files and folders located under the specified directory regardless of type.\nValid values\: "FloppyImage", "Folder", "IsoImage", "TemplateConfig", "VmConfig", "VmDisk", "VmLog", "VmNvram", "VmSnapshot"\n    matchPattern - regular expressions that should be used for filtering the content.\nExample\: "*.iso" will retrieve all the files in the datastore that have the name ending with ".iso"\n\n\nResults\:\n    returnResult - This is the primary output. Returns the children of the folder.\n    files - The files in the folder.\n    folders - The folders in the folder.\n    detailedResultList - JSON array containing JSON objects with the following properties\: name, path, type.\n    \nResponses\: \n    success - The operation succeeded.\n    failure - The operation failed. The folder probably could not be found, or was a file.\n\nNotes\:\n    1. The format of the output data returned by the 'returnsResult','files','folders' varies then the operation is used to retrieve the contents of subfolders.\n       1.1. When retrieving the files and folders located directly under the specified directory the outputs will return the names of the files and folder found as a comma separated list\n       1.2. When retrieving the contents located under the subdirectories theoutputs will return a list of paths.\n    
5921c074-e863-45d0-985c-e1afa1c88fde.4452afd3-b833-419a-a17c-101b6a9f140e.prompt=closeSession\:
5921c074-e863-45d0-985c-e1afa1c88fde.4bfde758-2cd7-4672-b5b7-1d9b44ec6ed5.prompt=datastore\:
5921c074-e863-45d0-985c-e1afa1c88fde.6b703479-96f0-43d0-baed-700cfbf07b3c.description=This operation iterates through a string that contains an array in the JavaScript Object Notation format (JSON).  Each time  this operation is called, it places the value of the current array element into the "returnResult" output and advances the iterator to the next array element.\n\nThe JSON format is used to encode arrays and other values using JavaScript notation.  For arrays, this means that the values need to be enclosed by square brackets, and each element in the array can be a string (enclosed by quotes), a number, true, false, null, or  nested array or object.  Commas are always used as delimiters between array elements, and they can also appear within string elements. \n\nThe benefits of JavaScript arrays are that delimiters are fixed and cannot be confused with data, and that complex nesting of arrays and objects are supported.  The description of the enclosing folder, /Library/Utility Operations/Container/JavaScript Objects has more examples, and the JSON format is described completely at http\://www.json.org.\n\nInputs\:\n    array - The JavaScript array that will be iterated through. A normal OO list is NOT a JavaScript array.\nExamples\:\n    For example, the following is a simple JSON array\:\n        [ "cat", "dog", "horse" ]\n    The equivalent OO list (that is not a JavaScript array) is\:\n        cat,dog,horse\n\n Results\:\n    returnResult - This is the primary output and contains the current array element or an exception message if something went wrong.  When incorporating this operation into a flow, you should assign a meaningful result value from this field.\n    Result - This output field contains the value from the "returnResult" field. \n\nResponses\:\n   has more - The iterator has not yet reached the end of the array. The "returnResult" output will be populated with the value of the current element in the array, and the iterator will advance to the next element in the array.\n   no more - The iterator has reached the end of the array, and there is no more data to return.  The iterator will become undefined after this call, which basically will reset it so that if called again, this operation will begin another iteration at the beginning of the array.\n   failure - There was some error in iterating through the list, and the "returnResult" output will contain information about the error. This will occur if the input array is not a valid JavaScript array. You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with JavaScript Object Notation.\n\nNotes\:\n1. Modifying the contents of the array during iteration is not generally supported, but will be safe as long as the affected item(s) are beyond the current position of the iterator.  The iterator keeps track of where it is in the array by position.  If items are added or removed to the list in a position preceding the iterator, it may cause the iterator to return results that are not obvious.  For example, if the array contains [ "a", "b", "c" ] and the iterator is positioned on the second element, "b" and the first element is removed, then the iterator will now be at the last element in the list, "c".\n2. There is currently a limitation that a flow can only have one of these array iterator steps active at a time without causing possible conflicts. In other words, if you need to iterate through a nested array, you should use a sub-flow to process the inner array.  You may have two or more of these array iterators in the same flow as long as each iterator reaches the end of its array before the next one begins.\n3. Note that since JavaScript arrays may contain nested arrays or other objects, the value returned in "returnResult" field may also require further processing.\n
5921c074-e863-45d0-985c-e1afa1c88fde.904c6915-66d8-4482-b912-df90e73bcb16.prompt=host\:
5921c074-e863-45d0-985c-e1afa1c88fde.92b9a1ef-9e9e-4889-a36c-2aa45dc993dd.description=<pre>\nAccepts an object in the JavaScript Object Notation format (JSON) and\nreturns a value for the specified key.\n\nThe JSON format encodes objects as a set of unordered key/value pairs, which is\nsimilar to a structure or map in other programming languages.  For example,\n   { "city" \: "Palo Alto", \n     "state" \: "CA" }\nis an object with two elements one with the name "city" having the value "Palo\nAlto", and the other being the name "state" with the value "CA". This operation would \nreturn "Palo Alto" if user enters "city" as a key.\n\nIf the input object contains JSON array, array index can be used in the key input. For example, \n{ "location"\: [\n      {"city"\: "Roseville", "country"\: "United States"},\n      {"city"\: "Cluj", "country"\: "Romania"},\n      {"city"\: "Yehud", "country"\: "Israel"}]    \n}\nThe operation would return "Roseville" if user enters "location[0].city" as a key.\n\nJavaScript objects are useful for representing structured data, and are\nespecially when used within an array.  For example, an operation that retrieves\na set of incidents from an external system may return the entire list in one\narray of incident objects.  The description of the enclosing folder,\n/Library/Utility Operations/Container/JavaScript Objects has more examples, and\nthe JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   object\n      The JavaScript object.  \n      The operation will return a failure if it is not a JavaScript object.\n\n   key\n      The key in the object to get the value of.\n\nResponses\n\n   success\n      The value was successfully returned for the specified key. \n\n   failure\n      There was some error in processing the object, most likely because the\n      object is not in valid JavaScript Object Notation or the specified key does not exist in the object.  \n      You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with\n      JavaScript Object Notation.\n\nOutputs\n\n   The primary output will be the value for the specified key in the object.\n\nNote\n\n    If the value in JSON object is in scientific notation, the returned output will be converted to an equivalent decimal number. Ex, 2.9e+1 will be converted to 29.\n</pre>
5921c074-e863-45d0-985c-e1afa1c88fde.9984292c-6cee-459a-8da5-14c1686ebad6.prompt=user\:
5921c074-e863-45d0-985c-e1afa1c88fde.b6583fb4-0cf1-41d5-99a0-45f9789d5f3b.prompt=Datacenter\:
5921c074-e863-45d0-985c-e1afa1c88fde.bc9e2f0f-bdc2-41b9-95b0-84fde05f0aac.prompt=Datastore\:
5921c074-e863-45d0-985c-e1afa1c88fde.d054e9b7-f075-4c85-818c-289ef15ba614.prompt=VMWare Host\:
5921c074-e863-45d0-985c-e1afa1c88fde.d18661e4-a0b2-4e92-951d-ed3a4ac0504b.prompt=datacenter\:
5921c074-e863-45d0-985c-e1afa1c88fde.description=This flow returns a list of ISO files found on a Datastore.\n\nInputs\: \n    host - The VMware host hostname or IP address.\n    user - The VMware username.\n    password - The VMware user's password. \n    port - The Port to connect to the VMware server. \n    protocol - The connection protocol.\nValid values\: "https", "http"\n    closeSession - Specifies whether to close the internally kept VMwware Infrastructure API session when the operation completes. \nValid values\: "true", "false"\n    datacenter - The datacenter in which the search is performed.\n    dataStore - The datastore in which the search is performed. \n    path - The path of the folder in which the search is being done.\nExample\: path/to/folder\n\nResults\:\nreturnResult - This is the primary output.  If the flow ran with success this result contains the JSON array containing the path and the name of the ISO files.\nIn case the flow failed this result will contain the error message.\n\nResponses\: \n    success - The operation succeeded.\n    failure - The operation failed. The path could not be found, or it represents a file.\n\nNotes\:\n   1. When 'path' input is left empty, the flow will attempt to go through all the folders in the given datastore.\n   2. The datacenter specified in the "datacenter" input should  contain the dataStore specified in the "dataStore" input.\n   3. In case no ISO files were found in the provided path, the returned JSON array will be empty.\n   4. If an ISO file is found in the root of the provided path, the path field of the JSON array will contain a "/" in front of the name of the ISO file.\n
5921c074-e863-45d0-985c-e1afa1c88fde.eef5f351-50b5-45d6-b657-837d025ac65e.description=<pre>\nAccepts an object in the JavaScript Object Notation format (JSON) and\nreturns a value for the specified key.\n\nThe JSON format encodes objects as a set of unordered key/value pairs, which is\nsimilar to a structure or map in other programming languages.  For example,\n   { "city" \: "Palo Alto", \n     "state" \: "CA" }\nis an object with two elements one with the name "city" having the value "Palo\nAlto", and the other being the name "state" with the value "CA". This operation would \nreturn "Palo Alto" if user enters "city" as a key.\n\nIf the input object contains JSON array, array index can be used in the key input. For example, \n{ "location"\: [\n      {"city"\: "Roseville", "country"\: "United States"},\n      {"city"\: "Cluj", "country"\: "Romania"},\n      {"city"\: "Yehud", "country"\: "Israel"}]    \n}\nThe operation would return "Roseville" if user enters "location[0].city" as a key.\n\nJavaScript objects are useful for representing structured data, and are\nespecially when used within an array.  For example, an operation that retrieves\na set of incidents from an external system may return the entire list in one\narray of incident objects.  The description of the enclosing folder,\n/Library/Utility Operations/Container/JavaScript Objects has more examples, and\nthe JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   object\n      The JavaScript object.  \n      The operation will return a failure if it is not a JavaScript object.\n\n   key\n      The key in the object to get the value of.\n\nResponses\n\n   success\n      The value was successfully returned for the specified key. \n\n   failure\n      There was some error in processing the object, most likely because the\n      object is not in valid JavaScript Object Notation or the specified key does not exist in the object.  \n      You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with\n      JavaScript Object Notation.\n\nOutputs\n\n   The primary output will be the value for the specified key in the object.\n\nNote\n\n    If the value in JSON object is in scientific notation, the returned output will be converted to an equivalent decimal number. Ex, 2.9e+1 will be converted to 29.\n</pre>
5931b7eb-aadb-4718-8f2a-bcd18b9f0df0.0393f5ed-7b82-44af-ad14-f0a504553eef.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
5931b7eb-aadb-4718-8f2a-bcd18b9f0df0.0416341a-ceed-4fce-a818-9694c01da8d4.prompt=Password\:
5931b7eb-aadb-4718-8f2a-bcd18b9f0df0.152dfc90-18f2-4151-a38b-74e207f7cbe5.prompt=Virtual Machine\:
5931b7eb-aadb-4718-8f2a-bcd18b9f0df0.2ad4f4ac-efde-45e0-a141-d2112d0339a1.prompt=Enter user
5931b7eb-aadb-4718-8f2a-bcd18b9f0df0.3e4c30d2-21a5-4cd3-ab99-7e46dbaabb5f.prompt=Virtual Machine\:
5931b7eb-aadb-4718-8f2a-bcd18b9f0df0.7da397ab-58c6-4acc-9ac8-aaa0e938f552.description=<pre>Loops as many number of times as specified in the input, that is, counts from 1 to another number incrementing by 1 for each iteration.\n\nInputs\:\ncount - Number of loops to complete.\nreset - If true, then the counter will restart counting from 1.\n\nReturns\:\nThe number that was just counted.\n\nResponses\:\nhas more \t- Counting has not completed, one or more iterations are pending.\nno more \t- Counting completed. This will only be returned once, then counting restarts.\nfailure \t- Something went wrong.\n</pre>
5931b7eb-aadb-4718-8f2a-bcd18b9f0df0.909ae0ba-f296-40e3-b5d1-546df8b7f8c2.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
5931b7eb-aadb-4718-8f2a-bcd18b9f0df0.baadf06a-7899-4200-ba87-5f68cf8625ef.prompt=VMWare Host\:
5931b7eb-aadb-4718-8f2a-bcd18b9f0df0.bb8e50a7-2241-48d9-8bfb-dc07bb1bded1.prompt=Enter password
5931b7eb-aadb-4718-8f2a-bcd18b9f0df0.bf3b4030-e037-407f-af67-d312778a6c96.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,paused). Does nothing if the virtual machine is already in the power state.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno action - The operation completed with no action performed.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
5931b7eb-aadb-4718-8f2a-bcd18b9f0df0.c5e2c9dd-41c8-40ca-9aff-20cbcb87d455.description=<pre>Attempts to reboot the guest virtual machine.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Operation result message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
5931b7eb-aadb-4718-8f2a-bcd18b9f0df0.cfd9b754-d7e1-4347-885b-353155dab694.description=<pre>Sleeps for the number of seconds specified in the input.\n\nInputs\:\nseconds - The number of seconds to sleep.\n\nResponses\:\nsuccess - Slept for the number of seconds given as input.\nfailure - Was unable to sleep for some reason.\n</pre>
5931b7eb-aadb-4718-8f2a-bcd18b9f0df0.d78bf4a6-b331-47bd-a3ce-93d51606075a.description=<pre>Retrieve power state of virtual machine (poweredOn,poweredOff,suspended).\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task completion return message.\npowerState - Power state (poweredOn,poweredOff,suspended).\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
5931b7eb-aadb-4718-8f2a-bcd18b9f0df0.description=<pre>\nChanges a VM's power state. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n vmPowerState - the desired power state (on / off etc)\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n serviceXml - xml representation of the server created in vCenter\n</pre>
5931b7eb-aadb-4718-8f2a-bcd18b9f0df0.e56e151e-60c0-4a23-bf5b-4531081b4e6e.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
5931b7eb-aadb-4718-8f2a-bcd18b9f0df0.f807ef88-e7ec-485f-9a61-852ab957a1a5.description=<pre>Retrieve information about a virtual machine or a group of virtual machines in a datacenter or host system (pipe-delimited). Retrieve each object one at a time from an initial search query ala SQL Query operation.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvmDatacenter - Virtual machine's datacenter.\nvmIdentifierType - Virtual machine identifier type.\nhostSystem - Target virtual machine host system.\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123).\ngetDetailed - Retrieve detailed information?\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nvmInfo - Virtual machine information.\nnumberOfResults - Number of results from the query remaining to be retrieved.\nreturnResult - Virtual machine ID or operation results.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
59797098-8af2-4967-9319-ebeb402a2eff.62b0e9b4-2830-48fb-84fc-5e0a40bb30cc.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
59797098-8af2-4967-9319-ebeb402a2eff.7a85d7e6-9748-46a5-95d0-684bd1e94df8.description=<pre>\nThis workflow returns the list of Artifact\u2019s Properties and values.\n\nInputs-\nartifactId  \u2013  Artifact id\nuserIdentifier  - User Identifier id\npropertyNames \u2013 List of property names separated by pipe |\nIf user provides this inputs, flow will return the values for given property names only. Otherwise flow will return all properties and values for the given artifact.\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nsocketTimeout - The number of milliseconds to wait for the data to be retrieved. This input should be assigned a value greater than or equal to zero. A socketTimeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nfollowRedirects - If true, the GET command automatically follows redirects. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\npropertyNameValuesList \u2013 List of property Names and values\nE.g. property 1;value1,value2|property 2;value3|property 3;value3,value4|........\n</pre>
59797098-8af2-4967-9319-ebeb402a2eff.b7a2c134-6421-4d3a-b3d5-5cc95e2556cf.description=Replaces a substring within a string.\n\n<pre>\nInputs\:\ninput - the master string.\nreplace - the text to replace.\nreplaceWith - the text to replace with.\n\nResults\:\nthe string with the text replaced.\n\nResponses\:\nsuccess - succeeded in updating string.\nfailure - was unable to replace for some reason\n</pre>
59797098-8af2-4967-9319-ebeb402a2eff.cc0e0c75-5784-44b8-b88d-9ac950ead3c3.prompt=Artifact ID
59797098-8af2-4967-9319-ebeb402a2eff.cfb75b5c-ecd4-4a8f-b1b8-7ec40666a4d0.description=<pre>This is a soft copy of "Http Client" customized for the POST method (the input "method"\='POST' should not be changed). Check the linked "Http Client" operation. The specific input to this operation is "formParams".\n\nInputs\n    url - The web address to make the request to. This must be a standard URL as specified in RFC 3986. This is a required input.\nFormat\: scheme\://domain\:port/path?query_string\#fragment_id\nExamples\: https\://[fe80\:\:1260\:4bff\:fe49\:42fc]\:8080/my/path?key1\=val1&key2\=val2\#my_fragment\n    authType - The type of authentication used by this operation when trying to execute the request on the target server. The authentication is not preemptive\: a plain request not including authentication info will be made and only when the server responds with a 'WWW-Authenticate' header the client will send required headers. If the server needs no authentication but you specify one in this input the request will work nevertheless. The client cannot choose the authentication method and there is no fallback so you have to know which one you need. If the web application and proxy use different authentication types, these must be specified like in the Example model. \nDefault value\: basic\nValid values\: basic, digest, ntlm, kerberos, any, anonymous, "" or a list of valid values separated by comma.\nExample\: basic,digest\n    username - The user name used for authentication. For NTLM authentication, the required format is 'domain\\user' and if you only specify the 'user' it will append a dot like '.\\user' so that a local user on the target machine can be used. In order for all authentication schemes to work (except Kerberos) username is required.\n    password - The password used for authentication.\n    preemptiveAuth - If this field is "true", authentication info will be sent in the first request. If this is "false" a request with no authentication info will be made and if the server responds with 401 and a header such as WWW-Authenticate\: Basic realm\="myRealm", only then will the authentication info be sent.\nDefault value\: true\nValid values\: true, false\n    proxyHost - The proxy server used to access the web site.\n    proxyPort - The proxy server port. Default value\: 8080. Valid values\: -1, and positive integer values. When the value is '-1' the default port of the scheme, specified in the 'proxyHost', will be used.\n    proxyUsername - The user name used when connecting to the proxy. The "authType" input will be used to choose authentication type. The "Basic" and "Digest" proxy auth type are supported.\n    proxyPassword - The proxy server password associated with the proxyUsername input value.\n    trustAllRoots - Specifies whether to enable weak security over SSL/TSL. A certificate is trusted even if no trusted certification authority issued it.\nDefault value\: false\nValid values\: true, false\n    x509HostnameVerifier - Specifies the way the server hostname must match a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate. The hostname verification system prevents communication with other hosts other than the ones you intended. This is done by checking that the hostname is in the subject alternative name extension of the certificate. This system is designed to ensure that, if an attacker (Man-In-The-Middle) redirects traffic to his machine, the client will not accept the connection. If you set this input to "allow_all", this verification is ignored and you become vulnerable to security attacks. For the value "browser_compatible" the hostname verifier works the same way as Curl and Firefox. The hostname must match either the first CN, or any of the subject-alts. A wildcard can occur in the CN, and in any of the subject-alts. The only difference between "browser_compatible" and "strict" is that a wildcard (such as "*.foo.com") with "browser_compatible" matches all subdomains, including "a.b.foo.com". From the security perspective, to provide protection against possible Man-In-The-Middle attacks, we strongly recommend to use "strict" option.\nDefault value\: strict\nValid values\: strict, browser_compatible, allow_all\n    trustKeystore - The pathname of the Java TrustStore file. This contains certificates from other parties that you expect to communicate with, or from Certificate Authorities that you trust to identify other parties.  If the protocol (specified by the URL) is not HTTPS or if trustAllRoots is "true" this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    trustPassword - The password associated with the TrustStore file. If trustAllRoots is false and trustKeystore is empty, trustPassword default will be supplied.\nDefault value\: changeit\n    keystore - The pathname of the Java KeyStore file. You only need this if the server requires client authentication. If the protocol (specified by the URL) is not https or if trustAllRoots is 'true' this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    keystorePassword - The password associated with the KeyStore file. If trustAllRoots is false and keystore is empty, keystorePassword default will be supplied.\nDefault value\: changeit\n    connectTimeout - The time to wait for a connection to be established, in seconds. A timeout value of 0 represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout - The timeout for waiting for data (a maximum period inactivity between two consecutive data packets), in seconds. A socketTimeout value of 0 represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\n    useCookies - Specifies whether to enable cookie tracking or not. Cookies are stored between consecutive calls in a serializable session object therefore they will be available on a branch level (same subflow, same lane). If you specify a non-boolean value, the default value is used.\nDefault value\: true\nValid values\: true, false\n    keepAlive - Specifies whether to create a shared connection that will be used in subsequent calls. If keepAlive is false, the already open connection will be used and after execution it will close it. The operation will use a connection pool stored in a GlobalSessionObject that will be available throughout the execution (the flow and subflows, between parallel split lanes).\nDefault value\: true\nValid values\: true, false\n    connectionsMaxPerRoute - The maximum limit of connections on a per route basis. The default will create no more than 2 concurrent connections per given route.\nDefault value\: 2\n    connectionsMaxTotal - The maximum limit of connections in total. The default will create no more than 2 concurrent connections in total.\nDefault value\: 20\n    headers - The list containing the headers to use for the request separated by new line (CRLF).The header name - value pair will be separated by "\:".\nFormat\: According to HTTP standard for headers (RFC 2616).\nExamples\: Accept\:text/plain\n    responseCharacterSet - The character encoding to be used for the HTTP response. If responseCharacterSet is empty, the charset from the 'Content-Type' HTTP response header will be used. If responseCharacterSet is empty and the charset from the HTTP response Content-Type header is empty, the default value will be used. You should not use this for method\=HEAD or OPTIONS.\nDefault value\: ISO-8859-1\n    destinationFile - The absolute path of a file on disk where to save the entity returned by the response. "returnResult" will no longer be populated with the entity if this is specified. You should not use this for method\=HEAD or OPTIONS.\tExample\: C\:\\temp\\destinationFile.txt\n    followRedirects - Specifies whether the HTTP client automatically follows redirects.  Redirects explicitly prohibited by the HTTP specification as requiring user intervention will not be followed (redirects on POST and PUT requests that are converted to GET requests). If you specify a non-boolean value, the default value is used.\nDefault value\: true\nValid values\: true, false\n    queryParams - The list containing query parameters to append to the URL. The names and the values must not be URL encoded unless you specify "queryParamsAreURLEncoded"\=true because if they are encoded and "queryParamsAreURLEncoded"\=false they will get double encoded. The separator between name-value pairs is "&". The query name will be separated from query value by "\=". Note that you need to URL encode at least "&" to "%26" and "\=" to "%3D" and set "queryParamsAreURLEncoded"\="true" if you leave the other special URL characters un-encoded they will be encoded by the HTTP Client.\nExamples\: parameterName1\=parameterValue1&parameterName2\=parameterValue2;\n    queryParamsAreURLEncoded - Specifies whether to encode  (according to the URL encoding standard) the queryParams. If you set "queryParamsAreURLEncoded"\=true and you have invalid characters in 'queryParams' they will get encoded anyway. If you specify a non-boolean value, the default value is used.\nDefault value\: false\nValid values\: true, false\n    formParams - This input needs to be given in form encoded format and will set the entity to be sent in the request. It will also set the content-type to application/x-www-form-urlencoded. This should only be used with method\=POST. Note that you need to URL encode at least "&" to "%26" and "\=" to "%3D" and set "queryParamsAreURLEncoded"\="true" if you leave the other special URL characters unencoded they will be encoded by the HTTP Client.\nExamples\: input1\=value1&input2\=value2\n (The client will send\: input1\=value1&in+put+2\=val+u%0A+e2)\n    formParamsAreURLEncoded - formParams will be encoding  (according to the url encoding standard) if this is 'true'.  If you set "formParamsAreURLEncoded"\=true and you have invalid characters in 'formParams' they will get encoded anyway. This should only be used with method\=POST.\nDefault value\: false\nValid values\: true, false\n    sourceFile - The absolute path of a file on disk from where to read the entity for the HTTP request. This will be read using "requestCharacterSet" or "contentType" input (see below). This should not be provided for method\=GET, HEAD, TRACE\nExamples\: C\:\\temp\\sourceFile.txt\n    body - The string to include in body for HTTP POST operation. If both sourceFile and body will be provided, the body input has priority over sourceFile. This should not be provided for method\=GET, HEAD, TRACE\n    requestCharacterSet - The character encoding to be used for the HTTP request body. If contentType is empty, the requestCharacterSet will use the default value. If contentType will include charset (ex.\: "application/json; charset\=UTF-8"), the requestCharacterSet value will overwrite the charset value from contentType input. This should not be provided for method\=GET, HEAD, TRACE\nDefault value\: ISO-8859-1\n    chunkedRequestEntity - Data is sent in a series of "chunks". It uses the Transfer-Encoding HTTP header in place of the Content-Length header. Generally it is recommended to let HttpClient choose the most appropriate transfer encoding based on the properties of the HTTP message being transferred. It is possible, however, to inform HttpClient that chunk coding is preferred by setting this input to "true". Please note that HttpClient will use this flag as a hint only. This value will be ignored when using HTTP protocol versions that do not support chunk coding, such as HTTP/1.0. This setting is ignored for multipart post entities.\nDefault value\: \nValid values\: true, false\n    method - The HTTP method used. This is a required input.\n\nOutputs\n    returnResult - This will contain the response entity (unless "destinationFile" is specified). In case of an error this output will contain the error message.\n    exception - In case of success response, this result is empty. In case of failure response, this result contains the java stack trace of the runtime exception.\n    statusCode - The HTTP status code.\nFormat\: 1xx (Informational - Request received, continuing process), 2xx (Success - The action was successfully received, understood, and accepted), 3xx (Redirection - Further action must be taken in order to complete the request), 4xx (Client Error - The request contains bad syntax or cannot be fulfilled), 5xx Server Error - The server failed to fulfil an apparently valid request)\nExamples\: 200, 404\n    finalLocation - The final location after redirects.\nFormat\: URL\n    responseHeaders - The list containing the headers of the response message, separated by newline.\nFormat\: According to HTTP standard for headers (RFC 2616).\n    protocolVersion - The HTTP protocol version.\nExamples\: HTTP/1.1\n    reasonPhrase - The reason phrase from the origin HTTP response. This depends on the status code and are according to RFC 1945 and RFC 2048\nExamples\: (HTTP 1.0)\: OK, Created, Accepted, No Content, Moved Permanently, Moved Temporarily, Not Modified, Bad Request, Unauthorized, Forbidden, Not Found, Internal Server Error, Not Implemented, Bad Gateway, Service Unavailable Values (HTTP 1.1)\: Continue, Temporary Redirect, Method Not Allowed, Conflict, Precondition Failed, Request Too Long, Request-URI Too Long, Unsupported Media Type, Multiple Choices, See Other, Use Proxy, Payment Required, Not Acceptable, Proxy Authentication Required, Request Timeout, Switching Protocols, Non Authoritative Information, Reset Content, Partial Content, Gateway Timeout, Http Version Not Supported, Gone, Length Required, Requested Range Not Satisfiable, Expectation Failed\n    returnCode - The returnCode of the operation\: 0 for success, -1 for failure.\n\nResponses\n    success - The operation completed without a runtime exception. So it will go to success for any http codes even those in the 400-599 range.\n    failure - A runtime exception occurred. This may be due to incorrectly formated inputs (authType, contentType, headers, method, proxy, queryParams, requestCharacterSet, responseCharacterSet, truststore, url), or failed ntlm or Kerberos authentication.\n\nNotes\nThe "formParams" input takes precedence, then the input "body" and lastly the input "sourceFile". All of these are the body entity of a HTTP post request. Only one of them is included in the actual http post request, as follows\: If formParams is used, then body and sourceFile are ignored, else if body is used, sourceFile is ignored, else sourceFile is used.\n</pre>\n
59797098-8af2-4967-9319-ebeb402a2eff.description=<pre>\nThis workflow requests the life cycle engine to execute and take the given service component and it's childs to the deployed state.\n\nInputs-\ncomponentId \u2013 Service component id\nserviceInstanceId - Service Instance Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
59797098-8af2-4967-9319-ebeb402a2eff.f5bff021-b3f3-4090-8dcf-d6fc1fc27290.prompt=User Identifier
59797098-8af2-4967-9319-ebeb402a2eff.f7a7570e-c53d-4266-9e13-ebf5a2ebae9f.description=<pre>This is a soft copy of 'Http Client' customized for the PUT method (the input 'method'\='PUT' should not be changed). Check the linked 'Http Client' operation.\n\nInputs\n    url - The web address to make the request to. This must be a standard URL as specified in RFC 3986. This is a required input.\nFormat\: scheme\://domain\:port/path?query_string\#fragment_id\nExamples\: https\://[fe80\:\:1260\:4bff\:fe49\:42fc]\:8080/my/path?key1\=val1&key2\=val2\#my_fragment\n    authType - The type of authentication used by this operation when trying to execute the request on the target server. The authentication is not preemptive\: a plain request not including authentication info will be made and only when the server responds with a 'WWW-Authenticate' header the client will send required headers. If the server needs no authentication but you specify one in this input the request will work nevertheless. The client cannot choose the authentication method and there is no fallback so you have to know which one you need. If the web application and proxy use different authentication types, these must be specified like in the Example model. \nDefault value\: basic\nValid values\: basic, digest, ntlm, kerberos, any, anonymous, "" or a list of valid values separated by comma.\nExample\: basic,digest\n    username - The user name used for authentication. For NTLM authentication, the required format is 'domain\\user' and if you only specify the 'user' it will append a dot like '.\\user' so that a local user on the target machine can be used. In order for all authentication schemes to work (except Kerberos) username is required.\n    password - The password used for authentication.\n    preemptiveAuth - If this field is 'true' authentication info will be sent in the first request. If this is 'false' a request with no authentication info will be made and if server responds with 401 and a header like WWW-Authenticate\: Basic realm\="myRealm" only then the authentication info will be sent.\nDefault value\: true\nValid values\: true, false\n    proxyHost - The proxy server used to access the web site.\n    proxyPort - The proxy server port. Default value\: 8080. Valid values\: -1, and positive integer values. When the value is '-1' the default port of the scheme, specified in the 'proxyHost', will be used.\n    proxyUsername - The user name used when connecting to the proxy. The 'authType' input will be used to choose authentication type. The 'Basic' and 'Digest' proxy authentication type are supported.\n    proxyPassword - The proxy server password associated with the proxyUsername input value.\n    trustAllRoots - Specifies whether to enable weak security over SSL/TSL. A certificate is trusted even if no trusted certification authority issued it.\nDefault value\: false\nValid values\: true, false\n    x509HostnameVerifier - Specifies the way the server hostname must match a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate. The hostname verification system prevents communication with other hosts other than the ones you intended. This is done by checking that the hostname is in the subject alternative name extension of the certificate. This system is designed to ensure that, if an attacker(Man In The Middle) redirects traffic to his machine, the client will not accept the connection. If you set this input to "allow_all", this verification is ignored and you become vulnerable to security attacks. For the value "browser_compatible" the hostname verifier works the same way as Curl and Firefox. The hostname must match either the first CN, or any of the subject-alts. A wildcard can occur in the CN, and in any of the subject-alts. The only difference between "browser_compatible" and "strict" is that a wildcard (such as "*.foo.com") with "browser_compatible" matches all subdomains, including "a.b.foo.com". From the security perspective, to provide protection against possible Man-In-The-Middle attacks, we strongly recommend to use "strict" option.\nDefault value\: strict\nValid values\: strict, browser_compatible, allow_all\n    trustKeystore - The pathname of the Java TrustStore file. This contains certificates from other parties that you expect to communicate with, or from Certificate Authorities that you trust to identify other parties.  If the protocol (specified by the 'url') is not 'https' or if trustAllRoots is 'true' this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    trustPassword - The password associated with the TrustStore file. If trustAllRoots is false and trustKeystore is empty, trustPassword default will be supplied.\nDefault value\: changeit\n    keystore - The pathname of the Java KeyStore file. You only need this if the server requires client authentication. If the protocol (specified by the 'url') is not 'https' or if trustAllRoots is 'true' this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    keystorePassword - The password associated with the KeyStore file. If trustAllRoots is false and keystore is empty, keystorePassword default will be supplied.\nDefault value\: changeit\n    connectTimeout - The time to wait for a connection to be established, in seconds. A timeout value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout - The timeout for waiting for data (a maximum period inactivity between two consecutive data packets), in seconds. A socketTimeout value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\n    useCookies - Specifies whether to enable cookie tracking or not. Cookies are stored between consecutive calls in a serializable session object therefore they will be available on a branch level (same subflow, same lane). If you specify a non-boolean value, the default value is used.\nDefault value\: true\nValid values\: true, false\n    keepAlive - Specifies whether to create a shared connection that will be used in subsequent calls. If keepAlive is false, the already open connection will be used and after execution it will close it. The operation will use a connection pool stored in a GlobalSessionObject that will be available throughout the execution (the flow and subflows, between parallel split lanes).\nDefault value\: true\nValid values\: true, false\n    connectionsMaxPerRoute - The maximum limit of connections on a per route basis. The default will create no more than 2 concurrent connections per given route.\nDefault value\: 2\n    connectionsMaxTotal - The maximum limit of connections in total. The default will create no more than 2 concurrent connections in total.\nDefault value\: 20\n    headers - The list containing the headers to use for the request separated by new line (CRLF).The header name - value pair will be separated by "\:".\nFormat\: According to HTTP standard for headers (RFC 2616).\nExamples\: Accept\:text/plain\n    sourceFile - The absolute path of a file on disk from where to read the entity for the http request. This will be read using 'requestCharacterSet' or 'contentType' input (see below). This should not be provided for method\=GET, HEAD, TRACE\nExamples\: C\:\\temp\\sourceFile.txt\n    body - The string to include in body for HTTP POST operation. If both sourceFile and body will be provided, the body input has priority over sourceFile. This should not be provided for method\=GET, HEAD, TRACE\n    contentType - The content type that should be set in the request header, representing the MIME-type of the data in the message body.\nDefault value\: "" (empty)\nExamples\: "text/html", "application/x-www-form-urlencoded"\n    requestCharacterSet - The character encoding to be used for the HTTP request body. If contentType is empty, the requestCharacterSet will use the default value. If contentType will include charset (ex.\: "application/json; charset\=UTF-8"), the requestCharacterSet value will overwrite the charset value from contentType input. This should not be provided for method\=GET, HEAD, TRACE\nDefault value\: ISO-8859-1\n    destinationFile - The absolute path of a file on disk where to save the entity returned by the response. 'returnResult' will no longer be populated with the entity if this is specified. You should not use this for method\=HEAD or OPTIONS.\tExample\: C\:\\temp\\destinationFile.txt\n    responseCharacterSet - The character encoding to be used for the HTTP response. If responseCharacterSet is empty, the charset from the 'Content-Type' HTTP response header will be used. If responseCharacterSet is empty and the charset from the HTTP response Content-Type header is empty, the default value will be used. You should not use this for method\=HEAD or OPTIONS.\nDefault value\: ISO-8859-1\n    chunkedRequestEntity - Data is sent in a series of "chunks". It uses the Transfer-Encoding HTTP header in place of the Content-Length header.Generally it is recommended to let HttpClient choose the most appropriate transfer encoding based on the properties of the HTTP message being transferred. It is possible, however, to inform HttpClient that chunk coding is preferred by setting this input to "true". Please note that HttpClient will use this flag as a hint only. This value will be ignored when using HTTP protocol versions that do not support chunk coding, such as HTTP/1.0. This setting is ignored for multipart post entities.\nDefault value\: \nValid values\: true, false\n    method - The HTTP method used. This is a required input.\n\nOutputs\n    returnResult - This will contain the response entity (unless 'destinationFile' is specified). In case of an error this output will contain the error message.\n    exception - In case of success response, this result is empty. In case of failure response, this result contains the java stack trace of the runtime exception.\n    statusCode - The HTTP status code.\nFormat\: 1xx (Informational - Request received, continuing process), 2xx (Success - The action was successfully received, understood, and accepted), 3xx (Redirection - Further action must be taken in order to complete the request), 4xx (Client Error - The request contains bad syntax or cannot be fulfilled), 5xx Server Error - The server failed to fulfil an apparently valid request)\nExamples\: 200, 404\n    finalLocation - The final location after redirects.\nFormat\: URL\n    responseHeaders - The list containing the headers of the response message, separated by newline.\nFormat\: According to HTTP standard for headers (RFC 2616).\n    protocolVersion - The HTTP protocol version.\nExamples\: HTTP/1.1\n    reasonPhrase - The reason phrase from the origin HTTP response. This depends on the status code and are according to RFC 1945 and RFC 2048\nExamples\: (HTTP 1.0)\: OK, Created, Accepted, No Content, Moved Permanently, Moved Temporarily, Not Modified, Bad Request, Unauthorized, Forbidden, Not Found, Internal Server Error, Not Implemented, Bad Gateway, Service Unavailable\tValues (HTTP 1.1)\: Continue, Temporary Redirect, Method Not Allowed, Conflict, Precondition Failed, Request Too Long, Request-URI Too Long, Unsupported Media Type, Multiple Choices, See Other, Use Proxy, Payment Required, Not Acceptable, Proxy Authentication Required, Request Timeout, Switching Protocols, Non Authoritative Information, Reset Content, Partial Content, Gateway Timeout, Http Version Not Supported, Gone, Length Required, Requested Range Not Satisfiable, Expectation Failed\n    returnCode - The returnCode of the operation\: 0 for success, -1 for failure.\n\nResponses\n    success - The operation completed without a runtime exception. So it will go to success for any  http codes even those in the 400-599 range.\n    failure - A runtime exception occurred. This may be due to incorrectly formatted inputs (authType, contentType, headers, method, proxy, queryParams, requestCharacterSet, responseCharacterSet, truststore, url), or failed ntlm or Kerberos authentication.\n\nNotes\nCheck the "v2.0" folder description for more help.\n</pre>\n
598d8946-a314-4b99-9c44-0e31abf6574a.179fdfe9-db6a-4be9-8967-449c13bbe405.prompt=Datacenter to create in\:
598d8946-a314-4b99-9c44-0e31abf6574a.2201dc95-d629-400e-9aec-18b2d6cc28f0.prompt=VMWare Host\:
598d8946-a314-4b99-9c44-0e31abf6574a.232e2d85-d04c-407d-ae1f-5ba74e0c1f99.prompt=Password\:
598d8946-a314-4b99-9c44-0e31abf6574a.244e0ea2-636b-4433-87e1-b51131d8bb68.prompt=VMWare Host\:
598d8946-a314-4b99-9c44-0e31abf6574a.26fc246a-0059-4001-82e4-2af06437cfc5.prompt=Virtual Machine\:
598d8946-a314-4b99-9c44-0e31abf6574a.387f2a13-4ae9-4e5f-abc1-a1bfa98c6ac6.prompt=Virtual Machine name\:
598d8946-a314-4b99-9c44-0e31abf6574a.3be4315b-c693-4e58-ae29-a8602e2d9845.prompt=VMWare User\:
598d8946-a314-4b99-9c44-0e31abf6574a.3c3e5f56-8c01-4b1c-9532-e64f953d9eff.description=<pre>\nSearch for VMWare objects of type propsType and their properties (propsPathset) from a root object (if any) specified by propsRootObj and propsRootObj. Retrieve each object's properties one at a time from an initial search query ala SQL Query operation. Please see VMWare Integration Guide for more details.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\npropsType - VMWare properties type (Task, Datacenter, VirtualMachine, etc.) to filter on. Type of object results desired.\npropsPathset - Property filter's pathset, comma-delimited (eg. name, info.name, runtime.host)\npropsRootObjType - VMWare object type (eg. VirtualMachine, HostSystem, ComputeResource,ResourcePool,Alarm)\npropsRootObj - VMWare object ID\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nhardDisk - boot disk space allocated for the VM.\nipaddess - IPAddress of the VM\nmacaddres - Mac Address of the VM.\n\n\n</pre>
598d8946-a314-4b99-9c44-0e31abf6574a.3fd5c890-89b7-4882-9841-3a9affdd93a7.prompt=Target datacenter\:
598d8946-a314-4b99-9c44-0e31abf6574a.4a5b6db4-4c59-4a19-bb08-a64f33ffa3f1.prompt=User Identifier
598d8946-a314-4b99-9c44-0e31abf6574a.4f411bb5-e80d-437c-b641-0d5e1add0116.prompt=VMWare User\:
598d8946-a314-4b99-9c44-0e31abf6574a.50a766f7-713d-49f3-9386-4422bacde46c.prompt=VMWare Host\:
598d8946-a314-4b99-9c44-0e31abf6574a.51325471-174f-4fdd-be6c-5488b6f01e82.prompt=VMWare Host\:
598d8946-a314-4b99-9c44-0e31abf6574a.571ba66f-c54f-41f6-94a4-daae3696d9bf.prompt=Virtual Machine\:
598d8946-a314-4b99-9c44-0e31abf6574a.5961d0f9-08ae-45d3-aced-37bd5bac2f4e.prompt=Guest OS ID\:
598d8946-a314-4b99-9c44-0e31abf6574a.5f92ded5-3896-4c53-b8c7-87d4197f124e.prompt=VMWare User\:
598d8946-a314-4b99-9c44-0e31abf6574a.80742e85-daf9-4465-9835-1e0ef00c9af9.prompt=Folder (inventory) path in datacenter\:
598d8946-a314-4b99-9c44-0e31abf6574a.85cdaa4d-a6ac-4555-9cd7-01588bdffd85.prompt=Password\:
598d8946-a314-4b99-9c44-0e31abf6574a.9003a766-dd2b-4b58-8db5-6b7cfe46cf05.prompt=Datastore\:
598d8946-a314-4b99-9c44-0e31abf6574a.98b80174-fe8e-47b8-a3e4-c1e86a594e85.prompt=Password\:
598d8946-a314-4b99-9c44-0e31abf6574a.adfe2655-da40-4d12-a7ba-f728cc6fe1ec.prompt=Password\:
598d8946-a314-4b99-9c44-0e31abf6574a.cea71c58-9967-4999-b85e-ce369376d6f2.description=<pre>\nThis workflow will generate hostname based on subscription name and uuid. 20 charactes from subscription and 15 characters from uuid are appended to create unique id. For Windows  15 characters from uuid are parsed to create the hostname\n\nInputs\:\n\nsubscriptionId\t- Subscription ID\nuuid\t\t- UUID of server component Id\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\n\n\nReturns\nObjectId \t- Returns hostname\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
598d8946-a314-4b99-9c44-0e31abf6574a.dec7f7cf-5cf6-4604-b65d-0fa3d2cdfeba.prompt=Guest OS ID\:
598d8946-a314-4b99-9c44-0e31abf6574a.description=<pre>\nProvision a  Simple Vcenter Linux VM from a VM template. \n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
598d8946-a314-4b99-9c44-0e31abf6574a.f6e84062-ed94-4030-b6b7-a1bc2fc68020.prompt=Datastore\:
598d8946-a314-4b99-9c44-0e31abf6574a.f8b26bd1-596f-42c9-a664-143d29e26ac2.prompt=Folder (inventory) path in datacenter\:
5d9d088c-f618-437e-85d2-c3a308c728d6.09fdd194-27ad-4e5d-9d83-70e5b64d0328.description=<pre>Retrieves a value from a list.\n\nInputs\:\nlist - A list to get the value from.\ndelimiter - the delimiter that separates values in the list.\nindex - the index of the value (Starting at 0) to retrieve from the list, or end for the last element, or end-1 for the second to last element.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nThe value read from the list.</pre>
5d9d088c-f618-437e-85d2-c3a308c728d6.0bba6f83-8d37-4cfd-82a4-819e40d4f108.prompt=User Identifier
5d9d088c-f618-437e-85d2-c3a308c728d6.15e5bbbf-cd60-4a46-afe1-117a2126fd65.prompt=User Identifier
5d9d088c-f618-437e-85d2-c3a308c728d6.16b7b74d-5989-4f42-8fb5-0659bab649c3.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
5d9d088c-f618-437e-85d2-c3a308c728d6.20bc402e-b542-4d90-aed1-d993ec05be93.prompt=Process Instance ID
5d9d088c-f618-437e-85d2-c3a308c728d6.23fd8513-c804-41e2-b1de-4e74d368282c.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
5d9d088c-f618-437e-85d2-c3a308c728d6.2d5bbab1-ee66-4909-aacc-85aaa3484794.prompt=Enter a value for serviceInstanceId
5d9d088c-f618-437e-85d2-c3a308c728d6.2dfe7a65-8202-4939-aeb9-dc5d2199d9cd.prompt=Enter list of values separated by delimiter\:
5d9d088c-f618-437e-85d2-c3a308c728d6.36c2028b-0eb1-4a64-ab9d-bbde2c976568.prompt=Process Instance ID
5d9d088c-f618-437e-85d2-c3a308c728d6.3f935037-f808-4d3d-ab2c-8b551fae9c8c.prompt=Enter a value for value1
5d9d088c-f618-437e-85d2-c3a308c728d6.5567c3a9-8d33-4af4-8ec2-57baa64140fd.prompt=User Identifier
5d9d088c-f618-437e-85d2-c3a308c728d6.57177e92-8a77-45c1-8406-923d04f547d2.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
5d9d088c-f618-437e-85d2-c3a308c728d6.5c5c050d-5ece-48a6-b084-1d989ca75d3b.prompt=Process Instance ID
5d9d088c-f618-437e-85d2-c3a308c728d6.7bf24378-53d7-492f-8f6a-56e1dc30b348.prompt=Enter a value for serverGrpId
5d9d088c-f618-437e-85d2-c3a308c728d6.7f142ab3-e7ef-4b10-84a1-2c89707cf8e5.prompt=Enter a value for list
5d9d088c-f618-437e-85d2-c3a308c728d6.7f8cf952-c731-4dc0-8067-7befc91fd589.prompt=Enter a value for index
5d9d088c-f618-437e-85d2-c3a308c728d6.8b17c52d-c051-499e-b04b-645beec7a776.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
5d9d088c-f618-437e-85d2-c3a308c728d6.8bc64a08-5249-48d1-b2e4-703e9a7114ad.prompt=Enter a value for max
5d9d088c-f618-437e-85d2-c3a308c728d6.9f48e3e1-49d3-4319-a6e6-6f1fd422c062.description=<pre>Checks if a number or word is greater than another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 > value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
5d9d088c-f618-437e-85d2-c3a308c728d6.ab8b03a9-0690-4538-9cf2-a5afa848b901.prompt=Process Instance ID
5d9d088c-f618-437e-85d2-c3a308c728d6.c1036dce-b00c-4db1-b4e2-5a94cf88a34c.prompt=Enter a value for serverId
5d9d088c-f618-437e-85d2-c3a308c728d6.c86940c9-8c9e-49bb-9918-73bd2d84562f.prompt=User Identifier
5d9d088c-f618-437e-85d2-c3a308c728d6.de02e091-9f1e-4bf6-817c-2bd41108df25.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
5d9d088c-f618-437e-85d2-c3a308c728d6.description=<pre>\nRemove a Server from the Server Group. Random Server will be selected from the Server Group.\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>   
5d9d088c-f618-437e-85d2-c3a308c728d6.e08e354a-8d38-4913-8dd1-aa2973f77df6.description=<pre>Generates a random number.\n\nInputs\:\nmax - The maximum number that can be returned.\nmin - The minimum number that can be returned.\n\nResponses\:\nsuccess - The operation completed Successfully.\nfailure - Something went wrong.\n\nReturns\:\nA random number between max and min (inclusive)</pre>
5d9d088c-f618-437e-85d2-c3a308c728d6.e56871a4-b790-4f81-a0ca-e97d8baf6b45.prompt=Enter a value for userIdentifier
5d9d088c-f618-437e-85d2-c3a308c728d6.e9565ff8-ba78-4c0a-acf8-0bdbf74c2c36.description=<pre>Returns the length of the list.\n\nInputs\:\ndelimiter - The list delimiter.\nlist - The list to be processed\n\nResponses\:\nsuccess - The operation completed Successfully.\nfailure - Something went wrong.\n\nReturns\:\nThe length of the list.</pre>
5d9d088c-f618-437e-85d2-c3a308c728d6.f8f5f392-d48a-4340-97dd-85713c898ec9.prompt=Enter a value for serverCountBuffer
5de4dc3a-8eb7-4cd4-968e-aca95659e033.2c239a76-a5eb-4846-b0f4-f46567050458.description=<pre>Checks if a number or word is equal to another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 \=\= value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
5de4dc3a-8eb7-4cd4-968e-aca95659e033.4245aca3-6749-4e0f-a373-25ffe4ae9899.description=<pre>Checks if a number or word is greater than or equal to another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 >\= value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
5de4dc3a-8eb7-4cd4-968e-aca95659e033.7801ed05-e2b8-4835-8d6f-893642f71617.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
5de4dc3a-8eb7-4cd4-968e-aca95659e033.94c77f36-8d3f-4660-a156-85e38e4d71d6.prompt=Enter a value for value1
5de4dc3a-8eb7-4cd4-968e-aca95659e033.a2ca27d7-1076-42c1-990f-7758039fb863.prompt=Enter a value for value1
5de4dc3a-8eb7-4cd4-968e-aca95659e033.c5290680-ac07-4c20-a303-147c71e813cd.description=<pre>Checks if a number or word is greater than or equal to another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 >\= value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
5de4dc3a-8eb7-4cd4-968e-aca95659e033.description=<pre>This flow validates the CPU ad memory for valid inputs.\n\nInputs\:\ncpuCount\t\t\: Number of CPUs\t\nmemoryInMb\t\t\: Memory in MB\n\n\nResponse\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n</pre>
5de4dc3a-8eb7-4cd4-968e-aca95659e033.e9f516b6-925d-427d-828d-510a5b1500d0.prompt=Enter a value for value1
62441cef-044c-4a80-af6f-5e06d175c47c.1ba0e27e-fa8e-453e-adee-9173360ba9f7.prompt=User Identifier
62441cef-044c-4a80-af6f-5e06d175c47c.3c7b8f33-4946-4bd7-9e2c-75da3789ef4b.prompt=User Identifier
62441cef-044c-4a80-af6f-5e06d175c47c.4336266b-f25c-40e3-9687-b876e885b862.prompt=Process Instance ID
62441cef-044c-4a80-af6f-5e06d175c47c.645099b9-aa0f-4808-b8ff-e42883cbc74c.prompt=Process Instance ID
62441cef-044c-4a80-af6f-5e06d175c47c.9bb1d89c-3a46-4195-9775-e40daaf7a518.prompt=User Identifier
62441cef-044c-4a80-af6f-5e06d175c47c.9f3f32cb-dc67-443c-abf2-aab93a80b4b5.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
62441cef-044c-4a80-af6f-5e06d175c47c.dd8cabb4-ec6a-46e5-b3d5-0fa3677557be.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
62441cef-044c-4a80-af6f-5e06d175c47c.e678c1a1-371f-46fb-b764-02768ba0f949.description=<pre>\nThis workflow gets details of the Resource Pool artifact.\n\nInputs-\nresourcePoolId \t- Resource Pool ID\nuserIdentifier  \t- User Identifier id\nresourceType \t\u2013 Resource Type For eg. CPU,MEMORY etc\nauthType \t\t- The authentication type that this operation uses when trying to execute the request on the target server.\n\t\tvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\n\t\tDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile \t- The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout \t\t- The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite \ttimeout.Default value\: 0.\nuseCookies \t\t- If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy \t\t- A proxy to use when accessing the web site.\nproxyPort \t\t- The port on the proxy to connect to.\nproxyUsername\t - The username to use when connecting to the proxy.\nproxyPassword\t - The password to use when connecting to the proxy.\nencodeURL\t\t - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent\t\t - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots\t\t - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore\t\t - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword \t- Password to unlock the keystore.\ntrustKeystore\t - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword\t - Password to unlock the truststore.\n\nOutputs-\ndocument  \t\t- returned XML document from API\nproviderId\t\t- Provider Id of the Resource Pool\npoolReference\t- Pool Reference Name\navailabilityIndicator\t- Availability Indicator of the resource type\nusedByCSA\t\t- resource value consumed by CSA\nunit\t\t- Unit of the resouce \navailabletoCSA\t- Total resource available to CSA\n</pre>
62441cef-044c-4a80-af6f-5e06d175c47c.e6bd1926-6229-44fe-af0a-7c7a1b251184.description=<pre>\nThis workflow requests the life cycle engine to execute and take the given service component and it's childs to the deployed state.\n\nInputs-\ncomponentId \u2013 Service component id\nserviceInstanceId - Service Instance Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
63c42931-b221-4cb1-9aa4-36afda8d5617.0ac012b6-433a-4392-932e-947e73ffc237.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
63c42931-b221-4cb1-9aa4-36afda8d5617.a23e1ac0-7434-416b-8c2e-aabc6f0bf591.prompt=User Identifier
63c42931-b221-4cb1-9aa4-36afda8d5617.description=<pre>\nStart the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.125ecf26-7b39-4a04-b235-f638eb6b7bc5.description=647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.125ecf26-7b39-4a04-b235-f638eb6b7bc5.description
647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.14faa17d-da01-492a-a82f-af6f77fd99a4.description=647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.14faa17d-da01-492a-a82f-af6f77fd99a4.description
647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.22408713-b3de-42e9-8a6c-8c9e952048c9.description=647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.22408713-b3de-42e9-8a6c-8c9e952048c9.description
647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.262dbac4-7c52-4f54-9fb1-6ba89d3751a7.description=<pre> This flow will list all the virtual machines  in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n\nResponses\:\n    success - The operation completed successfully. It will return the list of clusters.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.2d9869d8-64cc-4932-8061-5a4570f1b686.description=647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.2d9869d8-64cc-4932-8061-5a4570f1b686.description
647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.3ef67c37-2190-4d99-a5be-9c5187f76d48.description=647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.3ef67c37-2190-4d99-a5be-9c5187f76d48.description
647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.60de86b8-cf3a-4859-b987-3429ed3e0dea.description=647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.60de86b8-cf3a-4859-b987-3429ed3e0dea.description
647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.b721d214-0336-4809-bebb-6d465efe3250.description=647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.b721d214-0336-4809-bebb-6d465efe3250.description
647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.cba77822-752c-4e4f-943f-ff2f802a4604.description=647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.cba77822-752c-4e4f-943f-ff2f802a4604.description
647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.description=<pre> This flow will list all the virtual machines in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    datacenter - Name of the datacenter.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of virtual machines.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.f867d87d-d6c7-46a8-8db2-c11b0cedd95c.description=647ac964-2a58-4e0d-a3ec-d2e1df4aed8d.f867d87d-d6c7-46a8-8db2-c11b0cedd95c.description
66f5d9b8-9a45-4843-8901-bce3f0a33df2.0de83e93-1ee2-4fc7-a0ea-906fbaebfb90.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
66f5d9b8-9a45-4843-8901-bce3f0a33df2.178d5c8a-b79c-441d-bb0f-e5f0a7abd825.description=\nInputs\:\n\nhost -  vCenter DNS name/IP Address\nusername - vCenter user\npassword - vCenter user password\nport - vCenter port\nprotocol - vCenter protocol\nhypervisorName - Hypervisor DNS name/IP Address\ndataStore - Datastore of the hypervior\ndatacenterName - Datacenter name\nhostname - VM Server name\ntemplateReference -  VM Template name\nosType -  OS Type of the template\nCPUs - CPU Count to be assigned\nMemory -  Memory Size to be assigned\n\n\nResults\:\n\nvmId - VM Identifies of the created VM\nipAddress - IP Address of the created VM\nmacAddress - MAC Address of the created VM\n\n\n\n\n
66f5d9b8-9a45-4843-8901-bce3f0a33df2.218bdb96-9277-4d32-8243-907e9937117a.description=<pre>\nThis workflow will generate hostname based on subscription name and uuid. 20 charactes from subscription and 15 characters from uuid are appended to create unique id. For Windows  15 characters from uuid are parsed to create the hostname\n\nInputs\:\n\nsubscriptionId\t- Subscription ID\nuuid\t\t- UUID of server component Id\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\n\n\nReturns\nObjectId \t- Returns hostname\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
66f5d9b8-9a45-4843-8901-bce3f0a33df2.341db9cb-b842-4da4-9084-4b54f8acd6cf.prompt=VMWare User\:
66f5d9b8-9a45-4843-8901-bce3f0a33df2.61ba0373-fa79-49c8-9ac7-e887784b89c5.prompt=Password\:
66f5d9b8-9a45-4843-8901-bce3f0a33df2.6f9a0e9a-f43e-46f8-b814-9514dace415b.prompt=VMWare Host\:
66f5d9b8-9a45-4843-8901-bce3f0a33df2.b3c826ac-b266-444d-b39f-bfa05cbc454b.prompt=User Identifier
66f5d9b8-9a45-4843-8901-bce3f0a33df2.b97c0305-9f98-47b8-936a-2ee2447a5274.prompt=Target datacenter\:
66f5d9b8-9a45-4843-8901-bce3f0a33df2.description=<pre>\nProvision a  Simple Vcenter Linux VM from a VM template. \n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.024cdff6-26a2-4a18-895c-069dcbe0f792.prompt=Enter a value for array
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.075089b7-3085-4c47-a992-2e6a55b4884b.prompt=Datacenter\:
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.090a1549-bf01-4abe-bfa7-f5e820995eff.description=<pre>Retrieves information about a guest os running in a virtual machine. VM tools must be running on the guest to retrieve this information.\n\nInputs\:\n    host - VMware vCenter, ESX or ESXi host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\n    vmIdentifierType - Virtual machine identifier type \nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmDatacenter - Virtual machine's datacenter.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\nResults\:\n    returnResult - This is the primary output.  Descriptive result of the operation.  Reason for error on failure.\n    state - Running state of the guest operating system.   Possible values\: running, shuttingdown, resetting, standby, notrunning, unknown\n    hostname - Hostname of the guest according to the guest operating system.\n    ipAddress - Primary IP address of the guest according to the guest operating system.  Example value\: 10.11.22.33\n    guestOsId - Guest operating system identifier (short name).  Example value\: "windows7Server64Guest"\n    guestOsDescription - Guest operating system full name.  Example value\: "Microsoft Windows Server 2008 R2 (64-bit)"\n    guestFamily - Guest operating system family.  Example value\: "WindowsGuest "\n    guestNicInfo - A json array of json objects describing the network interfaces of the guest.  Each json object has three keys\: \nmacaddress - Mac address of the guest nic.  Example value\: 00\:50\:56\:87\:01\:93\nipAddresses - A json array of ip addresses assigned to the nic.  Example value\: ["fe80\:\:9802\:e33\:4e2\:2caf%15","16.93.30.83"]\nnetwork - The name of the network port group the nic is attached to.\n    guestDiskInfo - A json array of json objects describing the disks attached to the guest.  Each json object has three keys\:\ndiskPath - The mount point of the disk on the guest.  Example value\: "C\:\\"\ncapacity - Size of the disk in bytes.\nfreespace - Amount of freespace on the disk in bytes. \n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.1051a012-d68f-41c2-8325-b3f15641a33d.prompt=VMWare Host\:
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.1174ec7b-43e1-4255-9396-a6532342aa7b.prompt=VMWare User\:
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.20d18404-8c92-4f73-9bb0-95d11b692675.prompt=Identify VM by\:
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.22f9e905-829d-4995-a8bb-08a2313dcda6.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.29449be1-85f7-4642-ac08-eca3a59ee0bd.description=<pre>Retrieves information about a guest os running in a virtual machine. VM tools must be running on the guest to retrieve this information.\n\nInputs\:\n    host - VMware vCenter, ESX or ESXi host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\n    vmIdentifierType - Virtual machine identifier type \nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmDatacenter - Virtual machine's datacenter.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\nResults\:\n    returnResult - This is the primary output.  Descriptive result of the operation.  Reason for error on failure.\n    state - Running state of the guest operating system.   Possible values\: running, shuttingdown, resetting, standby, notrunning, unknown\n    hostname - Hostname of the guest according to the guest operating system.\n    ipAddress - Primary IP address of the guest according to the guest operating system.  Example value\: 10.11.22.33\n    guestOsId - Guest operating system identifier (short name).  Example value\: "windows7Server64Guest"\n    guestOsDescription - Guest operating system full name.  Example value\: "Microsoft Windows Server 2008 R2 (64-bit)"\n    guestFamily - Guest operating system family.  Example value\: "WindowsGuest "\n    guestNicInfo - A json array of json objects describing the network interfaces of the guest.  Each json object has three keys\: \nmacaddress - Mac address of the guest nic.  Example value\: 00\:50\:56\:87\:01\:93\nipAddresses - A json array of ip addresses assigned to the nic.  Example value\: ["fe80\:\:9802\:e33\:4e2\:2caf%15","16.93.30.83"]\nnetwork - The name of the network port group the nic is attached to.\n    guestDiskInfo - A json array of json objects describing the disks attached to the guest.  Each json object has three keys\:\ndiskPath - The mount point of the disk on the guest.  Example value\: "C\:\\"\ncapacity - Size of the disk in bytes.\nfreespace - Amount of freespace on the disk in bytes. \n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.310df0e3-9333-433e-a97c-9b7a89a48f75.prompt=Number of seconds to sleep\:
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.312ba4ec-e939-4fc0-b92a-f111ad9f6e10.prompt=Password\:
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.4f7655a6-6176-4d22-aaa2-a6502c0a6994.prompt=VMWare Host\:
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.5a5def90-273a-4dd9-b3ba-35eef391a206.prompt=Password\:
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.6b360109-5422-46de-85e0-84acf7074874.description=<pre>Sleeps for the number of seconds specified in the input.\n\nInputs\:\nseconds - The number of seconds to sleep.\n\nResponses\:\nsuccess - Slept for the number of seconds given as input.\nfailure - Was unable to sleep for some reason.\n</pre>
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.6d189b03-045a-4a12-86be-29dfb7aad90a.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.74ec41b2-c0de-4575-ab3a-6c82d9cb004f.prompt=Enter a value for array
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.772009e4-2107-41db-b799-7276943db778.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.77d7ccf5-2803-4d84-890a-63726149c9df.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.7c71c009-6247-4431-9ef7-910cabb465a9.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.85b9a1b9-6366-4d63-9c69-1f30da038dd2.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.872486c9-1a18-42a6-8b17-8f08c93c2558.description=<pre>Determines the number of elements in the given JavaScript array.  If an element\nis itself another JavaScript array, it only counts as 1 element; in other\nwords, it will not expand and count embedded arrays.  Null values are also\nconsidered to be an element.\n\nExamples\:\n    The size of [ "apple", "banana" ] is 2.\n\n    The size of [ "apple", "pencil", [ 0, 3, 5, -199 ] ] is 3.\n\n    The size of [ "apple", null, "banana", null ] is 4.\n\n    The size of [] is 0.\n\nThe description of the enclosing folder describes the JSON format with examples,\nand the JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   array\n      The JavaScript array whose elements will be counted.  The operation will\n      return a failure if the array is not a JavaScript array; a normal OO list\n      is NOT a JavaScript array.\n\nResponses\n\n   success\n      The array is a valid JavaScript array, and the Result output will be\n      populated with the count of elements in the array.\n\n   failure\n      The array input does not contain a valid JavaScript array.  Result\n      will contain a message to that effect.  This will occur if the input\n      array is not a valid JavaScript array.  For example, if presented with a\n      common list value such as a,b,c it will fail because it lacks the\n      enclosing brackets and the quotes around each string element.  You may\n      wish to use a tool such as http\://www.jsonlint.com/ to help diagnose\n      problems with JavaScript Object Notation.\n\nOutputs\n\n   Result\n      The number of elements in the array.  Elements that are themselves arrays\n      only count as a single element.\n</pre>
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.8e4207fc-e177-46fa-923b-338a75062693.description=<pre>Useful Op to keep a running results.\nTakes a string input (resultText) and appends this to a global context key of "runningResults". As a result, the context key whose name is in the keyName input will be appended with the string from the input resultText.\n\nInput Parameters\:\nkeyName - name of context key to append to\nresultText - string input to append\ndelimiter - (leave blank for none) the delimiter to put between what is already in keyName before appending resultText\n\nResponses\:\nsuccess - assigned the context variable\n\nReturns\:\nThe the value of the context variable it appended to.\n\nContext\:\nrunningResults\n\nScriptlet Example\:\ncurrentResults \= scriptletContext.get("runningResults");\n\nif (currentResults \=\= null) {\n   currentResults \= resultText;\n} else {\n   currentResults +\= resultText;\n}\n\n\nscriptletContext.putGlobal("runningResults", currentResults);</pre>
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.971c9f0a-0950-4da6-8ee3-a81b22fc7510.description=<pre>\nIterates through a JavaScript array, i.e. a string value that contains an array\nin the JavaScript Object Notation format (JSON).  Each time that this operation\nis called it places the value of the current array element into the Result\noutput and advances the iterator to the array element.\n\nThe JSON format is basically a way to encode arrays and other values using\nJavaScript notation.  For arrays, this means that the values need to be\nsurrounded by square brackets, and each element in the array can be a string\n(which needs surrounding quotes), a number, true, false, null, or a nested array\nor object.  Commas are always used as delimiters between array elements, and\nthey can appear within string elements without confusion.  For example, the\nfollowing is a simple JSON array\:\n   [ "cat", "dog", "horse" ]\nNote that the equivalent OO list would be \n   cat,dog,horse\nThe benefits of JavaScript arrays are that delimiters are fixed and cannot be\nconfused with data, and that complex nesting of arrays and objects are\nsupported.  The description of the enclosing folder, /Library/Utility\nOperations/Container/JavaScript Objects has more examples, and the JSON format\nis described completely at http\://www.json.org.\n\nModifying the contents of the array during iteration is not generally supported,\nbut will be safe as long as the affected item(s) are beyond the current position\nof the iterator.  The iterator keeps track of where it is in the array by\nposition.  If items are added or removed to the list in a position preceding the\niterator, it may cause the iterator to return results that are not obvious.  For\nexample, if the array contains [ "a", "b", "c" ] and the iterator is positioned\non the second element, "b" and the first element is removed, then the iterator\nwill now be at the last element in the list, "c".\n\nThere is currently a limitation that a flow can only have one of these array\niterator steps active at a time without causing possible conflicts.  In other\nwords, if you need to iterate through a nested array, you will should use a\nsub-flow to process the inner array.  You may have two or more of these array\niterators in the same flow as long as each iterator reaches the end of its array\nbefore the next one begins.\n\nInputs\n\n   array\n      The JavaScript array that will be iterated through.  The operation will\n      return a failure if the array is not a JavaScript array; a normal OO list\n      is NOT a JavaScript array.\n\nResponses\n\n   has more\n      The iterator has not yet reached the end of the array. The Result output\n      will be populated with the value of the current element in the array, and\n      the iterator will advance to the next element in the array.\n\n   no more\n      The iterator has reached the end of the array, and there is no more data\n      to return.  The iterator will become undefined after this call, which\n      basically will reset it so that if called again, this operation will begin\n      another iteration at the beginning of the array.\n\n   failure\n      There was some error in iterating through the list, and the Result output\n      will contain information about the error.  This will occur if the input\n      array is not a valid JavaScript array.  For example, if presented with a\n      common list value such as a,b,c it will fail because it lacks the\n      enclosing brackets and the quotes around each string element.  You may\n      wish to use a tool such as http\://www.jsonlint.com/ to help diagnose\n      problems with JavaScript Object Notation.\n\nOutputs\n\n   Result\n      The current array element.  When incorporating this operation into a flow,\n      you should assign a meaningful result value from this field.  Note that\n      since JavaScript arrays may contain nested arrays or other objects, the\n      value returned in Result may also require further processing.\n\n</pre>\n
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.9beb9b87-2556-4718-8e95-bc094e85c5d0.prompt=Virtual Machine\:
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.9c3d4014-297b-42e2-b86f-3693ec697b34.prompt=Identify VM by\:
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.9d0c8393-6c9a-4257-a22a-fbe71178f3e4.prompt=Datacenter\:
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.b17f7ccd-c272-43a0-bc02-af4f0300bb29.prompt=Virtual Machine\:
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.b59f2787-9df8-4607-9d15-8e9b14330748.prompt=VMWare User\:
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.bdbb6b76-d69b-49c0-978d-780e20c60770.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.c452d6fd-62ff-401a-8dcd-a84869b72075.description=<pre>Checks if a number or word is equal to another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 \=\= value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.cb6e6e1e-81f2-40cf-b5b5-80282e2d7ed8.prompt=Enter a value for value1
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.cb7aeb57-e352-4a23-bbbf-dfbe1df4197e.description=Counts from one number to another number.\n\n<pre>\nInputs\:\nfrom - The number to start counting at.\nto - The number to count to.\nincrementBy - The number to increment by while counting. If unspecified this is 1. If you wanted to count 2,4,6,8 this would be 2.\nreset - If true, then the counter will restart counting from the beginning.\n\nNOTE\: These values must be between -9223372036854775808 and 9223372036854775807\n\nReturns\:\nThe number that was just counted.\n\nNote\: the primary result is resultString, Result can also be used. result (All lower case) should not be used as it is the response code.\n\nResponses\:\nhas more - Not yet done counting.\nno more - Done counting. This will only be returned once, then counting restarts.\nfailure - Something went wrong.\n</pre>
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.d23ee8e5-2647-4d9e-9275-cc65122a5f16.prompt=Enter a value for object
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.d2fae160-6a90-4d0f-9e7d-443063542009.description=<pre>\nThis operation waits for the number of seconds specified in the "seconds" input.\n\nInputs\:\n    seconds - The number of seconds to wait.\n\nResults\:\n    resultString \u2013 This is the primary output. It contains the "completed sleep" message if the operation completed successfully and an error message otherwise. \n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation completed unsuccessfully.\n</pre>
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.dccf5cd3-6571-4467-8e8b-2de29cf0127e.description=<pre>\nAccepts an object in the JavaScript Object Notation format (JSON) and\nreturns a value for the specified key.\n\nThe JSON format encodes objects as a set of unordered key/value pairs, which is\nsimilar to a structure or map in other programming languages.  For example,\n   { "city" \: "Palo Alto", \n     "state" \: "CA" }\nis an object with two elements one with the name "city" having the value "Palo\nAlto", and the other being the name "state" with the value "CA". This operation would \nreturn "Palo Alto" if user enters "city" as a key.\n\nIf the input object contains JSON array, array index can be used in the key input. For example, \n{ "location"\: [\n      {"city"\: "Roseville", "country"\: "United States"},\n      {"city"\: "Cluj", "country"\: "Romania"},\n      {"city"\: "Yehud", "country"\: "Israel"}]    \n}\nThe operation would return "Roseville" if user enters "location[0].city" as a key.\n\nJavaScript objects are useful for representing structured data, and are\nespecially when used within an array.  For example, an operation that retrieves\na set of incidents from an external system may return the entire list in one\narray of incident objects.  The description of the enclosing folder,\n/Library/Utility Operations/Container/JavaScript Objects has more examples, and\nthe JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   object\n      The JavaScript object.  \n      The operation will return a failure if it is not a JavaScript object.\n\n   key\n      The key in the object to get the value of.\n\nResponses\n\n   success\n      The value was successfully returned for the specified key. \n\n   failure\n      There was some error in processing the object, most likely because the\n      object is not in valid JavaScript Object Notation or the specified key does not exist in the object.  \n      You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with\n      JavaScript Object Notation.\n\nOutputs\n\n   The primary output will be the value for the specified key in the object.\n\nNote\n\n    If the value in JSON object is in scientific notation, the returned output will be converted to an equivalent decimal number. Ex, 2.9e+1 will be converted to 29.\n</pre>
681d3a51-2dfe-46e2-a14c-b4afcc2888f5.f2c6cea3-26de-4de5-a0c3-b49c1d773d3e.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
69cd6eef-86f1-4392-b548-3ac912b74beb.13f44e68-c73c-4213-83ac-82c7297441e7.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
69cd6eef-86f1-4392-b548-3ac912b74beb.588b1aed-ab6c-442c-889e-6fcad1249cb4.prompt=Enter a value for lockId
69cd6eef-86f1-4392-b548-3ac912b74beb.733001d7-5827-4124-9724-a2be45c07d57.description=Releases a lock with an id given by the value of the lockId input.\n\n<pre>\nInputs\:\n   lockId - the id of the lock, maximum 255 characters.\n\nResponses\:\n   success - the only response returned.\n\nResults\:\n   there are no results.\n\nNotes\:\n1) The operation only releases locks acquired by the current run. \n   It cannot release another run's locks.\n\n2) The operation succeeds whether or not there is a lock held \n   by the current run with the supplied id.\n</pre>
69cd6eef-86f1-4392-b548-3ac912b74beb.7493f5ea-3ba2-4699-bed4-9adee6f67048.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
69cd6eef-86f1-4392-b548-3ac912b74beb.f83e731c-73d3-4ab0-90eb-96d239fc5ed3.description=Attempts to acquire the specified lock, and sleeps until the lock is available.\n\n<pre>\nInputs\:\n   lockId - the id of the lock, maximum 255 characters.\n   timeout - The maximum number of seconds this flow will run for.\n  seconds - The number of seconds to sleep for between each attempt at acquiring the lock.\n\nResponses\:\n   success - if the lock has been successfully acquired.\n   failure - if the lock could not be acquired.\n\nResult\:\n   Code - 0 if the operation succeeds, 1 otherwise.\n\nNotes\:\n1) The locks acquired by this operation are not reentrant. This means that \n   once a lock is acquired by a run, all subsequent attempts at acquiring \n   the same lock by the same run (or any other run) will fail.\n\n2) Once a run terminates, all the locks that were acquired during its execution\n   are automatically released.\n</pre>
69cd6eef-86f1-4392-b548-3ac912b74beb.fe503341-5661-48e1-a47d-e82d377ea511.prompt=Enter a value for lockId
6a0d3474-27ff-4d1b-953a-5c0e68f3f469.03cbcfb9-e094-427c-be84-920cbc71a8f5.description=<pre>\nInsert an object into a JSON array, optionally specifying the position at which to insert the new object. \n\nThis Operation differes from the 'Add to Array' operation in that this one will try and validate the new element as\na JSON object, whereas 'Add to Array' will just wrap the element in quotes and treat it as a string. This means \nthat the element passed into this operation must be a valid JSON object, or the operation will fail. \n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n    element - The element to insert into the array. As noted above, this must be a valid JSON object or the operation will fail. It can be \n                    any valid JSON object; such as a number, string, an array, or a name/value pair list. Numbers can be entered as-is, strings\n                    must be wrapped in quotes, and objects must be formated correctly (see examples below for more info)\nValid values\: Any valid JSON object\nExamples\: 1 or "a string" or {"one"\:"two", "three"\:"four"} or [1,2,3]\n\n    index -The index in the array at which to insert the new element. If index is undefined, or index is equal to the length of the array \n               (one past the last element), the new element is placed at the end of the array. See the notes above for more information\n               on using negative numbers to specify array elements.\n               If the index is valid, the new element is inserted at that position, and all remaining elements are shifted one position to the right.\n\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\nDefault value\: undefined (insert the new element at the end of the array)\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array with the inserted element.\n\n</pre>
6a0d3474-27ff-4d1b-953a-5c0e68f3f469.3af5daff-7ab8-4fb0-9562-13c2a0ec00cd.prompt=6a0d3474-27ff-4d1b-953a-5c0e68f3f469.3af5daff-7ab8-4fb0-9562-13c2a0ec00cd.prompt
6a0d3474-27ff-4d1b-953a-5c0e68f3f469.915b82d7-8a7c-4ea7-93a9-fe11b8f990e0.prompt=6a0d3474-27ff-4d1b-953a-5c0e68f3f469.915b82d7-8a7c-4ea7-93a9-fe11b8f990e0.prompt
6a0d3474-27ff-4d1b-953a-5c0e68f3f469.description=<pre> This flow will list all the datacenters in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n\nResponses\:\n    success - The operation completed successfully. It will return the list of datacenters.\n    failure - Something went wrong. See returnResult for details.\n</pre>
6a0d3474-27ff-4d1b-953a-5c0e68f3f469.fe8f5cd9-b4e4-4a70-aa9c-b26a1bf227d9.description=<pre>\nThis operation adds a flow variable to the local context. The variable is available in the current flow and its child flows.\n\nInputs\:\n    keyName - The name of the flow variable to add.\n    myValue - The value to assign to the flow variable.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of "myValue" input field.\n\nResponses\:\n    success - The operation completed as stated in the description.\n\nNote\:\n   If a flow variable with the same name already exists, its value will be overwritten.\n</pre>
6bd74edd-2bdf-4a5e-86da-57befeebb023.041be1d9-86b4-4aa8-8d12-4c5ef3226c27.prompt=6bd74edd-2bdf-4a5e-86da-57befeebb023.041be1d9-86b4-4aa8-8d12-4c5ef3226c27.prompt
6bd74edd-2bdf-4a5e-86da-57befeebb023.3768f73f-3964-4fa0-9b46-7727cef5e52e.prompt=6bd74edd-2bdf-4a5e-86da-57befeebb023.3768f73f-3964-4fa0-9b46-7727cef5e52e.prompt
6bd74edd-2bdf-4a5e-86da-57befeebb023.562d40d1-01cc-4591-89b7-dd9c95525291.description=6bd74edd-2bdf-4a5e-86da-57befeebb023.562d40d1-01cc-4591-89b7-dd9c95525291.description
6bd74edd-2bdf-4a5e-86da-57befeebb023.6ac085ea-8d99-4291-88b0-a7fcc5f3e331.prompt=6bd74edd-2bdf-4a5e-86da-57befeebb023.6ac085ea-8d99-4291-88b0-a7fcc5f3e331.prompt
6bd74edd-2bdf-4a5e-86da-57befeebb023.91632622-1cc0-425b-b682-bee3491b7c51.description=6bd74edd-2bdf-4a5e-86da-57befeebb023.91632622-1cc0-425b-b682-bee3491b7c51.description
6bd74edd-2bdf-4a5e-86da-57befeebb023.972bf3ee-db06-4b69-b91f-064a9aa7184b.prompt=6bd74edd-2bdf-4a5e-86da-57befeebb023.972bf3ee-db06-4b69-b91f-064a9aa7184b.prompt
6bd74edd-2bdf-4a5e-86da-57befeebb023.9f166a92-efae-421a-8950-c16aeea73efd.prompt=6bd74edd-2bdf-4a5e-86da-57befeebb023.9f166a92-efae-421a-8950-c16aeea73efd.prompt
6bd74edd-2bdf-4a5e-86da-57befeebb023.aee8dcbd-a206-4a00-97ab-1759fb680188.description=6bd74edd-2bdf-4a5e-86da-57befeebb023.aee8dcbd-a206-4a00-97ab-1759fb680188.description
6bd74edd-2bdf-4a5e-86da-57befeebb023.b51001ce-bc11-47f3-9f2a-4b3dd3c222b7.prompt=6bd74edd-2bdf-4a5e-86da-57befeebb023.b51001ce-bc11-47f3-9f2a-4b3dd3c222b7.prompt
6bd74edd-2bdf-4a5e-86da-57befeebb023.b8bf4826-4f5d-44f9-8c02-e5e70f9e85d0.prompt=6bd74edd-2bdf-4a5e-86da-57befeebb023.b8bf4826-4f5d-44f9-8c02-e5e70f9e85d0.prompt
6bd74edd-2bdf-4a5e-86da-57befeebb023.c3c5dfcb-cd3d-4c43-923f-7f8b6be1b25c.prompt=6bd74edd-2bdf-4a5e-86da-57befeebb023.c3c5dfcb-cd3d-4c43-923f-7f8b6be1b25c.prompt
6bd74edd-2bdf-4a5e-86da-57befeebb023.c7123cf1-89aa-46bf-8cc9-9ec81b127000.prompt=6bd74edd-2bdf-4a5e-86da-57befeebb023.c7123cf1-89aa-46bf-8cc9-9ec81b127000.prompt
6bd74edd-2bdf-4a5e-86da-57befeebb023.description=<pre> This flow will list all the datastores in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    datacenter -  Name of the datacenter.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of datastores.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
6bd74edd-2bdf-4a5e-86da-57befeebb023.f32daec8-053c-41bb-aee6-652c99bb8a97.description=6bd74edd-2bdf-4a5e-86da-57befeebb023.f32daec8-053c-41bb-aee6-652c99bb8a97.description
6d2869d7-57fc-41fb-878a-b6ab4d661ea2.0d79e4ad-8b8c-4e7a-bf67-d57c0491e98b.prompt=6d2869d7-57fc-41fb-878a-b6ab4d661ea2.0d79e4ad-8b8c-4e7a-bf67-d57c0491e98b.prompt
6d2869d7-57fc-41fb-878a-b6ab4d661ea2.138cc3ba-fdd2-481b-b386-6f1cf8a26961.description=6d2869d7-57fc-41fb-878a-b6ab4d661ea2.138cc3ba-fdd2-481b-b386-6f1cf8a26961.description
6d2869d7-57fc-41fb-878a-b6ab4d661ea2.1f98c201-ca68-430c-83b5-3074cfcc4073.description=6d2869d7-57fc-41fb-878a-b6ab4d661ea2.1f98c201-ca68-430c-83b5-3074cfcc4073.description
6d2869d7-57fc-41fb-878a-b6ab4d661ea2.201b67ae-277c-464d-87c4-9d0b0c495159.description=6d2869d7-57fc-41fb-878a-b6ab4d661ea2.201b67ae-277c-464d-87c4-9d0b0c495159.description
6d2869d7-57fc-41fb-878a-b6ab4d661ea2.330d611f-e906-4ead-8fde-bc743fe50857.description=6d2869d7-57fc-41fb-878a-b6ab4d661ea2.330d611f-e906-4ead-8fde-bc743fe50857.description
6d2869d7-57fc-41fb-878a-b6ab4d661ea2.3896afe0-bb25-478b-9ef7-741fa8ce82a5.description=6d2869d7-57fc-41fb-878a-b6ab4d661ea2.3896afe0-bb25-478b-9ef7-741fa8ce82a5.description
6d2869d7-57fc-41fb-878a-b6ab4d661ea2.41ce914b-bf65-4089-82d3-2b8155643ab4.prompt=6d2869d7-57fc-41fb-878a-b6ab4d661ea2.41ce914b-bf65-4089-82d3-2b8155643ab4.prompt
6d2869d7-57fc-41fb-878a-b6ab4d661ea2.5063e699-dac4-4e95-a1b1-4f55f09925d1.prompt=6d2869d7-57fc-41fb-878a-b6ab4d661ea2.5063e699-dac4-4e95-a1b1-4f55f09925d1.prompt
6d2869d7-57fc-41fb-878a-b6ab4d661ea2.6e0cfd99-c60f-4e9b-8812-2bd52b2af41c.description=6d2869d7-57fc-41fb-878a-b6ab4d661ea2.6e0cfd99-c60f-4e9b-8812-2bd52b2af41c.description
6d2869d7-57fc-41fb-878a-b6ab4d661ea2.7c82ebc6-0664-48ff-8d8f-debda31e4aad.prompt=6d2869d7-57fc-41fb-878a-b6ab4d661ea2.7c82ebc6-0664-48ff-8d8f-debda31e4aad.prompt
6d2869d7-57fc-41fb-878a-b6ab4d661ea2.91f37bf5-5a0f-4633-8a0a-10e3aaac6254.description=6d2869d7-57fc-41fb-878a-b6ab4d661ea2.91f37bf5-5a0f-4633-8a0a-10e3aaac6254.description
6d2869d7-57fc-41fb-878a-b6ab4d661ea2.a79508cb-3300-48af-bff1-3d7a15aff4b4.prompt=6d2869d7-57fc-41fb-878a-b6ab4d661ea2.a79508cb-3300-48af-bff1-3d7a15aff4b4.prompt
6d2869d7-57fc-41fb-878a-b6ab4d661ea2.dd4fd2f0-b3d3-45cf-9925-0aaab223830c.prompt=6d2869d7-57fc-41fb-878a-b6ab4d661ea2.dd4fd2f0-b3d3-45cf-9925-0aaab223830c.prompt
6d2869d7-57fc-41fb-878a-b6ab4d661ea2.dd697999-857e-49c7-9b84-6e9303eeae40.prompt=6d2869d7-57fc-41fb-878a-b6ab4d661ea2.dd697999-857e-49c7-9b84-6e9303eeae40.prompt
6ee94ed7-b4a8-4454-b95c-00243f1b0fda.4942a84f-d464-42bc-b8a5-b78d7920ec48.description=d2c02c87-6e8b-45df-bf37-2a9fc95954ea.cb70d6b7-d3f4-4cce-9107-c616893dec7f.description
6ee94ed7-b4a8-4454-b95c-00243f1b0fda.7b6d1aed-dd68-435f-a6dc-a84a576a2624.description=<pre>Restart (interrupt power) to virtual machine.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nasync - Asynchronously perform the task (true, false).\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno action - The operation completed with no action performed.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
6ee94ed7-b4a8-4454-b95c-00243f1b0fda.83df35fc-233e-4f3f-a293-cd812464bd9b.description=Counts from one number to another number.\n\n<pre>\nInputs\:\nfrom - The number to start counting at.\nto - The number to count to.\nincrementBy - The number to increment by while counting. If unspecified this is 1. If you wanted to count 2,4,6,8 this would be 2.\nreset - If true, then the counter will restart counting from the beginning.\n\nNOTE\: These values must be between -9223372036854775808 and 9223372036854775807\n\nReturns\:\nThe number that was just counted.\n\nNote\: the primary result is resultString, Result can also be used. result (All lower case) should not be used as it is the response code.\n\nResponses\:\nhas more - Not yet done counting.\nno more - Done counting. This will only be returned once, then counting restarts.\nfailure - Something went wrong.\n</pre>
6ee94ed7-b4a8-4454-b95c-00243f1b0fda.cf37b4d4-aaa0-4759-8030-c79365b265c6.description=<pre>\nRetrieves the most recent event from a root object you specify using the objType and objId inputs, based on the event types you specify in the events input.\n\nInputs\: \nhost - The VMware host hostname or IP address.\nuser - The VMware username.\npassword - The VMware user's password. \nport - The Port to connect to the VMware server. \nprotocol - The connection protocol.The valid values are (http oand https). \ncloseSession - Specifies whether to close the internally kept VMwware Infrastructure API session when the operation completes. The valid values are (true and false).  \nevents-The list of event types, from which the event log for the specified events is created. (for example, VmPoweredOnEvent, VmRelocatedEvent, VmReconfiguredEvent, VmCreatedEvent, VmMigratedEvent, VmRenamedEvent). \nobjType - The type of Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Datacenter, or Datastore) on which to begin the search. \nobjId - The value of the reference (such as vm-123, datastore-123, or network-123) to use as a root object. \nlocaleLang - The locale language in which to format the createdTime result.(for example, en or ja). If you do not specify a value for this input, the default value of en is used.\nlocaleCountry - The locale country in which to format the createdTime result.(for example, en or ja). If you do not specify a value for this input, the default value of US is used.\n\nResponses\: \nsuccess - The operation completed successfully. \nfailure - Something went wrong or the required fields are not provided \nno more - There are no results to retrieve. \n\nReturns\: \nUserName - The name of the user who caused the event. \ncreatedTime - The time that the event was created. \nvm - The VirtualMachine object of the event. \nreturnResult - The UserName or reason for failure.\n</pre>
6ee94ed7-b4a8-4454-b95c-00243f1b0fda.description=<pre>\nRetrieves the most recent event from a root object you specify and compare that event with custom spec is completed or not using the objType and objId inputs, based on the event types you specify in the events input.\n\nInputs\: \nhost - The VMware host hostname or IP address.\nuser - The VMware username.\npassword - The VMware user's password. \nport - The Port to connect to the VMware server. \nprotocol - The connection protocol.The valid values are (http oand https). \ncloseSession - Specifies whether to close the internally kept VMwware Infrastructure API session when the operation completes. The valid values are (true and false).  \nevents-The list of event types, from which the event log for the specified events is created. (for example, VmPoweredOnEvent, VmRelocatedEvent, VmReconfiguredEvent, VmCreatedEvent, VmMigratedEvent, VmRenamedEvent). \nobjType - The type of Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Datacenter, or Datastore) on which to begin the search. \nobjId - The value of the reference (such as vm-123, datastore-123, or network-123) to use as a root object. \nlocaleLang - The locale language in which to format the createdTime result.(for example, en or ja). If you do not specify a value for this input, the default value of en is used.\nlocaleCountry - The locale country in which to format the createdTime result.(for example, en or ja). If you do not specify a value for this input, the default value of US is used.\n\nResponses\: \nsuccess - The operation completed successfully. \nfailure - Something went wrong or the required fields are not provided \nno more - There are no results to retrieve. \n\nReturns\: \nUserName - The name of the user who caused the event. \ncreatedTime - The time that the event was created. \nvm - The VirtualMachine object of the event. \nreturnResult - The UserName or reason for failure.\n</pre>
6ee94ed7-b4a8-4454-b95c-00243f1b0fda.f380826f-c5f3-4d30-8ced-a204e4eccd8c.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
70e2843a-943e-4f91-940b-6cd47bfa40a9.2db5b5b1-adaf-4bc3-9c58-1da2fd6feea2.description=<pre>Determines the number of elements in the given JavaScript array.  If an element\nis itself another JavaScript array, it only counts as 1 element; in other\nwords, it will not expand and count embedded arrays.  Null values are also\nconsidered to be an element.\n\nExamples\:\n    The size of [ "apple", "banana" ] is 2.\n\n    The size of [ "apple", "pencil", [ 0, 3, 5, -199 ] ] is 3.\n\n    The size of [ "apple", null, "banana", null ] is 4.\n\n    The size of [] is 0.\n\nThe description of the enclosing folder describes the JSON format with examples,\nand the JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   array\n      The JavaScript array whose elements will be counted.  The operation will\n      return a failure if the array is not a JavaScript array; a normal OO list\n      is NOT a JavaScript array.\n\nResponses\n\n   success\n      The array is a valid JavaScript array, and the Result output will be\n      populated with the count of elements in the array.\n\n   failure\n      The array input does not contain a valid JavaScript array.  Result\n      will contain a message to that effect.  This will occur if the input\n      array is not a valid JavaScript array.  For example, if presented with a\n      common list value such as a,b,c it will fail because it lacks the\n      enclosing brackets and the quotes around each string element.  You may\n      wish to use a tool such as http\://www.jsonlint.com/ to help diagnose\n      problems with JavaScript Object Notation.\n\nOutputs\n\n   Result\n      The number of elements in the array.  Elements that are themselves arrays\n      only count as a single element.\n</pre>
70e2843a-943e-4f91-940b-6cd47bfa40a9.4acdd63e-75d9-4f14-9180-b0ee7b7bd8bc.description=<pre>\nThis operation adds a flow variable to the local context. The variable is available in the current flow and its child flows.\n\nInputs\:\n    keyName - The name of the flow variable to add.\n    myValue - The value to assign to the flow variable.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of "myValue" input field.\n\nResponses\:\n    success - The operation completed as stated in the description.\n\nNote\:\n   If a flow variable with the same name already exists, its value will be overwritten.\n</pre>
70e2843a-943e-4f91-940b-6cd47bfa40a9.7fb46a39-911f-4212-b8ec-9cc5ff4772ad.description=<pre>\nAdds two numbers together\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe sum of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
70e2843a-943e-4f91-940b-6cd47bfa40a9.8572b3d2-106a-47f2-b5ce-d7e3ff3aa241.description=<pre>\nThis operation adds a flow variable to the local context. The variable is available in the current flow and its child flows.\n\nInputs\:\n    keyName - The name of the flow variable to add.\n    myValue - The value to assign to the flow variable.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of "myValue" input field.\n\nResponses\:\n    success - The operation completed as stated in the description.\n\nNote\:\n   If a flow variable with the same name already exists, its value will be overwritten.\n</pre>
70e2843a-943e-4f91-940b-6cd47bfa40a9.e1f5f925-57b9-479e-b768-6ad641c074c3.description=<pre>\nAdds two numbers together\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe sum of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
7612622f-afed-4124-b46b-38100bcd974b.460bf17b-b12c-4690-8b68-cbd2b71c846f.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
7612622f-afed-4124-b46b-38100bcd974b.4bcb2643-cf63-4897-a818-b0d2d36390da.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
7612622f-afed-4124-b46b-38100bcd974b.52efeeb8-1df2-4e5f-8a29-e0a2caa6ab6d.prompt=User Identifier
7612622f-afed-4124-b46b-38100bcd974b.57f925f2-ffe8-4653-b7ba-afe013efbe2f.description=Changes a VM's power state. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n vmPowerState - the desired power state (on / off etc)\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n serviceXml - xml representation of the server created in vCenter
7612622f-afed-4124-b46b-38100bcd974b.description=<pre>\nStop the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
7643bacf-9e28-4761-a82b-c3c395ca4481.1bd2d14d-a722-40c5-9330-83dab36cbb00.prompt=0d6e9bff-b751-4297-986e-d5a39ee9ad89.170c1c0e-1054-4f53-ba9c-d6fdd3327c66.prompt
7643bacf-9e28-4761-a82b-c3c395ca4481.3c0fbab1-daf7-456c-886d-c4d34e22e32b.prompt=0d6e9bff-b751-4297-986e-d5a39ee9ad89.bc904c43-f7e4-4f20-a028-24e72b402c6b.prompt
7643bacf-9e28-4761-a82b-c3c395ca4481.43ad879d-3d2c-410c-adf1-8242ca52feaa.prompt=0d6e9bff-b751-4297-986e-d5a39ee9ad89.e7f698f2-7610-446d-99ee-c44648fec098.prompt
7643bacf-9e28-4761-a82b-c3c395ca4481.596d442f-2483-415c-8e3f-943b21085569.description=<pre>Delete an existing snapshot of a virtual machine or all snapshots of a virtual machine.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of vm, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nasync - Asynchronously perform the task (true, false).\ntaskTimeOut - Time to wait before the operation is considered to have failed in seconds (used when async is false).\nsnapshotName - Name of snapshot if not removing all snapshots.\nremoveChildren - Remove children of snapshot in addition to the named snapshot?\nremoveAllSnapshots - Remove all snapshots?\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
7643bacf-9e28-4761-a82b-c3c395ca4481.66f5a907-e14a-4c1b-8bcb-d622d82723c3.prompt=0d6e9bff-b751-4297-986e-d5a39ee9ad89.755cdc1c-9873-46a0-9489-b6fea52c3494.prompt
7643bacf-9e28-4761-a82b-c3c395ca4481.fc15fa1c-3bd5-43a6-8d36-1c10f7baa9ec.prompt=0d6e9bff-b751-4297-986e-d5a39ee9ad89.d5b83ed0-871e-4e71-9d0b-5e578e9eb93b.prompt
773e73e7-2cf6-4d0d-b5dc-7fe24cffe34d.0d587ff2-e19d-4ea8-a500-aeaf9c782135.description=<pre>Clears the value of a flow variable\n\nInput Parameters\:\nkeyName - the name of the flow variable to clear\n\nResponses\:\nsuccess - cleared the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, null];</pre>
773e73e7-2cf6-4d0d-b5dc-7fe24cffe34d.50297df3-6666-40a5-9615-3e30ed149f17.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
773e73e7-2cf6-4d0d-b5dc-7fe24cffe34d.a770b258-597b-4853-9080-755aa4e8f301.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
773e73e7-2cf6-4d0d-b5dc-7fe24cffe34d.ae304f22-387e-47d5-86db-067bfe64b1b1.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
7774a777-09a3-4bce-9bb1-6c85d404f825.0972c694-f5fa-4461-80df-92d7c78e07e9.description=1f823a6e-4f1c-4a8e-9f18-0cfac408cde9.6081d646-8333-464f-83dc-2d074cd7032f.description
7774a777-09a3-4bce-9bb1-6c85d404f825.19a69329-e211-4ef9-a491-aafbbee305a9.description=1f823a6e-4f1c-4a8e-9f18-0cfac408cde9.63f7fcf8-26a1-4404-9a79-9034718d6444.description
7774a777-09a3-4bce-9bb1-6c85d404f825.19ea80fa-46d8-4608-8b66-81f72cc1dca1.description=f63d4890-514e-4512-a11d-c5a75fb41ffc.e3fa7ad0-65b2-49a4-91d8-246ca58d5b84.description
7774a777-09a3-4bce-9bb1-6c85d404f825.237aab64-ebd1-4881-8588-ed646bca92ba.description=f63d4890-514e-4512-a11d-c5a75fb41ffc.f101b760-b061-45f5-a4b9-e29ad5e0332d.description
7774a777-09a3-4bce-9bb1-6c85d404f825.7afb6dd6-d585-46de-bf06-b7368d4d95c0.description=f63d4890-514e-4512-a11d-c5a75fb41ffc.b450e410-61f1-4d05-beb1-9fc203322b21.description
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.03db85fd-7a1c-4a95-9e05-4b1ea3df6787.description=<pre>Sets the memory size for a virtual machine. The virtual machine must be in a powered off state for this operation to succeed.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation? Valid values\: true or false.\nasync - Asynchronously perform the task.\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nvmDatacenter - Virtual machine's datacenter.\nvmMemorySize - New memory size for the virtual machine in megabytes.\n\nResponses\:\nsuccess - If async is true the task was successfuly queued.  If async is false the memory size for the virtual machine was successfully set.\nfailure - Something went wrong.  See returnResult for details.\n\nReturns\:\nreturnResult - Task result or operation result.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\nMemory limits\: The maximum value for vmMemorySize is based on the virtual hardware version of the virtual machine. Limits are as follows\:\n  Virtual hardware 7 (ESX 4.0)\: 261120\n  Virtual hardware 4 (ESX 3.x)\: 65532\n  Virtual hardware 3 (ESX 2.5)\: 3600\n</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.3cdacb66-8f29-4adc-a952-28393c05ed6f.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.3dc1ce34-1cda-411b-9f72-45a44272a44f.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.44172dfc-16e2-4658-88bc-f2b01cf87950.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,paused). Does nothing if the virtual machine is already in the power state.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno action - The operation completed with no action performed.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.508d9111-4cb9-4cee-ad93-58429f9c6039.prompt=Virtual Machine\:
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.5df5afc4-7c59-4dfc-98a5-353081eddc18.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.6f424a84-99b4-46fc-b1ad-0379b624115e.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.6f42f7fc-4156-476a-b2a3-58145c75ba49.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.77fcfc97-68eb-495a-b683-35cae5de8773.description=<pre>Retrieve power state of virtual machine (poweredOn,poweredOff,suspended).\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task completion return message.\npowerState - Power state (poweredOn,poweredOff,suspended).\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.78f318d3-1739-4f04-8719-7c5fae458228.prompt=Virtual Machine\:
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.79c7d9ea-8190-4669-9723-70aa5af445da.description=<pre>Sets the number of CPUs for a virtual machine.  The virtual machine must be in a powered off state for this operation to succeed.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation? Valid values\: true or false.\nasync - Asynchronously perform the task.\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nvmDatacenter - Virtual machine's datacenter.\nvmCpuCount - New number of CPUs for the virtual machine.\n\nResponses\:\nsuccess - If async is true the task was successfuly queued.  If async is false the CPU count for the virtual machine was successfully set.\nfailure - Something went wrong.  See returnResult for details.\n\nReturns\:\nreturnResult - Task result or operation result.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\nCPU limits\: The maximum value for vmCpuCount is based on the virtual hardware version of the virtual machine. Limits are as follows\:\n  Virtual hardware 7 (ESX 4.0)\: 8\n  Virtual hardware 4 (ESX 3.x)\: 4\n  Virtual hardware 3 (ESX 2.5)\: 2\n</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.86c84d43-ebda-40e9-a699-3329983a07e2.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,paused). Does nothing if the virtual machine is already in the power state.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno action - The operation completed with no action performed.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.916dc861-432d-47d1-8bab-cedaccde2bd8.prompt=Virtual Machine\:
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.a0eccb8f-3e40-45fa-a439-a733cf8ff075.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.ac76c891-fd40-480f-997d-e14f609cddac.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,paused). Does nothing if the virtual machine is already in the power state.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno action - The operation completed with no action performed.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.ac9fb2a7-f89f-48f7-8557-24530476ef44.prompt=Virtual Machine\:
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.c77fceb6-5c65-4900-947f-a2d1eaecc2d3.description=Changes a VM's power state. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n vmPowerState - the desired power state (on / off etc)\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n serviceXml - xml representation of the server created in vCenter
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.d128667d-e993-4e44-a406-7984435131fc.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.d2a6e368-b746-47a4-8738-63d430607cba.description=<pre>Loops as many number of times as specified in the input, that is, counts from 1 to another number incrementing by 1 for each iteration.\n\nInputs\:\ncount - Number of loops to complete.\nreset - If true, then the counter will restart counting from 1.\n\nReturns\:\nThe number that was just counted.\n\nResponses\:\nhas more \t- Counting has not completed, one or more iterations are pending.\nno more \t- Counting completed. This will only be returned once, then counting restarts.\nfailure \t- Something went wrong.\n</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.d3c77b82-2b40-432d-b648-510c17848648.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.description=<pre>\nFlex up a VM to the specific CPU Memory and Disk that is requested.\n\nInput Parameters\:\n serviceName -name of the service that will be created with this flow\n VCenterHost -  vCenter host to execute against\n VCenterUsername - vCenter username\n VCenterPassword - vCenter password.\n virtualMachine - This is the virtual machine that will be flexed.\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n cpuCount - number of cpus the virtual machine should have.\n memSize - amount of memory the virtual machine should have.\n addDisk - whether or not disk should be added to the vm.\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n NA\n</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.eb75dee1-9c06-4e74-aa42-3e33640c7c07.description=<pre>Retrieves the configured memory size for a virtual machine in megabytes.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n\nResponses\:\nsuccess - Successfully retrieved the number of megabytes of memory configured for the virtual machine.\nfailure - Something went wrong.\n\nReturns\:\nvmMemorySize - Megabytes of memory configured for the virtual machine\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.ebddd652-5846-4c75-b143-b0dbd0f59c7e.description=<pre>Retrieves the configured number of CPUs for a virtual machine.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n\nResponses\:\nsuccess - Successfully retrieved the number of CPUs configured for the virtual machine.\nfailure - Something went wrong.\n\nReturns\:\nvmCpuCount - Number of CPUs configured for the virtual machine\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
77e12e62-1ce6-4f1b-b721-fb4e5d6408a2.f6760196-2836-494d-bcea-4659493d7be3.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
781662e1-85bf-4d5f-ae21-246d0242c5c5.12f27ac7-f05c-4b1a-b382-8691f67bf6c7.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
781662e1-85bf-4d5f-ae21-246d0242c5c5.1a711466-6c0b-4326-8702-c9a397fc89f0.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
781662e1-85bf-4d5f-ae21-246d0242c5c5.2e639cea-6ed0-4658-b424-4a88fba863d0.description=<pre>Clears the value of a flow variable\n\nInput Parameters\:\nkeyName - the name of the flow variable to clear\n\nResponses\:\nsuccess - cleared the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, null];</pre>
781662e1-85bf-4d5f-ae21-246d0242c5c5.61eb1eb7-d71d-41d2-a125-ac23f559ac1c.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.1a89c23d-119b-4f9c-a0ea-425a2700bb95.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.1ca4a324-272f-4829-a54a-bab238ffda3d.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.21dd5212-5a64-46d5-9a59-e905b91ef342.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.24ceb8cf-c0e5-4aff-8faa-9c8edbda8d14.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.3dfad285-f9b3-435c-a459-089c6962eb95.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.66b28b3c-d971-4733-a6de-caee141c7a84.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.675689a4-4f57-4011-82d0-b54c4799236a.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.812e3480-e77b-4939-96a1-eb83b48da924.description=<pre>\nIterates through a list of values. Modifying the value of the list and delimiter inputs during iteration is not generally supported.\n\nInputs\:\nlist - The list to iterate through.\nseparator - A delimiter that separates elements in the list.\n\nReturns\:\nThe current element of the list, if the response is has more\n\nResponses\:\nhas more - Another value was in the list, and has been returned.\nhas no more - The iterator has gone fully through the list. This response will only be returned once per iteration through the list, a subsequent call to the Iterator will restart the Iteration through the list.\nfailure - failed to process the list.\n\nNote\: Where the iterator is in the list is tracked by each step's unique id. Therefore you can iterate on the same list from multiple steps simultaneously.\n\nWARNING\: Any step that will use the results of this Iterator operation will, by default, attempt to assign that step's inputs from a flow variable. If this is left checked, then the first element of the iterator will be used for every cycle of iteration.\n\n</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.835094e9-d16a-475e-b1a8-0ef601b2ffcb.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.8476bd83-9904-490a-aeef-541fb8385ed1.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.8c37d48e-bc31-4ccb-9adc-d01b7b68fa14.prompt=Property Name
787ed3c9-6468-4f7b-a2f9-535113d52a40.b0b181cb-5ef6-406a-b911-19b5b07eabbb.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.c46ac0ae-82d0-4d9e-846f-11f09ab85d0d.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.cf034f15-85bf-4c25-9814-c4bf71e6be54.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.d0ed0c6d-2e21-4bf9-9d19-0fb31ca63348.description=<pre>\nChecks to see if a string matches a specific rule.\n\nInputs\:\nmatchType - The type of match to perform.\ntoMatch - The string to check if matches another string.\nmatchTo - The string to match against.\nignoreCase - Boolean value for whether or not to ignore case during match.\n\nResponses\:\nsuccess - The String matched.\nfailure - The string did not match, or something went wrong.\n</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.dc12b10d-6256-4512-bf60-a4de5a4348a9.prompt=Component ID
787ed3c9-6468-4f7b-a2f9-535113d52a40.description=<pre>\nThis workflow adds/updates the service component property using Artifact API.\n\nInputs-\ncomponentId \u2013 Service Component  id\nuserIdentifier  - User Identifier id\ndisplayName - Property Display Name to  add or update\npropertyName \u2013 Property Name to add or update\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\nvalueType - Value type of the property. It can have value from selection list "HP CSA \u2013 Property ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values delimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator - A delimiter that separates elements in the values ( default delimiter used is comma ,)\nconsumerVisible - Do you want to make property visible on consumer portal? (true/false), Default set to true\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.e239a7d6-809b-48e5-820c-e53a62e44d3b.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.e50eb77f-2927-449d-9f9d-a1ec48e04760.description=Service to perform an HTTP PUT via the Java HTTP Client\n\n<pre>\nInputs\:\nurl - the url to PUT from.\nusername - The username to use for basic authentication to the url\npassword - The password to use for basic authentication to the url\ntimeout - a timeout after which the connection should be terminated, or 0 for no timeout.\nuseCookies - Enables cookie tracking. Cookies will be stored between consecutive calls. Valid options are\: true/false\ntrustAllRoots - enables weak security over SSL. A SSH certificate is trusted even if no trusted CA issued it. Valid options are\: true/false\nproxy - a proxy to use when accessing the web site.\nproxyPort - a port on the proxy to connect to.\nproxyUsername - a username to use when connecting to the proxy.\nproxyPassword - a password to use when connecting to the proxy.\nkeystore - the path to the keystore to use for SSL Client Certificates\nkeystorePassword - the password for the keystore\nencodeURL - perform URL encoding.\nfile - The file to put on the specified url.\nuserAgent - if the HTTP header USER_AGENT needs to be overridden, pass in the value here\n\nResponses\:\nsuccess - The PUT command completed\nfailure - The PUT operation failed.\n\nResult\:\nThe operation's return code.\n\nExtraResults\: \nresultText - the raw result of the operation\ndocument - The Complete document returned by the PUT operation\npageLoadTimeInMS - The number of milliseconds it took the page to load.\nresponseTimeInMS - The number of milliseconds it took before the server responded.\nURL - the url to PUT from\nsessionId - the session ID of the connection to the host\nexception - if an error occurred, the message of this error\n</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.e7f9726a-c7af-4731-9287-0092377fde17.description=Service to perform an HTTP PUT via the Java HTTP Client\n\n<pre>\nInputs\:\nurl - the url to PUT from.\nusername - The username to use for basic authentication to the url\npassword - The password to use for basic authentication to the url\ntimeout - a timeout after which the connection should be terminated, or 0 for no timeout.\nuseCookies - Enables cookie tracking. Cookies will be stored between consecutive calls. Valid options are\: true/false\ntrustAllRoots - enables weak security over SSL. A SSH certificate is trusted even if no trusted CA issued it. Valid options are\: true/false\nproxy - a proxy to use when accessing the web site.\nproxyPort - a port on the proxy to connect to.\nproxyUsername - a username to use when connecting to the proxy.\nproxyPassword - a password to use when connecting to the proxy.\nkeystore - the path to the keystore to use for SSL Client Certificates\nkeystorePassword - the password for the keystore\nencodeURL - perform URL encoding.\nfile - The file to put on the specified url.\nuserAgent - if the HTTP header USER_AGENT needs to be overridden, pass in the value here\n\nResponses\:\nsuccess - The PUT command completed\nfailure - The PUT operation failed.\n\nResult\:\nThe operation's return code.\n\nExtraResults\: \nresultText - the raw result of the operation\ndocument - The Complete document returned by the PUT operation\npageLoadTimeInMS - The number of milliseconds it took the page to load.\nresponseTimeInMS - The number of milliseconds it took before the server responded.\nURL - the url to PUT from\nsessionId - the session ID of the connection to the host\nexception - if an error occurred, the message of this error\n</pre>
787ed3c9-6468-4f7b-a2f9-535113d52a40.f7b6ddc6-32fb-4a76-9d63-e7451922227d.prompt=User Identifier
7bf2ec06-4e67-4bbe-ac49-94239cba8d06.01a59539-1dd9-4088-8833-aaeb24ecbb62.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
7bf2ec06-4e67-4bbe-ac49-94239cba8d06.3a33272a-83f1-4015-8a5b-b53ed9581b04.description=<pre>\nIterates through a list of values. Modifying the value of the list and delimiter inputs during iteration is not generally supported.\n\nInputs\:\nlist - The list to iterate through.\nseparator - A delimiter that separates elements in the list.\n\nReturns\:\nThe current element of the list, if the response is has more\n\nResponses\:\nhas more - Another value was in the list, and has been returned.\nhas no more - The iterator has gone fully through the list. This response will only be returned once per iteration through the list, a subsequent call to the Iterator will restart the Iteration through the list.\nfailure - failed to process the list.\n\nNote\: Where the iterator is in the list is tracked by each step's unique id. Therefore you can iterate on the same list from multiple steps simultaneously.\n\nWARNING\: Any step that will use the results of this Iterator operation will, by default, attempt to assign that step's inputs from a flow variable. If this is left checked, then the first element of the iterator will be used for every cycle of iteration.\n\n</pre>
7bf2ec06-4e67-4bbe-ac49-94239cba8d06.6849ce10-df3a-432e-924a-c0e4b8bffc1e.prompt=Enter a value for value1
7bf2ec06-4e67-4bbe-ac49-94239cba8d06.7bfce13e-f3e3-49d2-81ed-dbf4f7d1ce19.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
7bf2ec06-4e67-4bbe-ac49-94239cba8d06.83bf38fb-a039-4eaf-8974-77d30ae35a2c.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
7bf2ec06-4e67-4bbe-ac49-94239cba8d06.9ffc035c-3928-4ea3-9e7b-5d36b50e717d.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
7bf2ec06-4e67-4bbe-ac49-94239cba8d06.a0b97d0e-3dc7-42d5-b684-0de21ca3312e.description=Counts from one number to another number.\n\n<pre>\nInputs\:\nfrom - The number to start counting at.\nto - The number to count to.\nincrementBy - The number to increment by while counting. If unspecified this is 1. If you wanted to count 2,4,6,8 this would be 2.\nreset - If true, then the counter will restart counting from the beginning.\n\nNOTE\: These values must be between -9223372036854775808 and 9223372036854775807\n\nReturns\:\nThe number that was just counted.\n\nNote\: the primary result is resultString, Result can also be used. result (All lower case) should not be used as it is the response code.\n\nResponses\:\nhas more - Not yet done counting.\nno more - Done counting. This will only be returned once, then counting restarts.\nfailure - Something went wrong.\n</pre>
7bf2ec06-4e67-4bbe-ac49-94239cba8d06.description=<pre>\nBuild Customization Specification list xml elements.\n\nInputs Parameters\:\n\n list - List of values which needs to be part of the list.\n delimiter - value separation in the list.\n xmlElementName - Xml element name which needs to be built.\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n\nOutput\:\n xmlElement - List XML element.\n</pre>\n   
7bf2ec06-4e67-4bbe-ac49-94239cba8d06.ee16978e-6068-4e48-bd37-391156aa6592.description=<pre>Returns the length of the list.\n\nInputs\:\ndelimiter - The list delimiter.\nlist - The list to be processed\n\nResponses\:\nsuccess - The operation completed Successfully.\nfailure - Something went wrong.\n\nReturns\:\nThe length of the list.</pre>
7bf2ec06-4e67-4bbe-ac49-94239cba8d06.f3b56662-1968-46e0-ae76-50b82ca42efb.description=<pre>\nSubtracts two numbers\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe difference of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
7bfcc854-85cb-4de9-8715-ddcae76f36f8.1f888909-3eca-49b3-a6ab-660b415c6b02.description=<pre>\nThis workflow retrieves all the child components from the list of component ids.\n\nInputs\:\n\nartifactIds\t\t- List of component ids each separated by "," for which the child components will be retrieved\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
7bfcc854-85cb-4de9-8715-ddcae76f36f8.6995df23-c3f5-4625-8fbe-f8f48f197e84.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
7bfcc854-85cb-4de9-8715-ddcae76f36f8.79d31600-417f-4d26-a83e-76c069d006fd.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
7bfcc854-85cb-4de9-8715-ddcae76f36f8.description=<pre>\nThis workflow will generate hostname based on subscription name and uuid. 20 charactes from subscription and 15 characters from uuid are appended to create unique id. For Windows  15 characters from uuid are parsed to create the hostname\n\nInputs\:\n\nsubscriptionId\t- Subscription ID\nuuid\t\t- UUID of server component Id\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\n\n\nReturns\nObjectId \t- Returns hostname\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
7bfcc854-85cb-4de9-8715-ddcae76f36f8.f5494e87-344a-4c35-a315-bbb8d6287b09.description=<pre>Generates UUID.\n\nInputs\:\nNone\n\nResponses\:\nsuccess - The operation completed Successfully.\n\nReturns\:\nUUID [Universally Unique IDentifier] </pre>
7bfcc854-85cb-4de9-8715-ddcae76f36f8.ff631ed4-8ff8-49b8-ad31-4b02b8fa96ff.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
7cfa3513-57dd-4250-bef1-4efa62e6eabf.068f5326-b69d-4cc4-96a7-ea725b17fa24.description=<pre>Checks if a number or word is equal to another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 \=\= value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
7cfa3513-57dd-4250-bef1-4efa62e6eabf.1f219715-5fdc-42a1-93d4-d43f52e2cd43.description=<pre>Retrieve information about a virtual machine or a group of virtual machines in a datacenter or host system (pipe-delimited). Retrieve each object one at a time from an initial search query ala SQL Query operation.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvmDatacenter - Virtual machine's datacenter.\nvmIdentifierType - Virtual machine identifier type.\nhostSystem - Target virtual machine host system.\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123).\ngetDetailed - Retrieve detailed information?\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nvmInfo - Virtual machine information.\nnumberOfResults - Number of results from the query remaining to be retrieved.\nreturnResult - Virtual machine ID or operation results.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
7cfa3513-57dd-4250-bef1-4efa62e6eabf.3f59634b-bbde-4ce8-96c3-0719fba46651.prompt=Password\:
7cfa3513-57dd-4250-bef1-4efa62e6eabf.6eba89dd-a3f3-43e4-97d8-53fb9e20d485.prompt=VMWare Host\:
7cfa3513-57dd-4250-bef1-4efa62e6eabf.72c4c3ef-9319-4a17-86b3-8667473c4a5e.prompt=Close session?\:
7cfa3513-57dd-4250-bef1-4efa62e6eabf.86912ce1-ac6d-4479-8006-33b5a2d402c1.description=<pre>Search for VMWare objects of type propsType and their properties (propsPathset) from a root object (if any) specified by propsRootObjType and propsRootObj. Retrieves each object's properties one at a time from an initial search query as the one used for the SQL Query operation. Please see VMWare Integration Guide for more details.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n    no more - There are no more results to retrieve.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
7cfa3513-57dd-4250-bef1-4efa62e6eabf.aac6c42c-dd7f-4f46-8d17-6fc961497aba.prompt=Close session?\:
7cfa3513-57dd-4250-bef1-4efa62e6eabf.aed0c3af-5724-43ad-a8ae-124ef0612614.prompt=VMWare Host\:
7cfa3513-57dd-4250-bef1-4efa62e6eabf.bf5e4235-a4e9-4c47-a7af-acd972839363.prompt=VMWare User\:
7cfa3513-57dd-4250-bef1-4efa62e6eabf.c22ccb4a-3c15-468e-8dae-cf2cf8ca7038.prompt=VMWare User\:
7cfa3513-57dd-4250-bef1-4efa62e6eabf.f51446a0-c590-4de3-ab4d-b4427f3fb74a.prompt=Password\:
7cfa3513-57dd-4250-bef1-4efa62e6eabf.fbf8d06c-f200-4d49-919e-f22c0d2903a5.description=<pre>Search for VMWare objects of type propsType and their properties (propsPathset) from a root object (if any) specified by propsRootObjType and propsRootObj. Retrieves each object's properties one at a time from an initial search query as the one used for the SQL Query operation. Please see VMWare Integration Guide for more details.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n    no more - There are no more results to retrieve.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
7ee86408-5265-430e-854f-bcaf71242dda.177251cb-2565-48a9-8a12-57d2fbd29ac1.description=<pre>Useful Op to keep a running results.\nTakes a string input (resultText) and appends this to a global context key of "runningResults". As a result, the context key whose name is in the keyName input will be appended with the string from the input resultText.\n\nInput Parameters\:\nkeyName - name of context key to append to\nresultText - string input to append\ndelimiter - (leave blank for none) the delimiter to put between what is already in keyName before appending resultText\n\nResponses\:\nsuccess - assigned the context variable\n\nReturns\:\nThe the value of the context variable it appended to.\n\nContext\:\nrunningResults\n\nScriptlet Example\:\ncurrentResults \= scriptletContext.get("runningResults");\n\nif (currentResults \=\= null) {\n   currentResults \= resultText;\n} else {\n   currentResults +\= resultText;\n}\n\n\nscriptletContext.putGlobal("runningResults", currentResults);</pre>
7ee86408-5265-430e-854f-bcaf71242dda.1c7ae51a-c22a-48cc-ba5c-0660c8eb65a7.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
7ee86408-5265-430e-854f-bcaf71242dda.39d176e3-4797-42bd-9c24-f0ab717a999f.prompt=Enter a value for xml
7ee86408-5265-430e-854f-bcaf71242dda.4f125222-3848-45c8-b286-e6a2d808d966.description=<pre>\nIterates through a list of values. Modifying the value of the list and delimiter inputs during iteration is not generally supported.\n\nInputs\:\nlist - The list to iterate through.\nseparator - A delimiter that separates elements in the list.\n\nReturns\:\nThe current element of the list, if the response is has more\n\nResponses\:\nhas more - Another value was in the list, and has been returned.\nhas no more - The iterator has gone fully through the list. This response will only be returned once per iteration through the list, a subsequent call to the Iterator will restart the Iteration through the list.\nfailure - failed to process the list.\n\nNote\: Where the iterator is in the list is tracked by each step's unique id. Therefore you can iterate on the same list from multiple steps simultaneously.\n\nWARNING\: Any step that will use the results of this Iterator operation will, by default, attempt to assign that step's inputs from a flow variable. If this is left checked, then the first element of the iterator will be used for every cycle of iteration.\n\n</pre>
7ee86408-5265-430e-854f-bcaf71242dda.8523348d-e169-49e9-8836-9ee3eb7dbf84.prompt=User Identifier
7ee86408-5265-430e-854f-bcaf71242dda.88369afc-98ab-48a3-a191-7d756da61958.description=<pre>Takes a reference to XML (in the form of a String) and the specified XPath Query is run against the XML and returns the results in a form of a delimited list. The World Wide Web Consortium (W3C) organization provides the XPath specification (http\://www.w3.org).\n\nInputs\:\nxml - The XML (in the form of a String)\n\nxpathQuery - The XPath Query that is wanted to be run. See Examples in Notes section below.\n\ndelimiter- The delimiter used to separate values in the returnResult list. \n\nDefault value\: ,\n\nResult Value\:\nreturnResult - The result of the operation. If multiple XPaths are defined then this will add the delimiter between each value. There is no final delimiter.\n\nNotes\:\nExamples\:\nThe XPath Query can be specified as a single query in a format similiar to the following\:\n/employees/employee[@id\="3"]/*[name()\="name" or name()\="jobDescription" or name()\="salary" or name()\="managerId"]/text()\n\nThis would return the following results\:\nGoofy,tester,$50,1\n\nOr if more then one XPath query needs to be specified, populate xpathQuery using the XPath concat function.  As an example here is sample of a xpathQuery value using XPath concat function\:\nconcat(/employees/employee[@id\="2"]/name/text(),',',/employees/employee[@id\="2"]/jobDescription/text(),',',/employees/employee[@id\="2"]/managerId/text(),',',/employees/employee[@id\="2"]/salary/text())\n\nThe output using the concat xpathQuery input would return the following results\:\nDonald Duck,Lead Coder,1,$50\n\nThe examples above use the following xml string value\:\n<?xml version\="1.0" encoding\="UTF-8"?>\n<employees>\n  <employee id\="1">\n    <name>Mickey Mouse</name>\n    <jobDescription>Chief</jobDescription>\n    <salary>$100</salary>\n    <managerId/>\n  </employee>\n  <employee id\="2">\n    <name>Donald Duck</name>\n    <jobDescription>Lead Coder</jobDescription>\n    <salary>$50</salary>\n    <managerId>1</managerId>\n  </employee>\n  <employee id\="3">\n    <name>Goofy</name>\n    <jobDescription>tester</jobDescription>\n    <salary>$50</salary>\n    <managerId>1</managerId>\n  </employee>\n  <employee id\="4">\n    <name>Pluto</name>\n    <jobDescription>Coder - grade 1</jobDescription>\n    <salary>$25</salary>\n    <managerId>2</managerId>\n  </employee>\n</employees>\n\n</pre>
7ee86408-5265-430e-854f-bcaf71242dda.9068dc72-7655-45a0-bf79-b7ac5e1a5805.description=<pre>Takes a reference to XML (in the form of a String) and the specified XPath Query is run against the XML and returns the results in a form of a delimited list. The World Wide Web Consortium (W3C) organization provides the XPath specification (http\://www.w3.org).\n\nInputs\:\nxml - The XML (in the form of a String)\n\nxpathQuery - The XPath Query that is wanted to be run. See Examples in Notes section below.\n\ndelimiter- The delimiter used to separate values in the returnResult list. \n\nDefault value\: ,\n\nResult Value\:\nreturnResult - The result of the operation. If multiple XPaths are defined then this will add the delimiter between each value. There is no final delimiter.\n\nNotes\:\nExamples\:\nThe XPath Query can be specified as a single query in a format similiar to the following\:\n/employees/employee[@id\="3"]/*[name()\="name" or name()\="jobDescription" or name()\="salary" or name()\="managerId"]/text()\n\nThis would return the following results\:\nGoofy,tester,$50,1\n\nOr if more then one XPath query needs to be specified, populate xpathQuery using the XPath concat function.  As an example here is sample of a xpathQuery value using XPath concat function\:\nconcat(/employees/employee[@id\="2"]/name/text(),',',/employees/employee[@id\="2"]/jobDescription/text(),',',/employees/employee[@id\="2"]/managerId/text(),',',/employees/employee[@id\="2"]/salary/text())\n\nThe output using the concat xpathQuery input would return the following results\:\nDonald Duck,Lead Coder,1,$50\n\nThe examples above use the following xml string value\:\n<?xml version\="1.0" encoding\="UTF-8"?>\n<employees>\n  <employee id\="1">\n    <name>Mickey Mouse</name>\n    <jobDescription>Chief</jobDescription>\n    <salary>$100</salary>\n    <managerId/>\n  </employee>\n  <employee id\="2">\n    <name>Donald Duck</name>\n    <jobDescription>Lead Coder</jobDescription>\n    <salary>$50</salary>\n    <managerId>1</managerId>\n  </employee>\n  <employee id\="3">\n    <name>Goofy</name>\n    <jobDescription>tester</jobDescription>\n    <salary>$50</salary>\n    <managerId>1</managerId>\n  </employee>\n  <employee id\="4">\n    <name>Pluto</name>\n    <jobDescription>Coder - grade 1</jobDescription>\n    <salary>$25</salary>\n    <managerId>2</managerId>\n  </employee>\n</employees>\n\n</pre>
7ee86408-5265-430e-854f-bcaf71242dda.91a574ad-3c15-47ee-ade3-36dcdd1cc81e.description=<pre>\nService to perform an HTTP GET via the Java HTTP Client\n\nInputs\:\nurl - the url to attempt to retrieve.\nusername - the username to authenticate to url with.\npassword - the password for username.\ntimeout - a timeout after which the connection should be terminated, or 0 for no timeout.\nuseCookies - Enables cookie tracking. Cookies will be stored between consecutive calls. valid options are\: true/false\nfollowRedirects - specifies whether or not the get command should automatically follow redirects.\ntrustAllRoots - enables weak security over SSL. A SSH certificate is trusted even if no trusted CA issued it. valid options are\: true/false\nproxy - a proxy to use when accessing the web site.\nproxyPort - a port on the proxy to connect to.\nproxyUsername - a username to use when connecting to the proxy.\nproxyPassword - a password to use when connecting to the proxy.\nencodeURL - perform URL encoding.\nuserAgent - if the HTTP header USER_AGENT needs to be overridden, pass in the value here\ncharacterSet - the characterSet for HTTP Get request and response. Default is UTF-8.\n\nResponses\:\nsuccess - URL retrieved successfully.\nfailure - The url could not be retrieved.\n</pre>
7ee86408-5265-430e-854f-bcaf71242dda.c49566b5-3a8b-4c44-8bf5-3038384db711.prompt=Artifact ID
7ee86408-5265-430e-854f-bcaf71242dda.ccc72e11-46d5-407b-a0af-3f66cc12a98d.description=<pre>Retrieves Attributes from the root element of the given XML. If an 'attributeName' is specified, returns that specific attribute. If not, returns an iterator with all attributes.\n\nInputs\:\nxml - The xml (in the form of a String).\nattributeName - The name of the attribute (optional. If empty, returns all)\n\nResponses\:\nhas more - Another attribute was in the Element, and has been returned.\nfailure - Something went wrong.\nno more - No more attributes. This will only be returned once, then iteration restarts.\n\nReturns\:\nreturnResult - The value of the attribute.\nattributeName - The name of the attribute.</pre>
7ee86408-5265-430e-854f-bcaf71242dda.d750c372-559b-427d-9c4b-b415f25f9787.description=<pre>Useful Op to keep a running results.\nTakes a string input (resultText) and appends this to a global context key of "runningResults". As a result, the context key whose name is in the keyName input will be appended with the string from the input resultText.\n\nInput Parameters\:\nkeyName - name of context key to append to\nresultText - string input to append\ndelimiter - (leave blank for none) the delimiter to put between what is already in keyName before appending resultText\n\nResponses\:\nsuccess - assigned the context variable\n\nReturns\:\nThe the value of the context variable it appended to.\n\nContext\:\nrunningResults\n\nScriptlet Example\:\ncurrentResults \= scriptletContext.get("runningResults");\n\nif (currentResults \=\= null) {\n   currentResults \= resultText;\n} else {\n   currentResults +\= resultText;\n}\n\n\nscriptletContext.putGlobal("runningResults", currentResults);</pre>
7ee86408-5265-430e-854f-bcaf71242dda.description=<pre>\nThis workflow returns the list of Artifact\u2019s Properties and values.\n\nInputs-\nartifactId  \u2013  Artifact id\nuserIdentifier  - User Identifier id\npropertyNames \u2013 List of property names separated by pipe |\nIf user provides this inputs, flow will return the values for given property names only. Otherwise flow will return all properties and values for the given artifact.\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nsocketTimeout - The number of milliseconds to wait for the data to be retrieved. This input should be assigned a value greater than or equal to zero. A socketTimeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nfollowRedirects - If true, the GET command automatically follows redirects. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\npropertyNameValuesList \u2013 List of property Names and values\nE.g. property 1;value1,value2|property 2;value3|property 3;value3,value4|........\n</pre>
839d622b-c30e-4776-8e24-0f4aada3684d.49d8ebb6-3ac3-4606-9877-80453e358dc7.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
839d622b-c30e-4776-8e24-0f4aada3684d.789ca37d-fb8b-4463-a0ba-7b89440ab88e.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
839d622b-c30e-4776-8e24-0f4aada3684d.934bce66-d98a-4b9d-9072-c75e405d4991.description=<pre>Checks to see if a string matches a specific rule.\n\nInputs\:\nmatchType - The type of match to perform.\ntoMatch - The string to check if matches another string.\nmatchTo - The string to match against.\nignoreCase - Boolean value for whether or not to ignore case during match.\n\nResponses\:\nsuccess - The String matched.\nfailure - The string did not match, or something went wrong.</pre>
839d622b-c30e-4776-8e24-0f4aada3684d.d7c10aaf-d730-40c3-b2ed-78b4e890e28f.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
839d622b-c30e-4776-8e24-0f4aada3684d.description=<pre>\nUn Deploy the cloned Server from vCenter.\n\nInputs Parameters\:\n    vmId - the unique Identifier of the VM on a vCenter.\n    vcenterHost -  vCenter host to execute against\n    vcenterUser - vCenter username\n    vcenterPassword - vCenter password\n    dataCenter -  target Datacenter on the vCenter host for the VM\n    skip - assign value to skip undeploy flow execution.\n         Valid values\: "deploy","undeploy","all" or empty.\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
839d622b-c30e-4776-8e24-0f4aada3684d.ea6e1e4a-3688-45f4-94ae-f3e2d6e3761d.description=<pre>Checks to see if a string matches a specific rule.\n\nInputs\:\nmatchType - The type of match to perform.\ntoMatch - The string to check if matches another string.\nmatchTo - The string to match against.\nignoreCase - Boolean value for whether or not to ignore case during match.\n\nResponses\:\nsuccess - The String matched.\nfailure - The string did not match, or something went wrong.</pre>
839d622b-c30e-4776-8e24-0f4aada3684d.f65420ee-2f9e-49b2-8e6c-3841182af37b.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
839d622b-c30e-4776-8e24-0f4aada3684d.f927f3c0-fe88-43df-b368-99ca4674ae4d.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
84521b5f-0e85-4421-8874-ade24985aaa8.2bd04744-fac1-48ce-9621-578330bd2fd2.prompt=User Identifier
84521b5f-0e85-4421-8874-ade24985aaa8.2c687855-c541-4450-a3f1-c72407a38569.prompt=User Identifier
84521b5f-0e85-4421-8874-ade24985aaa8.7b3ffb88-0346-49de-bd43-265417357a5f.prompt=Process Instance ID
84521b5f-0e85-4421-8874-ade24985aaa8.93aac044-2329-46c7-8994-1759054d9cb8.prompt=Process Instance ID
84521b5f-0e85-4421-8874-ade24985aaa8.9bacf0b4-7575-4377-a245-5c4f64d53aef.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
84521b5f-0e85-4421-8874-ade24985aaa8.c28ffe0d-def5-440b-8464-6392e14dbd80.prompt=User Identifier
84521b5f-0e85-4421-8874-ade24985aaa8.c2c16145-8c01-4d7d-bc1e-bbd9eb2f7018.description=<pre>\nThis workflow gets details of the Resource Pool artifact.\n\nInputs-\nresourcePoolId \t- Resource Pool ID\nuserIdentifier  \t- User Identifier id\nresourceType \t\u2013 Resource Type For eg. CPU,MEMORY etc\nauthType \t\t- The authentication type that this operation uses when trying to execute the request on the target server.\n\t\tvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\n\t\tDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile \t- The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout \t\t- The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite \ttimeout.Default value\: 0.\nuseCookies \t\t- If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy \t\t- A proxy to use when accessing the web site.\nproxyPort \t\t- The port on the proxy to connect to.\nproxyUsername\t - The username to use when connecting to the proxy.\nproxyPassword\t - The password to use when connecting to the proxy.\nencodeURL\t\t - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent\t\t - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots\t\t - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore\t\t - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword \t- Password to unlock the keystore.\ntrustKeystore\t - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword\t - Password to unlock the truststore.\n\nOutputs-\ndocument  \t\t- returned XML document from API\nproviderId\t\t- Provider Id of the Resource Pool\npoolReference\t- Pool Reference Name\navailabilityIndicator\t- Availability Indicator of the resource type\nusedByCSA\t\t- resource value consumed by CSA\nunit\t\t- Unit of the resouce \navailabletoCSA\t- Total resource available to CSA\n</pre>
84521b5f-0e85-4421-8874-ade24985aaa8.d17e393d-f415-45c9-aa47-d40327ac1e48.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
84521b5f-0e85-4421-8874-ade24985aaa8.e7bfcada-8fe8-420c-96d0-56e90028d1f7.description=<pre>\nThis workflow requests the life cycle engine to execute and take the given service component and it's childs to the deployed state.\n\nInputs-\ncomponentId \u2013 Service component id\nserviceInstanceId - Service Instance Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
845de558-f56b-4ff8-b5f1-c229e481705a.43e58a3b-d4d1-499f-a172-9b1fa137de32.description=Power off and terminate a VM.\n\nInput Parameters\:\n hostname - hostname of the VM to terminate\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VM\n hostSystem - current ESX host for the VM\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise
845de558-f56b-4ff8-b5f1-c229e481705a.description=<pre>\nPower off and terminate a VM.\n\nInput Parameters\:\n VMID - the unique Identifier of the VM on a vCenter.\n hostname - hostname of the VM to terminate\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VM\n hostSystem - current ESX host for the VM\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n</pre>
85fa6ea0-8571-4f30-a457-9decadf9035c.1ed412cc-fe62-4630-bc1a-e79d2bcf22f7.description=85fa6ea0-8571-4f30-a457-9decadf9035c.1ed412cc-fe62-4630-bc1a-e79d2bcf22f7.description
85fa6ea0-8571-4f30-a457-9decadf9035c.b1b4f5ec-6b01-4f76-a217-3e623d033670.description=85fa6ea0-8571-4f30-a457-9decadf9035c.b1b4f5ec-6b01-4f76-a217-3e623d033670.description
85fa6ea0-8571-4f30-a457-9decadf9035c.dc82dbab-8791-4488-897f-f23295be5a99.description=85fa6ea0-8571-4f30-a457-9decadf9035c.dc82dbab-8791-4488-897f-f23295be5a99.description
85fa6ea0-8571-4f30-a457-9decadf9035c.description=<pre>This operation retrieves the vCenter details.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n\nResults\:\n    returnResult - This is the primary result. It contains the vCenter version.\n    exception - In case of success response, this result is empty. In case of failure response, this result contains the java stack trace of the runtime exception.\n    returnCode - It contains the value 0 if the operation successfully completed but there are still more items to be retrieved, the value 1, if the operation successfully completed and there are no more items to be retrieved and the value -1 if an error occurred.\n    instanceUuid - Globally unique identifier associated with this vCenter Server instance.\n    build - Build string for the server.\nFor example, x.y.z-num. This string does not apply to the API\n    name - Short form of the product name.\n    osType - Operating system type and architecture.\n    vendor - Name of the product vendor.\n    version - Version of the product as a dot separated version string.\nFor example, 1.2.\n\nResponses\:\n    success - The operation completed successfully and there are more results available.\n    failure - Something went wrong.\n</pre>
85fa6ea0-8571-4f30-a457-9decadf9035c.fcc02c52-ba57-40d0-930a-133bed01111b.description=<pre>This operation retrieves the vCenter details.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    authType - The type of authentication used by this operation when trying to execute the request on the proxy server. The authentication is not preemptive\: a plain request not including authentication info will be made and only when the server responds with a 'WWW-Authenticate' header the client will send required headers. If the server needs no authentication but you specify one in this input the request will work nevertheless. The client cannot choose the authentication method and there is no fallback so you have to know which one you need. \nDefault value\: basic\nValid values\: basic, digest or a list of valid values separated by comma.\nExample\: basic,digest\n    proxyHost - The proxy server used to access the web site.\n    proxyPort -The proxy server port. Default\: 8080. Valid values\: -1 and numbers greater than 0.\n    proxyUsername -The user name used when connecting to the proxy. The "authType" input will be used to choose authentication type. The "basic" and "'digest" proxy authentication types are supported.\n    proxyPassword - The proxy server password associated with the proxyUsername input value.\n    trustAllRoots - Specifies whether to enable weak security over SSL/TSL. A certificate is trusted even if no trusted certification authority issued it.\nDefault value\: false\nValid values\: true, false\n    x509HostnameVerifier - Specifies the way the server hostname must match a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate. Set this to "allow_all" to skip any checking, but you become vulnerable to attacks. For the value "browser_compatible" the hostname verifier works the same way as Curl and Firefox. The hostname must match either the first CN, or any of the subject-alts. A wildcard can occur in the CN, and in any of the subject-alts. The only difference between "browser_compatible" and "strict" is that a wildcard (such as "*.foo.com") with "browser_compatible" matches all subdomains, including "a.b.foo.com". From the security perspective, to provide protection against possible Man-In-The-Middle attacks, we strongly recommend to use "strict" option.\nDefault value\: strict\nValid values\: strict,browser_compatible,allow_all\n    trustKeystore - The pathname of the Java TrustStore file. This contains certificates from other parties that you expect to communicate with, or from Certificate Authorities that you trust to identify other parties.  If the protocol (specified by the 'url') is not "https" or if trustAllRoots is "true" this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    trustPassword - The password associated with the TrustStore file. If trustAllRoots is false and trustKeystore is empty, trustPassword default will be supplied.\nDefault value\: changeit\n    keystore - The pathname of the Java KeyStore file. You only need this if the server requires client authentication. If the protocol (specified by the URL) is not "https" or if trustAllRoots is "true" this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    keystorePassword - The password associated with the KeyStore file. If trustAllRoots is false and keystore is empty, keystorePassword default will be supplied.\nDefault value\: changeit\n    connectTimeout - The time to wait for a connection to be established, in seconds. A timeout value of 0 represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout - The timeout for waiting for data (a maximum period inactivity between two consecutive data packets), in seconds. A socketTimeout value of 0 represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\n\nResults\:\n    returnResult - This is the primary result. It contains the vCenter version.\n    exception - In case of success response, this result is empty. In case of failure response, this result contains the java stack trace of the runtime exception.\n    returnCode - It contains the value 0 if the operation successfully completed but there are still more items to be retrieved, the value 1, if the operation successfully completed and there are no more items to be retrieved and the value -1 if an error occurred.\n    instanceUuid - Globally unique identifier associated with this vCenter Server instance.\n    build - Build string for the server.\nFor example, x.y.z-num. This string does not apply to the API\n    name - Short form of the product name.\n    osType - Operating system type and architecture.\n    vendor - Name of the product vendor.\n    version - Version of the product as a dot separated version string.\nFor example, 1.2.\n\nResponses\:\n    success - The operation completed successfully and there are more results available.\n    failure - Something went wrong.\n</pre>
86825d1e-765a-4f35-a58e-eccf455afd7f.0b559792-f441-412d-8366-f0f075349c84.description=<pre> This flow will list all the networks in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of networks.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
86825d1e-765a-4f35-a58e-eccf455afd7f.13e1a7e0-5848-4381-9427-7911ef2763ec.description=86825d1e-765a-4f35-a58e-eccf455afd7f.13e1a7e0-5848-4381-9427-7911ef2763ec.description
86825d1e-765a-4f35-a58e-eccf455afd7f.17d20356-4356-46c0-a8aa-ddcf7ee7f284.description=86825d1e-765a-4f35-a58e-eccf455afd7f.17d20356-4356-46c0-a8aa-ddcf7ee7f284.description
86825d1e-765a-4f35-a58e-eccf455afd7f.249e9655-67dd-45e3-8312-d8258ebf8501.prompt=86825d1e-765a-4f35-a58e-eccf455afd7f.249e9655-67dd-45e3-8312-d8258ebf8501.prompt
86825d1e-765a-4f35-a58e-eccf455afd7f.30898b52-b97e-4ce3-96fa-7745d0851ac5.description=<pre> This flow will list all the clusters in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResponses\:\n    success - The operation completed successfully. It will return the list of clusters.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
86825d1e-765a-4f35-a58e-eccf455afd7f.45c8f13c-fd7a-4a10-8537-3a5c5fa49d1a.description=86825d1e-765a-4f35-a58e-eccf455afd7f.45c8f13c-fd7a-4a10-8537-3a5c5fa49d1a.description
86825d1e-765a-4f35-a58e-eccf455afd7f.51a98317-1b14-4f5f-99f1-1bd2b3366f44.description=86825d1e-765a-4f35-a58e-eccf455afd7f.51a98317-1b14-4f5f-99f1-1bd2b3366f44.description
86825d1e-765a-4f35-a58e-eccf455afd7f.774aa351-f626-49e7-98d6-6093a02322f8.prompt=86825d1e-765a-4f35-a58e-eccf455afd7f.774aa351-f626-49e7-98d6-6093a02322f8.prompt
86825d1e-765a-4f35-a58e-eccf455afd7f.828fd546-3d30-423f-b715-671af01d27fe.description=<pre> This flow will list all the datacenters in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n\nResponses\:\n    success - The operation completed successfully. It will return the list of datacenters.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
86825d1e-765a-4f35-a58e-eccf455afd7f.86da38d4-509a-4707-a699-57d5c59d0323.description=86825d1e-765a-4f35-a58e-eccf455afd7f.86da38d4-509a-4707-a699-57d5c59d0323.description
86825d1e-765a-4f35-a58e-eccf455afd7f.8bce5e05-2cfb-4e32-8e2a-ffdb919cfdfa.prompt=86825d1e-765a-4f35-a58e-eccf455afd7f.8bce5e05-2cfb-4e32-8e2a-ffdb919cfdfa.prompt
86825d1e-765a-4f35-a58e-eccf455afd7f.a11c89dd-5571-44b4-9af5-ef928df2ee6d.prompt=86825d1e-765a-4f35-a58e-eccf455afd7f.a11c89dd-5571-44b4-9af5-ef928df2ee6d.prompt
86825d1e-765a-4f35-a58e-eccf455afd7f.c13e9fb8-fcda-490a-b873-697ce3456966.description=86825d1e-765a-4f35-a58e-eccf455afd7f.c13e9fb8-fcda-490a-b873-697ce3456966.description
86825d1e-765a-4f35-a58e-eccf455afd7f.c4960792-f9ca-449c-b2c3-d1c553165ca3.description=86825d1e-765a-4f35-a58e-eccf455afd7f.c4960792-f9ca-449c-b2c3-d1c553165ca3.description
86825d1e-765a-4f35-a58e-eccf455afd7f.c7e861db-c2b1-4d6b-bc05-a85ad4eb6d92.description=<pre> This flow will list all the folders in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    datacenter -  Name of the datacenter.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of folders.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
86825d1e-765a-4f35-a58e-eccf455afd7f.description=<pre> This flow will list all the datacenters in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n\nResponses\:\n    success - The operation completed successfully. It will return the list of datacenters.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
86825d1e-765a-4f35-a58e-eccf455afd7f.e40628c1-f7ac-46d5-a7eb-ce64c102c324.description=<pre> This flow will list all the datastores in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    datacenter -  Name of the datacenter.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of datastores.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
86825d1e-765a-4f35-a58e-eccf455afd7f.f253e27f-ae80-4323-9f8f-6a9a1ad9572f.description=86825d1e-765a-4f35-a58e-eccf455afd7f.f253e27f-ae80-4323-9f8f-6a9a1ad9572f.description
86825d1e-765a-4f35-a58e-eccf455afd7f.fb13bc1e-de81-402b-aa05-f4f01da290e9.description=86825d1e-765a-4f35-a58e-eccf455afd7f.fb13bc1e-de81-402b-aa05-f4f01da290e9.description
868c718a-9952-457d-86ca-263458914523.02cefbbd-5906-4c05-af16-87b02bae024b.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
868c718a-9952-457d-86ca-263458914523.0aebda87-3ca5-4837-b738-a0ac710febab.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,paused). Does nothing if the virtual machine is already in the power state.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno action - The operation completed with no action performed.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
868c718a-9952-457d-86ca-263458914523.0e74b96b-fd1d-4859-975a-9414805d1317.prompt=Password\:
868c718a-9952-457d-86ca-263458914523.2714198f-af52-458e-96f0-0a22c94042aa.description=<pre>Clone a virtual machine. The virtual machine may be a template vm. The source virtual machine is specified via vmIdentifierType and virtualMachine (optionally vmDatacenter) while the target configuration is defined by vmName,vmFolder,vmResourcePool,dataStore,hostSystem, and clusterName.\n\nNote\: cannot work across virtual datacenters\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvmDatacenter - Virtual machine's datacenter\nvmName - Virtual machine name being created (new)\nvmFolder - Virtual machine's folder by inventory path, / delimited not including datacenter (eg. ManagedVMs/DRS/Location1). For root folder, use /\nvmResourcePool - Virtual machine's resource pool\ndataStore - Datastore (eg. host\:dsname, mydatastore)\nhostSystem - Target virtual machine host system\nclusterName - Name of the VMWare HA or DRS cluster\nmarkAsTemplate - Mark the virtual machine as a template? Mark as regular virtual machine otherwise\ncustomizationTemplateName - Customization template name to use on the existing virtual machine or on the newly created one if a new VM is being created.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task result or operation result.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
868c718a-9952-457d-86ca-263458914523.2af4dd76-ac0b-45e4-af3e-de27331eb43e.prompt=Password\:
868c718a-9952-457d-86ca-263458914523.2c2b83e7-c27c-44b6-be73-3ffe3ec472ec.prompt=VMWare Host\:
868c718a-9952-457d-86ca-263458914523.2d0fd2ad-78c4-4a66-a7c8-df757bfed4fe.prompt=Enter user
868c718a-9952-457d-86ca-263458914523.30af21db-3529-4442-9952-3f7160d08ad4.prompt=Enter password
868c718a-9952-457d-86ca-263458914523.35c55c8f-9656-4c60-b7be-9e664d0e4cae.prompt=Virtual Machine name\:
868c718a-9952-457d-86ca-263458914523.4227dcc5-2ec0-4b6b-8044-4b1c0f33fdfd.prompt=Password\:
868c718a-9952-457d-86ca-263458914523.4a82f97e-8d2d-4998-aa2b-9da2bc078eff.prompt=Virtual Machine\:
868c718a-9952-457d-86ca-263458914523.602147aa-5b86-4b22-838e-bf59deb765fc.description=<pre>Retrieves the current state of the task.\n\nInputs\: \nhost - The VMware host hostname or IP address.\nuser - The VMware username.\npassword - The VMware user's password. \nport - The Port to connect to the VMware server. \nprotocol - The connection protocol.The valid values are (http and https). \ncloseSession - Specifies whether to close the internally kept VMware Infrastructure API session when the operation completes. The valid values are (true and false).  \ntaskId - The task ID (for example, task-1234).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - The task information.\ntaskInfo - The task information.\nUserName - The name of the user responsible for the task.\ndescriptionId - The type of the task.\ntaskState - The task state. ((The possible values are running, success, queued and error).\ntaskProgress - The task progress (The possible values are 0 to 100,inclusive).\ntaskSuccess - Specifies whether the task was successful.\ntaskError - The task error, if any.\ntaskResult - The task result.\ntaskCanceled - Specifies whether the task has been canceled. The possible values are (true and false).\ntaskCancelable - Specifies whether the task has been cancelable. </pre>
868c718a-9952-457d-86ca-263458914523.6e7c6da4-4c4b-4f7d-9098-8a9e64ebaaba.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
868c718a-9952-457d-86ca-263458914523.86a23f90-a2f5-431d-919d-8654e96b99b0.description=<pre>\nFlex up a VM to the specific CPU Memory and Disk that is requested.\n\nInput Parameters\:\n serviceName -name of the service that will be created with this flow\n VCenterHost -  vCenter host to execute against\n VCenterUsername - vCenter username\n VCenterPassword - vCenter password.\n virtualMachine - This is the virtual machine that will be flexed.\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n cpuCount - number of cpus the virtual machine should have.\n memSize - amount of memory the virtual machine should have.\n addDisk - whether or not disk should be added to the vm.\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n NA\n</pre>
868c718a-9952-457d-86ca-263458914523.96af7704-5763-4946-b4ce-3f63785cf67d.description=d2c02c87-6e8b-45df-bf37-2a9fc95954ea.cb70d6b7-d3f4-4cce-9107-c616893dec7f.description
868c718a-9952-457d-86ca-263458914523.97b8a91e-6449-4a26-a5f4-44e206f30dd4.prompt=Task ID\:
868c718a-9952-457d-86ca-263458914523.99523667-ca36-4685-9279-d2975471e7ba.prompt=VMWare Host\:
868c718a-9952-457d-86ca-263458914523.9c30c273-5073-4bce-bd54-5b0d9f68299e.description=<pre>Retrieve information about a virtual machine or a set of virtual machines in a datacenter or host system. Retrieve each object one at a time from an initial search query as the one used in the SQL Query operation.\n\nInputs\:\n    host - VMware vCenter, ESX or ESXi host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    vmDatacenter - Datacenter to get virtual machines from.\n    hostSystem - Host system to get virtual machines from.\n    vmIdentifierType - Virtual machine identifier type.  Required if virtualMachine input is used.\nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    getDetailed - Retrieve detailed information?\nValid Values\: true, false\n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResults\n    returnResult - Virtual machine ID (vmid) or reason for failure.\n    vmInfo - Detailed virtual machine information when getDetailed is true.  Properties in this result are pipe delimited.\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    name - Name of the virtual machine.\n    uuid - UUID of the virtual machine.\n    inventoryPath - Inventory path of the virtual machine.\n    dataStore - The name of the datastore where the vm configuration file (.vmx) is stored.\n    vmxPath - The path to the vm configuration file (.vmx) on dataStore.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.  See returnResult for details.\n    no more - There are no more results to retrieve.\n\nNotes\:\n1) Depending on the "host" input value, the inventory path can have one of the following formats\: \n    - If "host" is an ESX server, the inventory path will have the format\: ha-datacenter/vm/<name of vm>\n    - If "host" is a vCenter, the inventory path will have the format\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. \n2) The inventory path is case sensitive.\n</pre>
868c718a-9952-457d-86ca-263458914523.d0800c07-37ba-4864-9f2f-d4c0f0efc1e5.prompt=Xml string for the specification item\:
868c718a-9952-457d-86ca-263458914523.description=<pre>\nCreate a VM from a VM template. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n CPUs - Number of cpus to be set on the VMs\n Memory - Amount of Memory in MB to be set on VMs. Memory should be a multiple of 4.\n port - Port Number toconnect on\n protocol - Connection protocol(http, https)\n availableCPU - Available CPU in  vCenter\n availableMemory - Available Memory in MB in vCenter\n\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n   \n\nResult Fields\:\n vmId - VMID of the Clone \n</pre>
868c718a-9952-457d-86ca-263458914523.f130d630-2f74-4d82-9037-97c5d042050d.prompt=VMWare Host\:
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.01cdbbca-9b30-4aa4-9529-214bdefdead8.prompt=Enter a value for userAgent
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.028bdad6-de22-4e27-a9d0-86089f3a02fd.prompt=Enter a value for authType
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.04bdf52b-ee20-49e8-ae32-fe2f160426df.prompt=Enter a value for trustPassword
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.05f1a942-18be-4c04-b9e6-8591110a9bc1.description=<pre>\nThis workflow updates resource type of a Resource Pool .\n\nInputs-\nresourcePoolId \t- Resource Pool ID\nuserIdentifier  \t- User Identifier id\nresourceType \t\u2013 Resource Type For eg. CPU,MEMORY etc\nusedValue \t\t- resource value consumed or released by CSA.                   \n\t\tpositive value signifies resource is been consumped by CSA and negative values signifies resources are release to Provider by CSA. \nauthType \t\t- The authentication type that this operation uses when trying to execute the request on the target server.\n\t\tvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\n\t\tDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile \t- The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout \t\t- The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite \ttimeout.Default value\: 0.\nuseCookies \t\t- If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy \t\t- A proxy to use when accessing the web site.\nproxyPort \t\t- The port on the proxy to connect to.\nproxyUsername\t - The username to use when connecting to the proxy.\nproxyPassword\t - The password to use when connecting to the proxy.\nencodeURL\t\t - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent\t\t - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots\t\t - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore\t\t - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword \t- Password to unlock the keystore.\ntrustKeystore\t - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword\t - Password to unlock the truststore.\n\nOutputs-\ndocument  \t\t\u2013 returned XML document from API\n</pre>
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.1c4054de-a4f6-4ac9-a463-9804b9bd1643.prompt=Enter a value for keystorePassword
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.1ff24468-101c-444c-939e-1b55192e9667.prompt=Enter a value for trustAllRoots
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.2f8f7f06-eecb-4dc5-a45a-878b5cd0663c.prompt=Enter a value for timeout
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.30fce865-3a7c-4afc-8302-a94d8046d1bc.prompt=Enter a value for keystore
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.31e8350b-08d6-4e31-898b-f38a9370e70c.prompt=Enter a value for trustAllRoots
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.32c09784-b2ec-4e01-8bd8-ff1e24239934.prompt=Enter a value for keystorePassword
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.3e7bf721-7da7-4279-a39c-10d20c3021fb.prompt=Enter a value for authType
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.476e6ee2-0c0f-492c-9169-b241fbd91a0f.prompt=Enter a value for proxyPassword
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.4aee8c6d-7782-4f8f-a2ec-528a59397942.prompt=Enter a value for keystore
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.4d66d89e-df37-49c5-8544-c4cff7aff71e.prompt=Enter a value for useCookies
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.5257da4a-aad4-4fc7-99d0-709145efc4ee.prompt=Enter a value for proxyUsername
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.5450e94e-08b7-4d29-b38e-9267b4b03720.prompt=Enter a value for proxy
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.584d94e3-7eba-448c-b26a-8f750d505689.prompt=Enter a value for kerberosConfFile
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.5aba15fd-13b9-445c-aad2-21c9c79ac0e5.prompt=Enter a value for useCookies
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.658d3fc8-d345-470b-9817-08ee3db12aad.description=<pre>Checks to see if a string matches a specific rule.\n\nIf the matchType is RegEx, input matchTo is the regular expression like \: ^-?\\d+(([\\.,]\\d+)?)+$. Input toMatch is the actual string to check to see if it matches the matchTo expression.\n\nInputs\:\nmatchType - The type of match to perform.\ntoMatch - The string to check if matches another string.\nmatchTo - The string to match against. \nignoreCase - Boolean value for whether or not to ignore case during match.\n\nResponses\:\nsuccess - The String matched.\nfailure - The string did not match, or something went wrong.</pre>
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.6a354715-c41e-4ed8-b3fe-6f9a862c1140.prompt=Enter a value for proxyUsername
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.78d09bb8-cd52-4e7a-b440-ca48ff356256.description=<pre>\nThis workflow artifact details of the Resource Pool .\n\nInputs-\nresourcePoolId \t- Resource Pool ID\nuserIdentifier  \t- User Identifier id\nresourceType \t\u2013 Resource Type For eg. CPU,MEMORY etc\nauthType \t\t- The authentication type that this operation uses when trying to execute the request on the target server.\n\t\tvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\n\t\tDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile \t- The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout \t\t- The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite \ttimeout.Default value\: 0.\nuseCookies \t\t- If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy \t\t- A proxy to use when accessing the web site.\nproxyPort \t\t- The port on the proxy to connect to.\nproxyUsername\t - The username to use when connecting to the proxy.\nproxyPassword\t - The password to use when connecting to the proxy.\nencodeURL\t\t - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent\t\t - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots\t\t - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore\t\t - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword \t- Password to unlock the keystore.\ntrustKeystore\t - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword\t - Password to unlock the truststore.\n\nOutputs-\ndocument  \t\t- returned XML document from API\nproviderId\t\t- Provider Id of the Resource Pool\npoolReference\t- Pool Reference Name\navailabilityIndicator\t- Availability Indicator of the resource type\nusedByCSA\t\t- resource value consumed by CSA\nunit\t\t- Unit of the resouce \navailabletoCSA\t- Total resource available to CSA\n</pre>
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.78d49ca6-9c7c-413b-a3bd-d0c8b6158507.prompt=Enter a value for trustKeystore
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.7ccd9cbe-f363-49d9-8bb8-e49f4a4e38b3.prompt=Enter a value for trustAllRoots
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.871f6da2-e882-439b-8820-bb788aea6dec.prompt=Enter a value for proxy
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.953a269f-1dcd-434d-a870-2078ea905908.description=<pre>\nChecks to see if a list contains every element in another list.\n\nInputs\:\nsublist -Tthe contained list.\ncontainer - The containing list.\ndelimiter - A delimiter separating elements in the two lists.\n\nResponses\:\nsuccess - sublist is contained in container.\nfailure - sublist is not contained in container.\n\nResults\:\nField 1 - All items contained in the sublist that are not in the container. \n</pre>    
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.9926f180-b3ee-42f1-85de-f8685b098668.prompt=Enter a value for proxyPort
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.9ab53af9-43ec-4e9f-bd15-8558a4cbfda6.prompt=Enter a value for trustKeystore
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.9b5cbb54-775e-4f6e-80fb-3455c3fe09e1.prompt=Enter a value for trustPassword
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.a8e8c086-47d0-4347-bee8-ba64672f90fa.prompt=Enter a value for userAgent
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.b132d98f-cf2e-4215-af7f-13418f589236.prompt=Enter a value for proxyPort
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.b24f233e-ccb3-4379-82da-ff682a6ae3b7.prompt=Enter a value for encodeURL
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.c5b1ae95-cdf4-43ac-8574-68753f1f0ab2.prompt=Enter a value for encodeURL
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.da6c560f-7c54-498c-8ae9-5cf07b46e609.prompt=Enter a value for kerberosConfFile
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.dae57def-3b53-4d5f-bef6-d18e03261736.prompt=Enter a value for proxyPassword
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.description=<pre>The flow will validate the resource capacity and updates the Resource Pool\n\nInputs\:\npoolId\t\t\: Resource Pool artifact Id\nuserIdentifier\t\: User Identifier\nresourceType\t\: The resource capacity types For eg\: CPU,Memory etc .. \ntotalResourceRequired\t\: Total Resource Capacity required/release into the Pool \n\n\nResponse\:\nsuccess\t\t\: Flow is successful\nfailure\t\t\: falow fails\n</pre>\n
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.e0032610-ecc1-4640-adac-20426c98ce97.prompt=Enter a value for trustKeystore
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.e49d3272-80ff-4654-9e73-9cb9268a1816.prompt=Enter a value for trustPassword
86b62fd7-0eb4-4dfc-9ecf-a870ce195772.ed021e54-4ca2-45f6-81ae-95411f16f164.prompt=Enter a value for timeout
8ab36918-7250-4e80-b1a9-67c84c5bb386.0ba1cc45-78cb-4c1c-98e5-f53f805edbcb.description=<pre>\nRetrieves the most recent event from a root object you specify using the objType and objId inputs, based on the event types you specify in the events input.\n\nInputs\: \nhost - The VMware host hostname or IP address.\nuser - The VMware username.\npassword - The VMware user's password. \nport - The Port to connect to the VMware server. \nprotocol - The connection protocol.The valid values are (http oand https). \ncloseSession - Specifies whether to close the internally kept VMwware Infrastructure API session when the operation completes. The valid values are (true and false).  \nevents-The list of event types, from which the event log for the specified events is created. (for example, VmPoweredOnEvent, VmRelocatedEvent, VmReconfiguredEvent, VmCreatedEvent, VmMigratedEvent, VmRenamedEvent). \nobjType - The type of Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Datacenter, or Datastore) on which to begin the search. \nobjId - The value of the reference (such as vm-123, datastore-123, or network-123) to use as a root object. \nlocaleLang - The locale language in which to format the createdTime result.(for example, en or ja). If you do not specify a value for this input, the default value of en is used.\nlocaleCountry - The locale country in which to format the createdTime result.(for example, en or ja). If you do not specify a value for this input, the default value of US is used.\n\nResponses\: \nsuccess - The operation completed successfully. \nfailure - Something went wrong or the required fields are not provided \nno more - There are no results to retrieve. \n\nReturns\: \nUserName - The name of the user who caused the event. \ncreatedTime - The time that the event was created. \nvm - The VirtualMachine object of the event. \nreturnResult - The UserName or reason for failure.\n</pre>
8ab36918-7250-4e80-b1a9-67c84c5bb386.14f53ad4-a979-403a-a949-9762d422a80e.description=Counts from one number to another number.\n\n<pre>\nInputs\:\nfrom - The number to start counting at.\nto - The number to count to.\nincrementBy - The number to increment by while counting. If unspecified this is 1. If you wanted to count 2,4,6,8 this would be 2.\nreset - If true, then the counter will restart counting from the beginning.\n\nNOTE\: These values must be between -9223372036854775808 and 9223372036854775807\n\nReturns\:\nThe number that was just counted.\n\nNote\: the primary result is resultString, Result can also be used. result (All lower case) should not be used as it is the response code.\n\nResponses\:\nhas more - Not yet done counting.\nno more - Done counting. This will only be returned once, then counting restarts.\nfailure - Something went wrong.\n</pre>
8ab36918-7250-4e80-b1a9-67c84c5bb386.9b94602a-9fe2-452f-8409-658299cb42af.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
8ab36918-7250-4e80-b1a9-67c84c5bb386.ba2ace24-52f4-4eea-a46a-28276ef2404e.description=d2c02c87-6e8b-45df-bf37-2a9fc95954ea.cb70d6b7-d3f4-4cce-9107-c616893dec7f.description
8ab36918-7250-4e80-b1a9-67c84c5bb386.description=<pre>\nRetrieves the most recent event from a root object you specify and compare that event with custom spec is completed or not using the objType and objId inputs, based on the event types you specify in the events input.\n\nInputs\: \nhost - The VMware host hostname or IP address.\nuser - The VMware username.\npassword - The VMware user's password. \nport - The Port to connect to the VMware server. \nprotocol - The connection protocol.The valid values are (http oand https). \ncloseSession - Specifies whether to close the internally kept VMwware Infrastructure API session when the operation completes. The valid values are (true and false).  \nevents-The list of event types, from which the event log for the specified events is created. (for example, VmPoweredOnEvent, VmRelocatedEvent, VmReconfiguredEvent, VmCreatedEvent, VmMigratedEvent, VmRenamedEvent). \nobjType - The type of Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Datacenter, or Datastore) on which to begin the search. \nobjId - The value of the reference (such as vm-123, datastore-123, or network-123) to use as a root object. \nlocaleLang - The locale language in which to format the createdTime result.(for example, en or ja). If you do not specify a value for this input, the default value of en is used.\nlocaleCountry - The locale country in which to format the createdTime result.(for example, en or ja). If you do not specify a value for this input, the default value of US is used.\n\nResponses\: \nsuccess - The operation completed successfully. \nfailure - Something went wrong or the required fields are not provided \nno more - There are no results to retrieve. \n\nReturns\: \nUserName - The name of the user who caused the event. \ncreatedTime - The time that the event was created. \nvm - The VirtualMachine object of the event. \nreturnResult - The UserName or reason for failure.\n</pre>
8ab36918-7250-4e80-b1a9-67c84c5bb386.ea7bbfc8-6b75-4249-bdb3-7087855c1990.description=<pre>Restart (interrupt power) to virtual machine.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nasync - Asynchronously perform the task (true, false).\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno action - The operation completed with no action performed.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.07151515-5782-4923-953e-04c73f12dba9.description=<pre>\nThis workflow retrieves all the child components from the list of component ids.\n\nInputs\:\n\nartifactIds\t\t- List of component ids each separated by "," for which the child components will be retrieved\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.114807d3-cdda-483f-8686-bf44d64330a1.prompt=Enter a value for useCookies
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.1754dce1-1d47-4044-aded-14fc94075670.prompt=User Identifier
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.1da8c778-69fd-40e1-8023-227d54558903.prompt=Enter a value for socketTimeout
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.35514084-4060-4fa6-bdef-da2b11c9ab54.prompt=Enter a value for authType
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.3ee5568f-fd19-40b6-b325-f66b1777d8ba.prompt=Enter a value for kerberosConfFile
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.41dc419c-57cb-424b-b22f-4f9be3566395.prompt=Artifact ID
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.48584c27-92fc-416c-8424-c895c4b209b8.prompt=Enter a value for proxyPassword
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.49fe8472-2224-491c-baf7-c4dbf082520c.prompt=Enter a value for userAgent
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.51f61d44-28f3-42fa-852a-25c7fdce712f.prompt=Enter a value for proxyPort
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.78315338-4002-4662-b683-1a3d19bf07b2.prompt=Enter a value for timeout
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.8cb5d8f1-03bc-4f2c-af89-a99e472a5216.prompt=Enter a value for encodeURL
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.8f21f6d6-2e1c-4a64-b31a-5b0bb4b27ec0.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.919aa729-20b8-45f5-bc5c-7a46415b59a7.description=<pre>\nThis workflow returns the details of the given artifact id.\n\nInputs-\nartifactId \u2013   Artifact  Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nsocketTimeout - The number of milliseconds to wait for the data to be retrieved. This input should be assigned a value greater than or equal to zero. A socketTimeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nfollowRedirects - If true, the GET command automatically follows redirects. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\nname \u2013  name of the artifactr \ndisplayName \u2013 display name of the artifact\nartifactType \u2013 Artifact type\nstate \u2013 state of the artifact\nlifeCycleState \u2013  life cycle state of the artifact\nlifeCycleSubState \u2013 life cycle sub state of the artifact\ndocument  \u2013 returned XML document from API\n</pre>
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.91e06493-346f-4939-9daa-8daa402d9784.prompt=Enter a value for trustKeystore
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.b873c8e6-84ca-4a74-a65f-40d16c4c5234.prompt=Enter a value for proxy
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.b88e56e2-5fc1-4a6b-9068-ac1dc9bf8fe5.prompt=Enter a value for trustAllRoots
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.cdea8853-0144-4157-9420-b3d5e1bbaed0.prompt=Enter a value for trustPassword
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.d373d6bd-ec7e-42d8-94ac-a396f7622cfc.prompt=Enter a value for followRedirects
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.description=<pre>\nThis workflow will generate hostname based on subscription name and uuid. 20 charactes from subscription and 15 characters from uuid are appended to create unique id. For Windows  15 characters from uuid are parsed to create the hostname\n\nInputs\:\n\nsubscriptionId\t- Subscription ID\nuuid\t\t- UUID of server component Id\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\n\n\nReturns\nObjectId \t- Returns hostname\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.e69160b9-5aed-4950-8ec8-1b863af28b70.prompt=Enter a value for proxyUsername
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.e7cb15bd-ae7a-478c-97fe-a70263f88dec.prompt=Enter a value for keystore
8cfa1835-da3e-4090-8e7b-16e2c1ea3bf9.e85df6f3-055a-4101-9184-66e5e28c56c1.prompt=Enter a value for keystorePassword
8d25f5bc-aac0-45f6-a6b8-75729e468744.0b3d1005-be73-4fbf-aa4d-169c3f00094b.prompt=Virtual Machine\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.13199166-6ad8-4fa9-91e0-97b8e7592222.prompt=Folder (inventory) path in datacenter\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.18bb25c5-d8bb-4713-b7f3-3aa9d382058a.prompt=Virtual Machine\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.2f6de3ca-8718-4601-89bb-d9f403f75faf.prompt=Datacenter to create in\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.363daa05-deed-4d01-be85-e09b74dac9e0.prompt=Virtual Machine name\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.38a6257c-2363-4e41-b63d-3756ea2c6f44.description=Creates a new virtual machine in the vmFolder specified and attaches it to the resource pool specified. \n\nRequired privilege for the user that runs this operation\: VirtualMachine.Inventory.Create \n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol\nValid values\: https, http\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation\nValid values\: "true", "false"\n    async - Asynchronously perform the task\nValid values\: true, false\n    taskTimeOut - Time to wait before the operation is considered to have failed (seconds).\nDefault value\: 800\n    vmName - Virtual machine name being created (new).\n    vmCpuCount - Number of virtual machine CPUs to setup.\n    hostSystem - Target virtual machine host system.\n    clusterName - Name of the VMWare HA or DRS cluster.\n    description - Description / annotation.\n    dataStore - Datastore or datastore cluster (eg. host\:dsname, mydatastore).\n    guestOSID - Guest OS ID (eg. win95Guest,winNetEnterprise64Guest,etc.) or OS description (Microsoft Windows 3.1,Microsoft Windows Vista (64-bit),Red Hat Enterprise Linux 3 (64-bit)). A list of valid entries can be retrieved via the GetOSDescriptors operation.\n    vmDatacenter - Virtual machine's datacenter.\n    vmMemorySize - Virtual machine memory size (megabytes).\n    vmResourcePool - Virtual machine's resource pool.\n    vmFolder - Virtual machine's folder by inventory path, '/' delimited not including datacenter (eg. ManagedVMs/DRS/Location1). For root folder, use '/'.\n    vmDiskSize - Size of the virtual disk to create (MB).\n    thinProvision - Specify whether to perform thin provisioning of the virtual disk. If true, the disk format will be set as thin provisioned format. If false, the disk format will be set as thick format.\nValid values\: "true", "false"\nDefault Value\: "false"\n    networkName - Name of the virtual machine's network or network port group. The value is case sensitive. If the input is empty, the virtual machine will be added to the first network found.\n    version - The hardware version of the virtual machine. If the input is empty, VMware will assign a version to the VM based on the version of the ESX it is created on.\nValid values\: "vmx-04", "vmx-07", "vmx-08", "vmx-09", "vmx-10", "vmx-11"\n    busSharing - Mode for sharing the SCSI bus.\nValid values\:"physical", "virtual", "none".\n    controllerType - The SCSI controller type.\nValid values\:"BusLogic Parallel", "LSI Logic Parallel","LSI Logic SAS","VMware Paravirtual".\n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResults\:\n    returnResult - Task result or operation result.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\nNotes\:\n   1. Note that "socketTimeout" and "connectionTimeout" inputs do not represent the time to wait for the operation to complete. They are used when communicating with the service, to make sure that the service is up and responds to client's requests. They can be used for service diagnosis purpose.\n   2. The "taskTimeOut" input is only used when the task is performed in a synchronous manner ("async" is set to "false").\n   3. There are some limitations based on the VM hardware version\:\n         Virtual hardware 11 (vSphere 6.0)\: 128 CPU,4TB RAM, 62TB HDD\n         Virtual hardware 10 (vSphere 5.5)\: 64 CPU, 1TB RAM, 62TB HDD\n         Virtual hardware 9 (vSphere 5.1)\: 64 CPU, 1TB RAM, 2TB HDD\n         Virtual hardware 8 (vSphere 5)\: 32 CPU, 1TB RAM, 2TB HDD\n         Virtual hardware 7 (vSphere 4)\: 8 CPU, 256GB RAM, 2TB HDD\n         Virtual hardware 4 (ESX 3.x)\: 4 CPU, 64GB RAM, 2TB HDD\n         Virtual hardware 3 (ESX 2.5)\: 2 CPU, 3600MB RAM, 2TB HDD\n    4. You must provide a value for either the clusterName or the hostSystem input, they are mutually exclusive.
8d25f5bc-aac0-45f6-a6b8-75729e468744.40527ed8-3ac7-46d4-85a1-f7646f7120f2.prompt=Guest OS ID\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.460c3df4-8b28-4cca-8951-a5f9162808a3.prompt=VMWare User\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.4b514958-1841-4bd1-8eae-1dde813e6a0a.prompt=Password\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.551eebfc-f181-4ad5-9d51-4cae58829dff.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
8d25f5bc-aac0-45f6-a6b8-75729e468744.5749cc99-630e-4df9-b81c-4871fee83d10.prompt=Disk Size (MB)\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.64082369-6e02-4a25-867d-ebb83eecd87e.prompt=VMWare Host\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.6b9429f6-eb95-4cb1-8403-54e612c370f8.prompt=Password\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.7014379e-ed78-4d68-aeaa-abe6242541a0.prompt=VMWare Host\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.7461871b-e5d2-4fd0-b10c-810ee6e39211.prompt=VMWare User\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.7c520e3b-9e52-4248-be57-c64baf26a9ed.prompt=Datacenter to create in\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.7dfcaee9-deaa-410b-9bbf-708960342084.description=<pre>Add a Network Interface Card to a virtual machine assigned to a port group / network name.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nasync - Asynchronously perform the task (true, false).\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nvmDatacenter - Virtual machine's datacenter.\nnetPortGroup - Name of port group to connect this new NIC to. This port group can be a legacy port group or a distributed virtual port group.\nnetNicType - Virtual network interface card type. Valid inputs\: PCNet32, E1000, VmxNet, VmxNet2, VmxNet3. NIC type VmxNet2 is only supported for virtual machine hardware version 4 and later.  NIC type VmxNet3 is only supported for vitual machine hardware version 7 and later.\nnetMacAddr - MAC address to assign if netMacGeneration is set to Manual.\nnetMacGeneration - MAC address assignment. Valid inputs\: Manual, Generated, Assigned (Assigned value is only valid when host is a vCenter server. Will assign MAC from vCenter).\nnetWakeOnLan - Enable Wake On LAN for the NIC (true, false).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task result or operation result.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
8d25f5bc-aac0-45f6-a6b8-75729e468744.8fe57c08-a793-4ce7-8a07-2401ad88ee82.description=<pre>Remove a Network Interface Card from a virtual machine.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nasync - Asynchronously perform the task (true, false).\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type\nvmDatacenter - Virtual machine's datacenter\ndeviceNumber - Number of the NIC (Network adapter 1, Virtual Network Adapter, etc.). As an example\: "Network adapter 1" would be deviceNumber "1".\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task result or operation result.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
8d25f5bc-aac0-45f6-a6b8-75729e468744.94bbbc20-acb8-4f01-89a6-79460a74af62.description=<pre>Retrieves the current state of the task.\n\nInputs\: \nhost - The VMware host hostname or IP address.\nuser - The VMware username.\npassword - The VMware user's password. \nport - The Port to connect to the VMware server. \nprotocol - The connection protocol.The valid values are (http and https). \ncloseSession - Specifies whether to close the internally kept VMware Infrastructure API session when the operation completes. The valid values are (true and false).  \ntaskId - The task ID (for example, task-1234).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - The task information.\ntaskInfo - The task information.\nUserName - The name of the user responsible for the task.\ndescriptionId - The type of the task.\ntaskState - The task state. ((The possible values are running, success, queued and error).\ntaskProgress - The task progress (The possible values are 0 to 100,inclusive).\ntaskSuccess - Specifies whether the task was successful.\ntaskError - The task error, if any.\ntaskResult - The task result.\ntaskCanceled - Specifies whether the task has been canceled. The possible values are (true and false).\ntaskCancelable - Specifies whether the task has been cancelable. </pre>
8d25f5bc-aac0-45f6-a6b8-75729e468744.9552f183-66d0-42c7-98ad-3d8d08fda2dc.prompt=Virtual Machine name\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.97cc20e4-0b10-445c-9253-50f263e9c6b7.prompt=Password\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.9eb82f2c-8fc9-4f97-89c1-aec820fd62c6.prompt=VMWare Host\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.a6da330d-0d0c-4f27-9d09-f7617d001ba2.prompt=VMWare Host\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.b5650792-8fad-4b93-9b1a-476ec6642d23.prompt=Datastore\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.b62f670f-57de-4811-87c1-038882369448.prompt=Guest OS ID\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.be61dcab-649b-4ea6-a03a-0e63d892b878.prompt=VMWare Host\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.c00ef9f1-edd0-46cd-9f94-14dae134d572.prompt=VMWare User\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.c6239d56-1261-45d4-8fe8-3d515cc12d4d.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
8d25f5bc-aac0-45f6-a6b8-75729e468744.cc84df41-6810-4c3e-997e-d9a88a9e31a1.prompt=VMWare User\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.d288f188-b6f2-4324-9653-997621c436cd.prompt=Task ID\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.d68dc943-3815-427f-84ff-d0ccba0fa6bc.prompt=Asynchronously Perform Task?\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.dc8bb045-9c59-4b32-b355-89dcad5d31c5.prompt=Disk Size (MB)\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.e37eed6a-87e5-4e5e-ab86-62c4c3cf250e.prompt=Datastore\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.ee1d5084-182c-4bf4-9b13-6b07e5fcf09b.prompt=Password\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.f61733b3-bf73-451b-b849-72c6f754e24f.prompt=Password\:
8d25f5bc-aac0-45f6-a6b8-75729e468744.fd9bda6a-8934-47fb-9369-c43c0b94bfd7.prompt=Folder (inventory) path in datacenter\:
905364eb-7eba-456b-af2b-0b72571df423.1c542c2d-fab6-45df-921b-2297bbab6d11.prompt=Virtual Machine\:
905364eb-7eba-456b-af2b-0b72571df423.481e07ad-dfbe-45f0-a4d6-6adcd773d9b3.description=<pre>Sleeps for the number of seconds specified in the input.\n\nInputs\:\nseconds - The number of seconds to sleep.\n\nResponses\:\nsuccess - Slept for the number of seconds given as input.\nfailure - Was unable to sleep for some reason.\n</pre>
905364eb-7eba-456b-af2b-0b72571df423.4a1d2a3a-5032-42e0-a5f3-b25aaa7ffe9c.prompt=Password\:
905364eb-7eba-456b-af2b-0b72571df423.4c37b08c-35a0-4182-a0fb-09c4cfe08d2c.description=<pre>Retrieve information about a virtual machine or a group of virtual machines in a datacenter or host system (pipe-delimited). Retrieve each object one at a time from an initial search query ala SQL Query operation.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvmDatacenter - Virtual machine's datacenter.\nvmIdentifierType - Virtual machine identifier type.\nhostSystem - Target virtual machine host system.\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123).\ngetDetailed - Retrieve detailed information?\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nvmInfo - Virtual machine information.\nnumberOfResults - Number of results from the query remaining to be retrieved.\nreturnResult - Virtual machine ID or operation results.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
905364eb-7eba-456b-af2b-0b72571df423.62a0463d-2960-4838-bc7f-26c3a36a8e16.prompt=Enter user
905364eb-7eba-456b-af2b-0b72571df423.6d5ab8e8-b24b-421e-a9f7-773156f3c075.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,paused). Does nothing if the virtual machine is already in the power state.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno action - The operation completed with no action performed.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
905364eb-7eba-456b-af2b-0b72571df423.8af065fa-93f9-4d6e-9542-baf5c0d33889.description=<pre>Attempts to shutdown the guest virtual machine.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Operation result message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
905364eb-7eba-456b-af2b-0b72571df423.9338e6c3-c8b8-4893-9723-6cfbe307a4b3.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
905364eb-7eba-456b-af2b-0b72571df423.9338f75f-b07c-48e2-8b7c-cd8974c3f903.prompt=Virtual Machine\:
905364eb-7eba-456b-af2b-0b72571df423.99fdfe4f-0712-413c-b7d7-9bd68546203b.description=<pre>Retrieve power state of virtual machine (poweredOn,poweredOff,suspended).\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task completion return message.\npowerState - Power state (poweredOn,poweredOff,suspended).\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
905364eb-7eba-456b-af2b-0b72571df423.b9a00be2-7ac8-4f58-a5d8-04edc667b26a.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
905364eb-7eba-456b-af2b-0b72571df423.c276301b-a475-452e-844a-94fbc1db3cc3.prompt=Enter password
905364eb-7eba-456b-af2b-0b72571df423.d1c245a5-4f9f-42c8-9d41-37655d3732ac.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
905364eb-7eba-456b-af2b-0b72571df423.description=<pre>\nChanges a VM's power state. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n vmPowerState - the desired power state (on / off etc)\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n serviceXml - xml representation of the server created in vCenter\n</pre>
905364eb-7eba-456b-af2b-0b72571df423.ef118a07-f8e7-406a-9442-0e59c4c55742.description=<pre>Loops as many number of times as specified in the input, that is, counts from 1 to another number incrementing by 1 for each iteration.\n\nInputs\:\ncount - Number of loops to complete.\nreset - If true, then the counter will restart counting from 1.\n\nReturns\:\nThe number that was just counted.\n\nResponses\:\nhas more \t- Counting has not completed, one or more iterations are pending.\nno more \t- Counting completed. This will only be returned once, then counting restarts.\nfailure \t- Something went wrong.\n</pre>
922bee3e-646c-42c4-a947-8d306efd971b.75404db0-9d1f-426b-8445-d8f504a6e3db.description=8956c93c-0a2e-4bac-838c-b567e9af24eb.a002d527-dfd2-49f4-aa5d-24b5380668c5.description
922bee3e-646c-42c4-a947-8d306efd971b.7d6f313c-239a-4cae-b113-09f2d5f79910.description=03a0a231-f18d-4fbe-b259-bfdd675c4a0b.d1d541aa-4680-4aa0-917d-d572bf18cff0.description
922bee3e-646c-42c4-a947-8d306efd971b.8e10d8d1-d29d-4763-9cef-7b5d190371ff.description=8956c93c-0a2e-4bac-838c-b567e9af24eb.a002d527-dfd2-49f4-aa5d-24b5380668c5.description
922bee3e-646c-42c4-a947-8d306efd971b.a51f2af2-80ba-457c-be77-33f519218df4.description=8956c93c-0a2e-4bac-838c-b567e9af24eb.a002d527-dfd2-49f4-aa5d-24b5380668c5.description
922bee3e-646c-42c4-a947-8d306efd971b.abee2f1b-9c6e-4657-9499-9133847aa481.description=<pre>\nService to perform an HTTP GET via the Java HTTP Client\n\nInputs\:\nurl - the url to attempt to retrieve.\nusername - the username to authenticate to url with.\npassword - the password for username.\ntimeout - a timeout after which the connection should be terminated, or 0 for no timeout.\nuseCookies - Enables cookie tracking. Cookies will be stored between consecutive calls. valid options are\: true/false\nfollowRedirects - specifies whether or not the get command should automatically follow redirects.\ntrustAllRoots - enables weak security over SSL. A SSH certificate is trusted even if no trusted CA issued it. valid options are\: true/false\nproxy - a proxy to use when accessing the web site.\nproxyPort - a port on the proxy to connect to.\nproxyUsername - a username to use when connecting to the proxy.\nproxyPassword - a password to use when connecting to the proxy.\nencodeURL - perform URL encoding.\nuserAgent - if the HTTP header USER_AGENT needs to be overridden, pass in the value here\ncharacterSet - the characterSet for HTTP Get request and response. Default is UTF-8.\n\nResponses\:\nsuccess - URL retrieved successfully.\nfailure - The url could not be retrieved.\n</pre>
922bee3e-646c-42c4-a947-8d306efd971b.c5cfca60-23c5-488c-88fb-970ea0e1defb.description=03a0a231-f18d-4fbe-b259-bfdd675c4a0b.3f4b0070-2769-46bb-b21d-5302d74cedf5.description
922bee3e-646c-42c4-a947-8d306efd971b.f31d8397-d894-499a-a715-84bad395831b.description=03a0a231-f18d-4fbe-b259-bfdd675c4a0b.b3bfe861-ac22-4211-af96-5ac437c9d3bb.description
922bee3e-646c-42c4-a947-8d306efd971b.fe4071c5-3c14-40ff-bbbb-32727da2e483.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
92bc0c07-3d73-4485-83e0-e4b270b004b7.2c5bdcd0-620e-4287-89d0-efa007b85ed5.prompt=Virtual Machine\:
92bc0c07-3d73-4485-83e0-e4b270b004b7.a0147740-08fa-4537-8da5-2b9ca03bfd91.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,paused). Does nothing if the virtual machine is already in the power state.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno action - The operation completed with no action performed.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
92bc0c07-3d73-4485-83e0-e4b270b004b7.c1c1b476-4219-490e-adc4-570deb336671.description=<pre>Retrieve information about a virtual machine or a group of virtual machines in a datacenter or host system (pipe-delimited). Retrieve each object one at a time from an initial search query ala SQL Query operation.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvmDatacenter - Virtual machine's datacenter.\nvmIdentifierType - Virtual machine identifier type.\nhostSystem - Target virtual machine host system.\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123).\ngetDetailed - Retrieve detailed information?\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nvmInfo - Virtual machine information.\nnumberOfResults - Number of results from the query remaining to be retrieved.\nreturnResult - Virtual machine ID or operation results.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
92bc0c07-3d73-4485-83e0-e4b270b004b7.description=<pre>\nPower off and terminate a VM.\n\nInput Parameters\:\n VMID - the unique Identifier of the VM on a vCenter.\n hostname - hostname of the VM to terminate\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VM\n hostSystem - current ESX host for the VM\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n</pre>
92bc0c07-3d73-4485-83e0-e4b270b004b7.e984cd7b-e26f-43ca-8a49-a3dad4649cca.description=<pre>Destroy / delete an object in VMWare.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\npropsRootObjType - VMWare object type (eg. VirtualMachine, HostSystem, ComputeResource,ResourcePool,Alarm)\npropsRootObj - VMWare object ID\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task ID or task completion return message</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.09aab936-7c8d-485b-9c86-bab5ff1470a3.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.0d5226ba-6e9c-4946-9da0-89f87d5290c3.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.124d74fa-cc39-47ba-af58-0e8dd0061fbd.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.181dd53b-89ad-4927-9281-1a2e7d70f3a3.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.1eb6aac4-c677-48c5-9324-4821bea9e09b.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.237c69e4-d73d-45ce-b953-f9a062c93a48.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.59f5316a-a507-4eec-a672-47130b2e336a.description=<pre>\nChecks to see if a string matches a specific rule.\n\nInputs\:\nmatchType - The type of match to perform.\ntoMatch - The string to check if matches another string.\nmatchTo - The string to match against.\nignoreCase - Boolean value for whether or not to ignore case during match.\n\nResponses\:\nsuccess - The String matched.\nfailure - The string did not match, or something went wrong.\n</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.6c224a78-55cd-483f-9d64-665dd9d4353f.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.78aab6b7-57f5-4a0f-b06b-90ce95e23c28.description=Service to perform an HTTP PUT via the Java HTTP Client\n\n<pre>\nInputs\:\nurl - the url to PUT from.\nusername - The username to use for basic authentication to the url\npassword - The password to use for basic authentication to the url\ntimeout - a timeout after which the connection should be terminated, or 0 for no timeout.\nuseCookies - Enables cookie tracking. Cookies will be stored between consecutive calls. Valid options are\: true/false\ntrustAllRoots - enables weak security over SSL. A SSH certificate is trusted even if no trusted CA issued it. Valid options are\: true/false\nproxy - a proxy to use when accessing the web site.\nproxyPort - a port on the proxy to connect to.\nproxyUsername - a username to use when connecting to the proxy.\nproxyPassword - a password to use when connecting to the proxy.\nkeystore - the path to the keystore to use for SSL Client Certificates\nkeystorePassword - the password for the keystore\nencodeURL - perform URL encoding.\nfile - The file to put on the specified url.\nuserAgent - if the HTTP header USER_AGENT needs to be overridden, pass in the value here\n\nResponses\:\nsuccess - The PUT command completed\nfailure - The PUT operation failed.\n\nResult\:\nThe operation's return code.\n\nExtraResults\: \nresultText - the raw result of the operation\ndocument - The Complete document returned by the PUT operation\npageLoadTimeInMS - The number of milliseconds it took the page to load.\nresponseTimeInMS - The number of milliseconds it took before the server responded.\nURL - the url to PUT from\nsessionId - the session ID of the connection to the host\nexception - if an error occurred, the message of this error\n</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.7e3e3a87-705a-49c9-ab59-373ac039be69.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.9f2c04b7-8d08-4dbf-9c85-d3a9209289f2.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.a284c068-16cd-47cd-9457-b57a25caf3d6.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.a716f878-a5c8-4461-8014-a23fd4774939.description=Service to perform an HTTP PUT via the Java HTTP Client\n\n<pre>\nInputs\:\nurl - the url to PUT from.\nusername - The username to use for basic authentication to the url\npassword - The password to use for basic authentication to the url\ntimeout - a timeout after which the connection should be terminated, or 0 for no timeout.\nuseCookies - Enables cookie tracking. Cookies will be stored between consecutive calls. Valid options are\: true/false\ntrustAllRoots - enables weak security over SSL. A SSH certificate is trusted even if no trusted CA issued it. Valid options are\: true/false\nproxy - a proxy to use when accessing the web site.\nproxyPort - a port on the proxy to connect to.\nproxyUsername - a username to use when connecting to the proxy.\nproxyPassword - a password to use when connecting to the proxy.\nkeystore - the path to the keystore to use for SSL Client Certificates\nkeystorePassword - the password for the keystore\nencodeURL - perform URL encoding.\nfile - The file to put on the specified url.\nuserAgent - if the HTTP header USER_AGENT needs to be overridden, pass in the value here\n\nResponses\:\nsuccess - The PUT command completed\nfailure - The PUT operation failed.\n\nResult\:\nThe operation's return code.\n\nExtraResults\: \nresultText - the raw result of the operation\ndocument - The Complete document returned by the PUT operation\npageLoadTimeInMS - The number of milliseconds it took the page to load.\nresponseTimeInMS - The number of milliseconds it took before the server responded.\nURL - the url to PUT from\nsessionId - the session ID of the connection to the host\nexception - if an error occurred, the message of this error\n</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.b5c0d7d0-f1ad-4b13-967f-d65ed1abe456.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.be91402e-7bf8-44f4-9c65-536edda9ea47.prompt=User Identifier
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.c75650a1-0edc-4b5e-8aca-f1fb17b7ff36.description=<pre>\nIterates through a list of values. Modifying the value of the list and delimiter inputs during iteration is not generally supported.\n\nInputs\:\nlist - The list to iterate through.\nseparator - A delimiter that separates elements in the list.\n\nReturns\:\nThe current element of the list, if the response is has more\n\nResponses\:\nhas more - Another value was in the list, and has been returned.\nhas no more - The iterator has gone fully through the list. This response will only be returned once per iteration through the list, a subsequent call to the Iterator will restart the Iteration through the list.\nfailure - failed to process the list.\n\nNote\: Where the iterator is in the list is tracked by each step's unique id. Therefore you can iterate on the same list from multiple steps simultaneously.\n\nWARNING\: Any step that will use the results of this Iterator operation will, by default, attempt to assign that step's inputs from a flow variable. If this is left checked, then the first element of the iterator will be used for every cycle of iteration.\n\n</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.dbc313ec-781f-45e7-b04c-ea347ba2d0e7.prompt=Component ID
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.description=<pre>\nThis workflow adds/updates the service component property using Artifact API.\n\nInputs-\ncomponentId \u2013 Service Component  id\nuserIdentifier  - User Identifier id\ndisplayName - Property Display Name to  add or update\npropertyName \u2013 Property Name to add or update\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\nvalueType - Value type of the property. It can have value from selection list "HP CSA \u2013 Property ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values delimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator - A delimiter that separates elements in the values ( default delimiter used is comma ,)\nconsumerVisible - Do you want to make property visible on consumer portal? (true/false), Default set to true\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.e357a688-e700-4cf7-b37e-10c7842455dd.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.e84a8eb5-6f8d-4488-a816-0895eed361b0.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.fa5e03df-5ad5-4abc-82a6-5eb0f4ad2c6c.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
93eb7b26-cbeb-4f7e-9355-636746d4d5cf.fe3aab7b-29c3-4380-8de9-d3994222e0a0.prompt=Property Name
9480060a-bd56-48a8-aa71-0e6934a78928.027196f3-507f-476d-af49-7e92d467820b.prompt=User Identifier
9480060a-bd56-48a8-aa71-0e6934a78928.06350bf9-b1d0-4812-b918-58fd0ca43be0.prompt=Process Instance ID
9480060a-bd56-48a8-aa71-0e6934a78928.281d043f-9ba7-440b-ab36-d054e2f2291e.prompt=Process Instance ID
9480060a-bd56-48a8-aa71-0e6934a78928.2ff9272b-1ea0-4cf0-821b-56a08e5ef9b8.description=<pre>\nThis workflow gets details of the Resource Pool artifact.\n\nInputs-\nresourcePoolId \t- Resource Pool ID\nuserIdentifier  \t- User Identifier id\nresourceType \t\u2013 Resource Type For eg. CPU,MEMORY etc\nauthType \t\t- The authentication type that this operation uses when trying to execute the request on the target server.\n\t\tvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\n\t\tDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile \t- The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout \t\t- The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite \ttimeout.Default value\: 0.\nuseCookies \t\t- If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy \t\t- A proxy to use when accessing the web site.\nproxyPort \t\t- The port on the proxy to connect to.\nproxyUsername\t - The username to use when connecting to the proxy.\nproxyPassword\t - The password to use when connecting to the proxy.\nencodeURL\t\t - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent\t\t - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots\t\t - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore\t\t - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword \t- Password to unlock the keystore.\ntrustKeystore\t - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword\t - Password to unlock the truststore.\n\nOutputs-\ndocument  \t\t- returned XML document from API\nproviderId\t\t- Provider Id of the Resource Pool\npoolReference\t- Pool Reference Name\navailabilityIndicator\t- Availability Indicator of the resource type\nusedByCSA\t\t- resource value consumed by CSA\nunit\t\t- Unit of the resouce \navailabletoCSA\t- Total resource available to CSA\n</pre>
9480060a-bd56-48a8-aa71-0e6934a78928.356ed43b-c471-4eb0-962e-52ce99eca74f.prompt=User Identifier
9480060a-bd56-48a8-aa71-0e6934a78928.38a2b4de-cba2-4e4c-a464-0d658fa1b215.prompt=User Identifier
9480060a-bd56-48a8-aa71-0e6934a78928.41d831a9-3f40-480b-9165-18a639efd649.description=<pre>\nThis workflow requests the life cycle engine to execute and take the given service component and it's childs to the deployed state.\n\nInputs-\ncomponentId \u2013 Service component id\nserviceInstanceId - Service Instance Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
9480060a-bd56-48a8-aa71-0e6934a78928.871b48c5-08e8-4a3b-bef7-7c0079490a34.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
9480060a-bd56-48a8-aa71-0e6934a78928.9c891601-cfaf-44ea-83ac-c9fc42d87469.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
95e6d191-7aea-42aa-a080-5aafd7da29e0.0acd25f7-89e8-41c1-8e7b-a5960c2741c0.prompt=95e6d191-7aea-42aa-a080-5aafd7da29e0.0acd25f7-89e8-41c1-8e7b-a5960c2741c0.prompt
95e6d191-7aea-42aa-a080-5aafd7da29e0.52f9191e-8441-4006-aa21-ac2d4ce50263.prompt=95e6d191-7aea-42aa-a080-5aafd7da29e0.52f9191e-8441-4006-aa21-ac2d4ce50263.prompt
95e6d191-7aea-42aa-a080-5aafd7da29e0.9d9aa251-4316-41c4-bb6d-b73ae67a81bb.prompt=95e6d191-7aea-42aa-a080-5aafd7da29e0.9d9aa251-4316-41c4-bb6d-b73ae67a81bb.prompt
95e6d191-7aea-42aa-a080-5aafd7da29e0.daaf93db-088c-40d2-bef2-5257e564bb5b.description=<pre>This operation retrieves the vCenter details.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    authType - The type of authentication used by this operation when trying to execute the request on the proxy server. The authentication is not preemptive\: a plain request not including authentication info will be made and only when the server responds with a 'WWW-Authenticate' header the client will send required headers. If the server needs no authentication but you specify one in this input the request will work nevertheless. The client cannot choose the authentication method and there is no fallback so you have to know which one you need. \nDefault value\: basic\nValid values\: basic, digest or a list of valid values separated by comma.\nExample\: basic,digest\n    proxyHost - The proxy server used to access the web site.\n    proxyPort -The proxy server port. Default\: 8080. Valid values\: -1 and numbers greater than 0.\n    proxyUsername -The user name used when connecting to the proxy. The "authType" input will be used to choose authentication type. The "basic" and "'digest" proxy authentication types are supported.\n    proxyPassword - The proxy server password associated with the proxyUsername input value.\n    trustAllRoots - Specifies whether to enable weak security over SSL/TSL. A certificate is trusted even if no trusted certification authority issued it.\nDefault value\: false\nValid values\: true, false\n    x509HostnameVerifier - Specifies the way the server hostname must match a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate. Set this to "allow_all" to skip any checking, but you become vulnerable to attacks. For the value "browser_compatible" the hostname verifier works the same way as Curl and Firefox. The hostname must match either the first CN, or any of the subject-alts. A wildcard can occur in the CN, and in any of the subject-alts. The only difference between "browser_compatible" and "strict" is that a wildcard (such as "*.foo.com") with "browser_compatible" matches all subdomains, including "a.b.foo.com". From the security perspective, to provide protection against possible Man-In-The-Middle attacks, we strongly recommend to use "strict" option.\nDefault value\: strict\nValid values\: strict,browser_compatible,allow_all\n    trustKeystore - The pathname of the Java TrustStore file. This contains certificates from other parties that you expect to communicate with, or from Certificate Authorities that you trust to identify other parties.  If the protocol (specified by the 'url') is not "https" or if trustAllRoots is "true" this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    trustPassword - The password associated with the TrustStore file. If trustAllRoots is false and trustKeystore is empty, trustPassword default will be supplied.\nDefault value\: changeit\n    keystore - The pathname of the Java KeyStore file. You only need this if the server requires client authentication. If the protocol (specified by the URL) is not "https" or if trustAllRoots is "true" this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    keystorePassword - The password associated with the KeyStore file. If trustAllRoots is false and keystore is empty, keystorePassword default will be supplied.\nDefault value\: changeit\n    connectTimeout - The time to wait for a connection to be established, in seconds. A timeout value of 0 represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout - The timeout for waiting for data (a maximum period inactivity between two consecutive data packets), in seconds. A socketTimeout value of 0 represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\n\nResults\:\n    returnResult - This is the primary result. It contains the vCenter version.\n    exception - In case of success response, this result is empty. In case of failure response, this result contains the java stack trace of the runtime exception.\n    returnCode - It contains the value 0 if the operation successfully completed but there are still more items to be retrieved, the value 1, if the operation successfully completed and there are no more items to be retrieved and the value -1 if an error occurred.\n    instanceUuid - Globally unique identifier associated with this vCenter Server instance.\n    build - Build string for the server.\nFor example, x.y.z-num. This string does not apply to the API\n    name - Short form of the product name.\n    osType - Operating system type and architecture.\n    vendor - Name of the product vendor.\n    version - Version of the product as a dot separated version string.\nFor example, 1.2.\n\nResponses\:\n    success - The operation completed successfully and there are more results available.\n    failure - Something went wrong.\n</pre>
95e6d191-7aea-42aa-a080-5aafd7da29e0.description=<pre>This operation retrieves the vCenter details.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    authType - The type of authentication used by this operation when trying to execute the request on the proxy server. The authentication is not preemptive\: a plain request not including authentication info will be made and only when the server responds with a 'WWW-Authenticate' header the client will send required headers. If the server needs no authentication but you specify one in this input the request will work nevertheless. The client cannot choose the authentication method and there is no fallback so you have to know which one you need. \nDefault value\: basic\nValid values\: basic, digest or a list of valid values separated by comma.\nExample\: basic,digest\n    proxyHost - The proxy server used to access the web site.\n    proxyPort -The proxy server port. Default\: 8080. Valid values\: -1 and numbers greater than 0.\n    proxyUsername -The user name used when connecting to the proxy. The "authType" input will be used to choose authentication type. The "basic" and "'digest" proxy authentication types are supported.\n    proxyPassword - The proxy server password associated with the proxyUsername input value.\n    trustAllRoots - Specifies whether to enable weak security over SSL/TSL. A certificate is trusted even if no trusted certification authority issued it.\nDefault value\: false\nValid values\: true, false\n    x509HostnameVerifier - Specifies the way the server hostname must match a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate. Set this to "allow_all" to skip any checking, but you become vulnerable to attacks. For the value "browser_compatible" the hostname verifier works the same way as Curl and Firefox. The hostname must match either the first CN, or any of the subject-alts. A wildcard can occur in the CN, and in any of the subject-alts. The only difference between "browser_compatible" and "strict" is that a wildcard (such as "*.foo.com") with "browser_compatible" matches all subdomains, including "a.b.foo.com". From the security perspective, to provide protection against possible Man-In-The-Middle attacks, we strongly recommend to use "strict" option.\nDefault value\: strict\nValid values\: strict,browser_compatible,allow_all\n    trustKeystore - The pathname of the Java TrustStore file. This contains certificates from other parties that you expect to communicate with, or from Certificate Authorities that you trust to identify other parties.  If the protocol (specified by the 'url') is not "https" or if trustAllRoots is "true" this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    trustPassword - The password associated with the TrustStore file. If trustAllRoots is false and trustKeystore is empty, trustPassword default will be supplied.\nDefault value\: changeit\n    keystore - The pathname of the Java KeyStore file. You only need this if the server requires client authentication. If the protocol (specified by the URL) is not "https" or if trustAllRoots is "true" this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    keystorePassword - The password associated with the KeyStore file. If trustAllRoots is false and keystore is empty, keystorePassword default will be supplied.\nDefault value\: changeit\n    connectTimeout - The time to wait for a connection to be established, in seconds. A timeout value of 0 represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout - The timeout for waiting for data (a maximum period inactivity between two consecutive data packets), in seconds. A socketTimeout value of 0 represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\n\nResults\:\n    returnResult - This is the primary result. It contains the vCenter version.\n    exception - In case of success response, this result is empty. In case of failure response, this result contains the java stack trace of the runtime exception.\n    returnCode - It contains the value 0 if the operation successfully completed but there are still more items to be retrieved, the value 1, if the operation successfully completed and there are no more items to be retrieved and the value -1 if an error occurred.\n    instanceUuid - Globally unique identifier associated with this vCenter Server instance.\n    build - Build string for the server.\nFor example, x.y.z-num. This string does not apply to the API\n    name - Short form of the product name.\n    osType - Operating system type and architecture.\n    vendor - Name of the product vendor.\n    version - Version of the product as a dot separated version string.\nFor example, 1.2.\n\nResponses\:\n    success - The operation completed successfully and there are more results available.\n    failure - Something went wrong.\n</pre>
970954c9-8c5e-4a50-815a-93df01190a6f.4838bfb9-7c12-4208-8159-19f5807f4560.prompt=User Identifier
970954c9-8c5e-4a50-815a-93df01190a6f.761a2363-fc7c-472d-b112-e59190cfdb82.prompt=Enter a value for user
970954c9-8c5e-4a50-815a-93df01190a6f.79940d22-cc6d-47dd-8d62-461feda854da.prompt=Enter a value for host
970954c9-8c5e-4a50-815a-93df01190a6f.7b4f2066-a60f-4991-80f5-ddff425421bd.prompt=Enter a value for protocol
970954c9-8c5e-4a50-815a-93df01190a6f.967e0768-0a9b-4c42-b738-1c5e8a881b6d.description=<pre>\nStart the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
970954c9-8c5e-4a50-815a-93df01190a6f.ac841ae6-4943-4182-acee-d7bef2654633.prompt=Enter a value for password
970954c9-8c5e-4a50-815a-93df01190a6f.c285a706-6dd6-46ea-99b4-e20410b5607e.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
970954c9-8c5e-4a50-815a-93df01190a6f.description=<pre>\nStart the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
970954c9-8c5e-4a50-815a-93df01190a6f.ed95ba82-2921-402f-815e-91cbb6f0e76b.prompt=Enter a value for port
970954c9-8c5e-4a50-815a-93df01190a6f.f103ac5e-d9c4-441b-896e-0455b3dddbe4.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
9812ab20-857a-4277-8242-938ca2fe76be.73c64fb1-c4fc-43af-b9fa-795c694a16dd.prompt=Password\:
9812ab20-857a-4277-8242-938ca2fe76be.7bff4894-96eb-4369-8f02-4cda47bcf0df.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
9812ab20-857a-4277-8242-938ca2fe76be.7f44f174-fd56-4161-abd8-b1bad717d96c.description=\nInputs\:\n\nhost -  vCenter DNS name/IP Address\nusername - vCenter user\npassword - vCenter user password\nport - vCenter port\nprotocol - vCenter protocol\nhypervisorName - Hypervisor DNS name/IP Address\ndataStore - Datastore of the hypervior\ndatacenterName - Datacenter name\nhostname - VM Server name\ntemplateReference -  VM Template name\nosType -  OS Type of the template\nCPUs - CPU Count to be assigned\nMemory -  Memory Size to be assigned\n\n\nResults\:\n\nvmId - VM Identifies of the created VM\nipAddress - IP Address of the created VM\nmacAddress - MAC Address of the created VM\n\n\n\n\n
9812ab20-857a-4277-8242-938ca2fe76be.85377336-c9cc-4a5c-89dc-e396c345a76b.prompt=VMWare User\:
9812ab20-857a-4277-8242-938ca2fe76be.893efe2a-5275-40fe-9716-ef84dcaa5c61.prompt=Target datacenter\:
9812ab20-857a-4277-8242-938ca2fe76be.9dcaedb9-ebb2-4383-b6d1-353d141944ad.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
9812ab20-857a-4277-8242-938ca2fe76be.a9a91388-2b8b-46a7-8e71-2df2eadb3427.description=<pre>\nThis workflow will generate hostname based on subscription name and uuid. 20 charactes from subscription and 15 characters from uuid are appended to create unique id. For Windows  15 characters from uuid are parsed to create the hostname\n\nInputs\:\n\nsubscriptionId\t- Subscription ID\nuuid\t\t- UUID of server component Id\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\n\n\nReturns\nObjectId \t- Returns hostname\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
9812ab20-857a-4277-8242-938ca2fe76be.description=<pre>\nProvision a  Simple Vcenter Linux VM from a VM template. \n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
9812ab20-857a-4277-8242-938ca2fe76be.e70c96cf-8379-45fd-ba71-08d33f162763.prompt=VMWare Host\:
98f9905b-7753-47f8-9b46-8ea8adc570e8.34fc6763-7ae7-4dd6-aa2a-a53a51f09559.description=<pre>\nAccepts an object in the JavaScript Object Notation format (JSON) and\nreturns a value for the specified key.\n\nThe JSON format encodes objects as a set of unordered key/value pairs, which is\nsimilar to a structure or map in other programming languages.  For example,\n   { "city" \: "Palo Alto", \n     "state" \: "CA" }\nis an object with two elements one with the name "city" having the value "Palo\nAlto", and the other being the name "state" with the value "CA". This operation would \nreturn "Palo Alto" if user enters "city" as a key.\n\nIf the input object contains JSON array, array index can be used in the key input. For example, \n{ "location"\: [\n      {"city"\: "Roseville", "country"\: "United States"},\n      {"city"\: "Cluj", "country"\: "Romania"},\n      {"city"\: "Yehud", "country"\: "Israel"}]    \n}\nThe operation would return "Roseville" if user enters "location[0].city" as a key.\n\nJavaScript objects are useful for representing structured data, and are\nespecially when used within an array.  For example, an operation that retrieves\na set of incidents from an external system may return the entire list in one\narray of incident objects.  The description of the enclosing folder,\n/Library/Utility Operations/Container/JavaScript Objects has more examples, and\nthe JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   object\n      The JavaScript object.  \n      The operation will return a failure if it is not a JavaScript object.\n\n   key\n      The key in the object to get the value of.\n\nResponses\n\n   success\n      The value was successfully returned for the specified key. \n\n   failure\n      There was some error in processing the object, most likely because the\n      object is not in valid JavaScript Object Notation or the specified key does not exist in the object.  \n      You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with\n      JavaScript Object Notation.\n\nOutputs\n\n   The primary output will be the value for the specified key in the object.\n\nNote\n\n    If the value in JSON object is in scientific notation, the returned output will be converted to an equivalent decimal number. Ex, 2.9e+1 will be converted to 29.\n</pre>
98f9905b-7753-47f8-9b46-8ea8adc570e8.42d3d13a-45b5-4280-abd6-f90bc8089495.prompt=VMWare User\:
98f9905b-7753-47f8-9b46-8ea8adc570e8.48656e65-7207-4b8a-8213-d5b4df22e6f5.prompt=Password\:
98f9905b-7753-47f8-9b46-8ea8adc570e8.7626ddbb-01a4-4bb2-a7e0-2b31bbf79ec1.description=<pre>\nInsert an object into a JSON array, optionally specifying the position at which to insert the new object. \n\nThis Operation differes from the 'Add to Array' operation in that this one will try and validate the new element as\na JSON object, whereas 'Add to Array' will just wrap the element in quotes and treat it as a string. This means \nthat the element passed into this operation must be a valid JSON object, or the operation will fail. \n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n    element - The element to insert into the array. As noted above, this must be a valid JSON object or the operation will fail. It can be \n                    any valid JSON object; such as a number, string, an array, or a name/value pair list. Numbers can be entered as-is, strings\n                    must be wrapped in quotes, and objects must be formated correctly (see examples below for more info)\nValid values\: Any valid JSON object\nExamples\: 1 or "a string" or {"one"\:"two", "three"\:"four"} or [1,2,3]\n\n    index -The index in the array at which to insert the new element. If index is undefined, or index is equal to the length of the array \n               (one past the last element), the new element is placed at the end of the array. See the notes above for more information\n               on using negative numbers to specify array elements.\n               If the index is valid, the new element is inserted at that position, and all remaining elements are shifted one position to the right.\n\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\nDefault value\: undefined (insert the new element at the end of the array)\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array with the inserted element.\n\n</pre>
98f9905b-7753-47f8-9b46-8ea8adc570e8.79d5c352-6151-4b43-bf4c-0df20c09f171.description=f63d4890-514e-4512-a11d-c5a75fb41ffc.f101b760-b061-45f5-a4b9-e29ad5e0332d.description
98f9905b-7753-47f8-9b46-8ea8adc570e8.ae9e3b74-53f3-44c5-a0bc-6b4c38f30a19.description=<pre>\nAccepts an object in the JavaScript Object Notation format (JSON) and\nreturns a value for the specified key.\n\nThe JSON format encodes objects as a set of unordered key/value pairs, which is\nsimilar to a structure or map in other programming languages.  For example,\n   { "city" \: "Palo Alto", \n     "state" \: "CA" }\nis an object with two elements one with the name "city" having the value "Palo\nAlto", and the other being the name "state" with the value "CA". This operation would \nreturn "Palo Alto" if user enters "city" as a key.\n\nIf the input object contains JSON array, array index can be used in the key input. For example, \n{ "location"\: [\n      {"city"\: "Roseville", "country"\: "United States"},\n      {"city"\: "Cluj", "country"\: "Romania"},\n      {"city"\: "Yehud", "country"\: "Israel"}]    \n}\nThe operation would return "Roseville" if user enters "location[0].city" as a key.\n\nJavaScript objects are useful for representing structured data, and are\nespecially when used within an array.  For example, an operation that retrieves\na set of incidents from an external system may return the entire list in one\narray of incident objects.  The description of the enclosing folder,\n/Library/Utility Operations/Container/JavaScript Objects has more examples, and\nthe JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   object\n      The JavaScript object.  \n      The operation will return a failure if it is not a JavaScript object.\n\n   key\n      The key in the object to get the value of.\n\nResponses\n\n   success\n      The value was successfully returned for the specified key. \n\n   failure\n      There was some error in processing the object, most likely because the\n      object is not in valid JavaScript Object Notation or the specified key does not exist in the object.  \n      You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with\n      JavaScript Object Notation.\n\nOutputs\n\n   The primary output will be the value for the specified key in the object.\n\nNote\n\n    If the value in JSON object is in scientific notation, the returned output will be converted to an equivalent decimal number. Ex, 2.9e+1 will be converted to 29.\n</pre>
98f9905b-7753-47f8-9b46-8ea8adc570e8.d987e6e0-6581-4e91-882a-302f13f4c85d.description=<pre>\nAccepts an object in the JavaScript Object Notation format (JSON) and\nreturns a value for the specified key.\n\nThe JSON format encodes objects as a set of unordered key/value pairs, which is\nsimilar to a structure or map in other programming languages.  For example,\n   { "city" \: "Palo Alto", \n     "state" \: "CA" }\nis an object with two elements one with the name "city" having the value "Palo\nAlto", and the other being the name "state" with the value "CA". This operation would \nreturn "Palo Alto" if user enters "city" as a key.\n\nIf the input object contains JSON array, array index can be used in the key input. For example, \n{ "location"\: [\n      {"city"\: "Roseville", "country"\: "United States"},\n      {"city"\: "Cluj", "country"\: "Romania"},\n      {"city"\: "Yehud", "country"\: "Israel"}]    \n}\nThe operation would return "Roseville" if user enters "location[0].city" as a key.\n\nJavaScript objects are useful for representing structured data, and are\nespecially when used within an array.  For example, an operation that retrieves\na set of incidents from an external system may return the entire list in one\narray of incident objects.  The description of the enclosing folder,\n/Library/Utility Operations/Container/JavaScript Objects has more examples, and\nthe JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   object\n      The JavaScript object.  \n      The operation will return a failure if it is not a JavaScript object.\n\n   key\n      The key in the object to get the value of.\n\nResponses\n\n   success\n      The value was successfully returned for the specified key. \n\n   failure\n      There was some error in processing the object, most likely because the\n      object is not in valid JavaScript Object Notation or the specified key does not exist in the object.  \n      You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with\n      JavaScript Object Notation.\n\nOutputs\n\n   The primary output will be the value for the specified key in the object.\n\nNote\n\n    If the value in JSON object is in scientific notation, the returned output will be converted to an equivalent decimal number. Ex, 2.9e+1 will be converted to 29.\n</pre>
98f9905b-7753-47f8-9b46-8ea8adc570e8.description=<pre> This flow will list all the customspecs in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n\nResponses\:\n    success - The operation completed successfully. It will return the list of customspecs.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
98f9905b-7753-47f8-9b46-8ea8adc570e8.eb34d529-a82d-4a7c-9ddd-388793cbae08.description=The operation retrieves the list of available customization specifications (which appear in the Customization Specification Manager section of the vSphere client) that can be applied to Virtual Machines.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    authType - The type of authentication used by this operation when trying to execute the request on the proxy server. The authentication is not preemptive\: a plain request not including authentication info will be made and only when the server responds with a 'WWW-Authenticate' header the client will send required headers. If the server needs no authentication but you specify one in this input the request will work nevertheless. The client cannot choose the authentication method and there is no fallback so you have to know which one you need. \nDefault value\: basic\nValid values\: basic, digest or a list of valid values separated by comma.\nExample\: basic,digest\n    proxyHost - The proxy server used to access the web site.\n    proxyPort -The proxy server port. Default\: 8080. Valid values\: -1 and numbers greater than 0.\n    proxyUsername -The user name used when connecting to the proxy. The "authType" input will be used to choose authentication type. The "Basic" and "'Digest" proxy authentication types are supported.\n    proxyPassword - The proxy server password associated with the proxyUsername input value.\n    trustAllRoots - Specifies whether to enable weak security over SSL/TSL. A certificate is trusted even if no trusted certification authority issued it.\nDefault value\: false\nValid values\: true, false\n    x509HostnameVerifier - Specifies the way the server hostname must match a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate. Set this to "allow_all" to skip any checking, but you become vulnerable to attacks. For the value "browser_compatible" the hostname verifier works the same way as Curl and Firefox. The hostname must match either the first CN, or any of the subject-alts. A wildcard can occur in the CN, and in any of the subject-alts. The only difference between "browser_compatible" and "strict" is that a wildcard (such as "*.foo.com") with "browser_compatible" matches all subdomains, including "a.b.foo.com". From the security perspective, to provide protection against possible Man-In-The-Middle attacks, we strongly recommend to use "strict" option.\nDefault value\: strict\nValid values\: strict,browser_compatible,allow_all\n    trustKeystore - The pathname of the Java TrustStore file. This contains certificates from other parties that you expect to communicate with, or from Certificate Authorities that you trust to identify other parties.  If the protocol (specified by the 'url') is not "https" or if trustAllRoots is "true" this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    trustPassword - The password associated with the TrustStore file. If trustAllRoots is false and trustKeystore is empty, trustPassword default will be supplied.\nDefault value\: changeit\n    keystore - The pathname of the Java KeyStore file. You only need this if the server requires client authentication. If the protocol (specified by the URL) is not "https" or if trustAllRoots is "true" this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    keystorePassword - The password associated with the KeyStore file. If trustAllRoots is false and keystore is empty, keystorePassword default will be supplied.\nDefault value\: changeit\n    connectTimeout - The time to wait for a connection to be established, in seconds. A timeout value of 0 represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout - The timeout for waiting for data (a maximum period inactivity between two consecutive data packets), in seconds. A socketTimeout value of 0 represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\n\nResults\:\n    returnResult - This is the primary result. The result is a list representing the names of the customization specification available. Each customization specification in the list is separated by a comma (',').\n\nResponses\:\n    success - The operation completed successfully\n    failure - Something went wrong.\n
98f9905b-7753-47f8-9b46-8ea8adc570e8.ee1f5101-7f04-4b9f-ab8a-5af5a814fff3.description=This operation iterates through a string that contains an array in the JavaScript Object Notation format (JSON).  Each time  this operation is called, it places the value of the current array element into the "returnResult" output and advances the iterator to the next array element.\n\nThe JSON format is used to encode arrays and other values using JavaScript notation.  For arrays, this means that the values need to be enclosed by square brackets, and each element in the array can be a string (enclosed by quotes), a number, true, false, null, or  nested array or object.  Commas are always used as delimiters between array elements, and they can also appear within string elements. \n\nThe benefits of JavaScript arrays are that delimiters are fixed and cannot be confused with data, and that complex nesting of arrays and objects are supported.  The description of the enclosing folder, /Library/Utility Operations/Container/JavaScript Objects has more examples, and the JSON format is described completely at http\://www.json.org.\n\nInputs\:\n    array - The JavaScript array that will be iterated through. A normal OO list is NOT a JavaScript array.\nExamples\:\n    For example, the following is a simple JSON array\:\n        [ "cat", "dog", "horse" ]\n    The equivalent OO list (that is not a JavaScript array) is\:\n        cat,dog,horse\n\n Results\:\n    returnResult - This is the primary output and contains the current array element or an exception message if something went wrong.  When incorporating this operation into a flow, you should assign a meaningful result value from this field.\n    Result - This output field contains the value from the "returnResult" field. \n\nResponses\:\n   has more - The iterator has not yet reached the end of the array. The "returnResult" output will be populated with the value of the current element in the array, and the iterator will advance to the next element in the array.\n   no more - The iterator has reached the end of the array, and there is no more data to return.  The iterator will become undefined after this call, which basically will reset it so that if called again, this operation will begin another iteration at the beginning of the array.\n   failure - There was some error in iterating through the list, and the "returnResult" output will contain information about the error. This will occur if the input array is not a valid JavaScript array. You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with JavaScript Object Notation.\n\nNotes\:\n1. Modifying the contents of the array during iteration is not generally supported, but will be safe as long as the affected item(s) are beyond the current position of the iterator.  The iterator keeps track of where it is in the array by position.  If items are added or removed to the list in a position preceding the iterator, it may cause the iterator to return results that are not obvious.  For example, if the array contains [ "a", "b", "c" ] and the iterator is positioned on the second element, "b" and the first element is removed, then the iterator will now be at the last element in the list, "c".\n2. There is currently a limitation that a flow can only have one of these array iterator steps active at a time without causing possible conflicts. In other words, if you need to iterate through a nested array, you should use a sub-flow to process the inner array.  You may have two or more of these array iterators in the same flow as long as each iterator reaches the end of its array before the next one begins.\n3. Note that since JavaScript arrays may contain nested arrays or other objects, the value returned in "returnResult" field may also require further processing.\n
98f9905b-7753-47f8-9b46-8ea8adc570e8.f191f4f5-22a5-47f8-a2a2-3c5301923a83.prompt=VMWare Host\:
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.0584f014-ad19-4f54-a1eb-3d9da6077e1d.prompt=Component ID
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.1273d1ce-0b3a-4a5b-813c-b6910a781120.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.144c6e3e-dea0-4137-872b-3a4d81bc8636.prompt=User Identifier
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.22a145d7-0b4e-4e3f-833b-ea3611e62876.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.33299463-12df-48c6-bfbb-59a7cb6e543f.prompt=Enter a value for timeout
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.4161bba6-4508-4b8d-9ac9-a7c3fc8c7a46.prompt=Component ID
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.4269d825-5fa6-4e67-87bc-9f2a7c5f6118.prompt=Enter a value for encodeURL
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.4b74f55e-ba4f-4c94-876b-ecdb9c811f04.description=This workflow adds/updates the component property using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\n\nvalueType - Value type of the property. It can have value from selection list "CSA-Property-ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values dilimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator -  A delimiter that separates elements in the values ( default dilimiter used is comma ,)
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.4c77d8ff-9977-4ca4-9524-42aa9cb06ce3.prompt=Component ID
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.5662dfd3-5d73-4ce0-8b26-1d5b288b71e2.prompt=User Identifier
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.6a52bcbf-6f62-4aa7-a0a6-4429da10ab54.prompt=Enter a value for trustKeystore
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.7198c068-f951-4c9c-b654-48ef4accb9b4.prompt=Enter a value for proxyPassword
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.7ec2c414-1fbc-4453-8fb5-59208279038d.prompt=Enter a value for keystore
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.83fa8bc1-2bbe-465c-982c-fc9d60d6cf8d.prompt=Enter a value for useCookies
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.8448bb03-2209-4665-9d6a-c4e3e876572c.description=<pre>\nThis workflow updates service component display name.\n\nInputs-\ncomponentId \u2013 Service component id\nuserIdentifier  - User Identifier id\ndisplayName \u2013 Display name of the service component to be added\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.8ad1e6e2-ba1f-4d73-9520-778ff1d61f60.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.8ed5a341-0a90-432d-85c9-11c352c6f952.prompt=Enter a value for authType
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.8f09cec6-b30a-4db0-999e-fcdfab83db69.prompt=Component ID
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.8f3d5196-9e5a-4107-90bb-8072d1989a6d.prompt=Enter a value for keystorePassword
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.91dce6ad-9b57-4b2a-92ef-af328556fde5.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.950e33a0-50a8-4351-9095-3d3d2e4581c6.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.961cfd39-95d2-4079-9d06-6ed6999c3e08.prompt=Enter a value for userAgent
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.a7418cfa-2b5c-4ad8-b9a6-5310b967bcd1.prompt=Enter a value for proxy
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.a7d017ba-687b-45a3-86b6-db0c4e9b00c0.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.a97dd71e-4276-4031-8bb1-2d756cb26165.prompt=Enter a value for trustAllRoots
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.aa5421f3-6dbe-45e9-a823-e8fd8f5167d6.prompt=User Identifier
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.aa75a3a5-1c76-4a5a-a4f8-42e59e01cfca.prompt=Enter a value for proxyPort
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.ab0e5d4c-a532-442f-a921-09264a90fe39.prompt=User Identifier
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.b09dd18b-15e4-4598-80d9-67625690b85c.prompt=User Identifier
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.b994b662-7271-49ec-bdb5-d318fa92a75f.prompt=Enter a value for kerberosConfFile
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.ca5e06d1-ca28-4aee-8989-02391117aec6.prompt=Component ID
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.cb2cf31f-6cbb-4582-923d-909175227090.prompt=User Identifier
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.cc4d3964-a9c0-4f7e-ad2e-64e539ff1094.prompt=Enter a value for trustPassword
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.ccae33d2-8f11-4390-87c2-1329e06646b5.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.cd8ceaaf-3313-4e5c-afa4-c33b67db3189.prompt=Enter a value for proxyUsername
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.d251bc58-6aa9-424c-9d46-2f72c3fd2c44.prompt=Component ID
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.d82b023d-b44e-4d8c-ac30-c616c914fe33.prompt=Component ID
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.ddfd0586-5da5-45fa-9008-ae8d96f79588.prompt=User Identifier
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.e414880f-e6ed-4356-a631-0b92efd4026f.prompt=Component ID
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.ee88de07-358f-47d2-8d5f-ee365b3e8ab7.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.f13bd360-64a0-4813-a5cb-1885b7e2310e.prompt=User Identifier
9afb34e9-ba7e-4e3e-badc-b1aea3c02852.f8a52c6b-3648-4d3a-b23d-c1b393328a53.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
9c679269-7fa4-467e-b35b-783e8e0dc670.14efd155-65fb-46ab-bc96-d069362d5492.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
9c679269-7fa4-467e-b35b-783e8e0dc670.2bb7050b-b2ab-4178-a012-6ba6d4b014b0.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
9c679269-7fa4-467e-b35b-783e8e0dc670.5aa1a04f-8f98-4b4a-9195-a1b4e39e96da.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
9c679269-7fa4-467e-b35b-783e8e0dc670.c9f21da3-125f-414a-b807-0bb2bc2040e7.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
9c679269-7fa4-467e-b35b-783e8e0dc670.description=<pre>\nUn Deploy the cloned Server from vCenter.\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
9d773a1d-8a52-4aba-9731-fd80d48bc064.e47af1e0-f7a3-4a4e-9aff-58cb8b792e4b.description=<pre>\nThis workflow requests the life cycle engine to execute and take the given service component and it's childs to the deployed state.\n\nInputs-\ncomponentId \u2013 Service component id\nserviceInstanceId - Service Instance Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
Library\\CSA\ Content\ Pack.description=
Library\\CSA\ Content\ Pack\\Providers.description=
Library\\CSA\ Content\ Pack\\Providers\\vCenter.description=
Library\\CSA\ Content\ Pack\\Providers\\vCenter\\Actions.description=
Library\\CSA\ Content\ Pack\\Providers\\vCenter\\BasicCompute\\Actions.description=
Library\\CSA\ Content\ Pack\\Providers\\vCenter\\BasicCompute\\Subflows.description=
Library\\CSA\ Content\ Pack\\Providers\\vCenter\\BasicCompute\\Subflows\\Deprecated.description=
Library\\CSA\ Content\ Pack\\Providers\\vCenter\\BasicCompute\\Validation.description=
Library\\CSA\ Content\ Pack\\Providers\\vCenter\\Resource\ Sync\\Action.description=
Library\\CSA\ Content\ Pack\\Providers\\vCenter\\Resource\ Sync\\Subflows.description=
Library\\CSA\ Content\ Pack\\Providers\\vCenter\\Subflows.description=
Library\\CSA\ Content\ Pack\\Providers\\vCenter\\Subflows\\Deprecated.description=
Library\\CSA\ Content\ Pack\\Providers\\vCenter\\Validation.description=
a061f958-e268-4274-bb9f-49b87c404d16.14f6dba7-4e26-447c-9d3f-d1021003f760.description=a061f958-e268-4274-bb9f-49b87c404d16.14f6dba7-4e26-447c-9d3f-d1021003f760.description
a061f958-e268-4274-bb9f-49b87c404d16.257065bb-ddb8-4c8f-8070-37cd745f1d6f.description=a061f958-e268-4274-bb9f-49b87c404d16.257065bb-ddb8-4c8f-8070-37cd745f1d6f.description
a061f958-e268-4274-bb9f-49b87c404d16.45252620-89ca-47e7-a47c-0760fdf6a99a.description=a061f958-e268-4274-bb9f-49b87c404d16.45252620-89ca-47e7-a47c-0760fdf6a99a.description
a061f958-e268-4274-bb9f-49b87c404d16.598c9b60-b242-441a-a4d8-f13214428d9e.prompt=a061f958-e268-4274-bb9f-49b87c404d16.598c9b60-b242-441a-a4d8-f13214428d9e.prompt
a061f958-e268-4274-bb9f-49b87c404d16.7295e286-c35d-4d56-899d-cbd835fb5869.description=a061f958-e268-4274-bb9f-49b87c404d16.7295e286-c35d-4d56-899d-cbd835fb5869.description
a061f958-e268-4274-bb9f-49b87c404d16.a44dbf43-381b-4333-812f-ab45386bce8f.description=a061f958-e268-4274-bb9f-49b87c404d16.a44dbf43-381b-4333-812f-ab45386bce8f.description
a061f958-e268-4274-bb9f-49b87c404d16.description=<pre> This flow will list all the virtual machines  in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n\nResponses\:\n    success - The operation completed successfully. It will return the list of virtual machines .\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
a06f7367-742d-4743-94ef-50669a70e9b3.0c010829-18ca-459e-a227-11e4bc9ec74e.prompt=Process Instance ID
a06f7367-742d-4743-94ef-50669a70e9b3.171120bc-d893-4bd1-a97e-7fe3d34538a1.description=<pre>\nThis workflow gets details of the Resource Pool artifact.\n\nInputs-\nresourcePoolId \t- Resource Pool ID\nuserIdentifier  \t- User Identifier id\nresourceType \t\u2013 Resource Type For eg. CPU,MEMORY etc\nauthType \t\t- The authentication type that this operation uses when trying to execute the request on the target server.\n\t\tvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\n\t\tDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile \t- The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout \t\t- The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite \ttimeout.Default value\: 0.\nuseCookies \t\t- If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy \t\t- A proxy to use when accessing the web site.\nproxyPort \t\t- The port on the proxy to connect to.\nproxyUsername\t - The username to use when connecting to the proxy.\nproxyPassword\t - The password to use when connecting to the proxy.\nencodeURL\t\t - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent\t\t - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots\t\t - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore\t\t - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword \t- Password to unlock the keystore.\ntrustKeystore\t - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword\t - Password to unlock the truststore.\n\nOutputs-\ndocument  \t\t- returned XML document from API\nproviderId\t\t- Provider Id of the Resource Pool\npoolReference\t- Pool Reference Name\navailabilityIndicator\t- Availability Indicator of the resource type\nusedByCSA\t\t- resource value consumed by CSA\nunit\t\t- Unit of the resouce \navailabletoCSA\t- Total resource available to CSA\n</pre>
a06f7367-742d-4743-94ef-50669a70e9b3.4fe4e6d2-002d-4a72-98be-1898e82e6791.prompt=User Identifier
a06f7367-742d-4743-94ef-50669a70e9b3.758afff9-261c-4545-a6fa-39c356f99617.prompt=Process Instance ID
a06f7367-742d-4743-94ef-50669a70e9b3.917c9bdc-f01a-429f-8232-d362371216d4.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
a06f7367-742d-4743-94ef-50669a70e9b3.9bd3083b-cb6b-4cb3-a657-00f0cdbd50ba.prompt=User Identifier
a06f7367-742d-4743-94ef-50669a70e9b3.9cd91349-3efa-42ae-9007-9dc3956b3f93.description=<pre>\nThis workflow requests the life cycle engine to execute and take the given service component and it's childs to the deployed state.\n\nInputs-\ncomponentId \u2013 Service component id\nserviceInstanceId - Service Instance Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
a06f7367-742d-4743-94ef-50669a70e9b3.e7e2c178-db2e-414c-babd-f6b0a6864100.prompt=User Identifier
a06f7367-742d-4743-94ef-50669a70e9b3.f3cfb00f-749f-4356-8bb9-5993cad958a5.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
a56b6f96-58ba-4e2b-9c93-85d1ece6da1f.04b88fc0-6c6e-46e2-b12c-f9ffd28bfeee.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
a56b6f96-58ba-4e2b-9c93-85d1ece6da1f.06e1a4aa-84a2-4dc7-8520-d2b1d30a173b.prompt=Enter a value for protocol
a56b6f96-58ba-4e2b-9c93-85d1ece6da1f.58c1e93b-44f8-4326-a098-3a28b4061f51.prompt=Enter a value for host
a56b6f96-58ba-4e2b-9c93-85d1ece6da1f.79a3b6e0-8eb0-4d09-95d3-f1e1b521e51f.prompt=Enter a value for password
a56b6f96-58ba-4e2b-9c93-85d1ece6da1f.9bd746cf-1443-4d89-b8ab-21e7e3275f1d.description=<pre>\nStart the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
a56b6f96-58ba-4e2b-9c93-85d1ece6da1f.b01623ec-b727-4058-ac1c-2e4ebd8026ab.prompt=Enter a value for user
a56b6f96-58ba-4e2b-9c93-85d1ece6da1f.c2e70963-351a-4a15-9bda-2d774fa1e3df.prompt=Enter a value for port
a56b6f96-58ba-4e2b-9c93-85d1ece6da1f.dd540aed-d76d-4351-9800-44703f9541cb.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
a56b6f96-58ba-4e2b-9c93-85d1ece6da1f.description=<pre>\nStart the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
a56b6f96-58ba-4e2b-9c93-85d1ece6da1f.e0d72d94-cb72-4c7d-a088-520133f72fa1.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
a5fdfcaf-418f-4997-b20e-376112562c2f.5e63d9b2-d788-4cb9-b658-e1875bdc9ba0.description=<pre>Retrieves details about an existing hard disk on a virtual machine (VM).\n\nInputs\:\n    host - VMware vCenter, ESX or ESXi host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmIdentifierType - Virtual machine identifier type\nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"\n    vmDatacenter - Virtual machine's datacenter.\n    deviceNumber - The Hard disk number to get details of on the VM.\nExamples\: If a VM as a hard disk named "Hard disk 1" the deviceNumber would be "1".\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    returnResult - Task result or operation result.\n    allocatedSize - Size of the hard disk backing files in bytes.  If the disk is thin provisioned, this value will be lower then the provisioned size (vmDiskSize).\n    diskPath - Path to the disk on the datastore.\n    dataStore - Name of the datastore that contains this disk.\n    diskMode - The disk persistence mode.  Possible values\: persistent, independent_persistent, independent_nonpersistent.\n    thinProvision - Hard disk is thinly provisioned.  Possible values\: true, false.\n    uuid - universally unique identifier (uuid) of the disk.\n    vmDiskSize - The size of the hard disk in bytes.  If the hard disk is thinly provisioned, this is the provisioned size.\n    diskSharesLevel - The vm hard disk shares level. \n    diskShares - The number of shares allocated to the hard disk. The "Normal", "High" and "Low" disk shares level map to a pre-determined set of numeric values for shares. The  "Custom" disk shares level does not map to a pre-determined set of numeric values for shares.\n    parentListJS - If this disk has a delta disk backing file, this result contains a JSON array of the parent virtual disk backing files.\nExample\: ["[datastore] path to\\/parent virtual disk backing file.vmdk","[datastore] path to\\/grandparent virtual disk backing file.vmdk"]\n\nNotes\:\n1. Inventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n\n2. The "parentListJS" result can be used to determine the parent of a linked vm that share the same base disk storage. \n\n3. The "parentListJS" result will be populated with vSphere API 4.0 or greater.\n</pre>
a5fdfcaf-418f-4997-b20e-376112562c2f.6d156976-afe7-475a-916f-647dd6942d50.description=<pre>Inserts a new name/value property into a JSON object, where the value is a valid JSON string. If the <newPropertyValue> input is not a valid string representation of a JSON object, the operation fails.\n\nThe 'Add Property to Object' operation can be used to add a property with a simple string value. \n\nExamples\: \n1)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: [1,2,3]\n     Result\:\n         { "test"\:[1,2,3]}\n2)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: {"a"\:"b"}\n     Result\:\n         { "test"\:{"a"\:"b"}}\n3)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: 1\n     Result\:\n         { "test"\:1}\n\nInputs\:\n    jsonObject - String representation of a JSON object. Objects in JSON are a collection of name value pairs, separated by a colon and surrounded with curly brackets {}. The name must be a string value, and the value can be a single string or any valid JSON object or array.\nExamples\: {"one"\:1, "two"\:2}, {"one"\:{"a"\:"a","B"\:"B"}, "two"\:"two", "three"\:[1,2,3.4]}\n    newPropertyName - The name of the new property to add to the JSON object. \nExamples\: property1, some_property, another property\n    newPropertyValue - The value for the new property. This must be a valid JSON representation of a JavaScript object.\nExamples\: 1, {"A"\:"A"}, [1,2,3,4]\n\nResults\:\n    Result - The JSON array with the inserted element.\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation completed unsuccessfully. See the message in <returnResult> for details.\n</pre>
a5fdfcaf-418f-4997-b20e-376112562c2f.8aa37b61-4f10-4e50-8078-d171ebe7550c.description=<pre>Get all device numbers for a specified device type on a Virtual Machine (VM).\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmDatacenter - Virtual machine's datacenter\ndeviceType - Type of device. Valid values are\: hardDisk, floppyDisk, Cdrom, SCSIController, ethernetCard.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nreturnResult - Task result or operation result\ndeviceId - Number of device of the specified deviceType.\n</pre>
a5fdfcaf-418f-4997-b20e-376112562c2f.c8aa893b-5840-4e16-b278-808071122108.description=<pre>\nInsert an object into a JSON array, optionally specifying the position at which to insert the new object. \n\nThis Operation differes from the 'Add to Array' operation in that this one will try and validate the new element as\na JSON object, whereas 'Add to Array' will just wrap the element in quotes and treat it as a string. This means \nthat the element passed into this operation must be a valid JSON object, or the operation will fail. \n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n    element - The element to insert into the array. As noted above, this must be a valid JSON object or the operation will fail. It can be \n                    any valid JSON object; such as a number, string, an array, or a name/value pair list. Numbers can be entered as-is, strings\n                    must be wrapped in quotes, and objects must be formated correctly (see examples below for more info)\nValid values\: Any valid JSON object\nExamples\: 1 or "a string" or {"one"\:"two", "three"\:"four"} or [1,2,3]\n\n    index -The index in the array at which to insert the new element. If index is undefined, or index is equal to the length of the array \n               (one past the last element), the new element is placed at the end of the array. See the notes above for more information\n               on using negative numbers to specify array elements.\n               If the index is valid, the new element is inserted at that position, and all remaining elements are shifted one position to the right.\n\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\nDefault value\: undefined (insert the new element at the end of the array)\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array with the inserted element.\n\n</pre>
a5fdfcaf-418f-4997-b20e-376112562c2f.description=<pre>Get information about all virtual connected hard disks on a Virtual Machine (VM).\n\nInputs\:\n    host - VMWare host hostname or IP\n    user - VMWare username\n    password - VMWare user's password\n    port - Port to connect on\n    protocol - Connection protocol (http or https)\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\n    virtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123). If nothing is specified, all VMs are retrieved.\n    vmIdentifierType - Virtual machine identifier type\n    vmDatacenter - Virtual machine's datacenter\n\nResponses\:\nsuccess - The flow completed successfully.\nfailure - Something went wrong.\n</pre>
a5fdfcaf-418f-4997-b20e-376112562c2f.f07ebbc2-449d-4a08-b269-d60f60c9718e.description=<pre>\nThis operation adds a flow variable to the local context. The variable is available in the current flow and its child flows.\n\nInputs\:\n    keyName - The name of the flow variable to add.\n    myValue - The value to assign to the flow variable.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of "myValue" input field.\n\nResponses\:\n    success - The operation completed as stated in the description.\n\nNote\:\n   If a flow variable with the same name already exists, its value will be overwritten.\n</pre>
a6fa0f62-341e-4e69-9865-7e5872c5bd69.07f45a70-46d7-4580-bbd0-79ca84cfa5fe.description=<pre>Retrieve information about a virtual machine or a group of virtual machines in a datacenter or host system (pipe-delimited). Retrieve each object one at a time from an initial search query ala SQL Query operation.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvmDatacenter - Virtual machine's datacenter.\nvmIdentifierType - Virtual machine identifier type.\nhostSystem - Target virtual machine host system.\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123).\ngetDetailed - Retrieve detailed information?\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nvmInfo - Virtual machine information.\nnumberOfResults - Number of results from the query remaining to be retrieved.\nreturnResult - Virtual machine ID or operation results.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
a6fa0f62-341e-4e69-9865-7e5872c5bd69.0a7fe516-a1f5-45c6-9085-f476e6f84771.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
a6fa0f62-341e-4e69-9865-7e5872c5bd69.181bc1a8-41e8-4cd0-84c0-93d2df5d0891.description=<pre>Sleeps for the number of seconds specified in the input.\n\nInputs\:\nseconds - The number of seconds to sleep.\n\nResponses\:\nsuccess - Slept for the number of seconds given as input.\nfailure - Was unable to sleep for some reason.\n</pre>
a6fa0f62-341e-4e69-9865-7e5872c5bd69.337f3676-6a6f-48db-9182-04859a30ce5b.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,paused). Does nothing if the virtual machine is already in the power state.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno action - The operation completed with no action performed.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
a6fa0f62-341e-4e69-9865-7e5872c5bd69.4490bce0-b1e2-4db4-975f-be9069295afa.prompt=Enter password
a6fa0f62-341e-4e69-9865-7e5872c5bd69.4588180d-7d52-43f2-9c86-a77282e63dd7.prompt=Virtual Machine\:
a6fa0f62-341e-4e69-9865-7e5872c5bd69.50331eb8-d6b9-4015-9a48-eea200bff7f3.description=<pre>Loops as many number of times as specified in the input, that is, counts from 1 to another number incrementing by 1 for each iteration.\n\nInputs\:\ncount - Number of loops to complete.\nreset - If true, then the counter will restart counting from 1.\n\nReturns\:\nThe number that was just counted.\n\nResponses\:\nhas more \t- Counting has not completed, one or more iterations are pending.\nno more \t- Counting completed. This will only be returned once, then counting restarts.\nfailure \t- Something went wrong.\n</pre>
a6fa0f62-341e-4e69-9865-7e5872c5bd69.74cf298f-812a-47c0-8116-0e744d779a7b.prompt=Password\:
a6fa0f62-341e-4e69-9865-7e5872c5bd69.7ac16ec7-b48f-4b75-b7b7-322c182ef56d.description=<pre>Attempts to reboot the guest virtual machine.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Operation result message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
a6fa0f62-341e-4e69-9865-7e5872c5bd69.882959e3-fd06-49bc-bd24-f8cb86f46a0e.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
a6fa0f62-341e-4e69-9865-7e5872c5bd69.9c9b49f3-b350-4a5b-9a09-0e379e042d74.description=<pre>Retrieve power state of virtual machine (poweredOn,poweredOff,suspended).\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task completion return message.\npowerState - Power state (poweredOn,poweredOff,suspended).\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
a6fa0f62-341e-4e69-9865-7e5872c5bd69.a68e372c-eb0c-49ce-a8e6-bad74223677b.prompt=Virtual Machine\:
a6fa0f62-341e-4e69-9865-7e5872c5bd69.ad5a2c8b-4f87-41fc-ad8c-bf29df09294d.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
a6fa0f62-341e-4e69-9865-7e5872c5bd69.d549de3b-df5f-4991-aebe-342cf1e28eaf.prompt=VMWare Host\:
a6fa0f62-341e-4e69-9865-7e5872c5bd69.description=<pre>\nChanges a VM's power state. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\nDeprecated in favor of the flows from OO Virtualization Content Pack\: vCenter Restart Virtual Machine\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n vmPowerState - the desired power state (on / off etc)\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n serviceXml - xml representation of the server created in vCenter\n</pre>
a6fa0f62-341e-4e69-9865-7e5872c5bd69.e81e0100-c4bd-4b99-b68b-17cd654f4f9a.prompt=Enter user
a8e036b8-57bd-4c71-9f9c-93f333586a65.0a5fd706-fec0-44d5-a6c1-c78ba3634538.prompt=Enter a value for trustPassword
a8e036b8-57bd-4c71-9f9c-93f333586a65.12154855-4e5c-44d2-a833-44f0ed96c7df.description=Check if there is atleast 2 server components in Deployed State to perform Flexin\n\nInput Parameters\:\nserverIds - List of server UUIDs separated by a delimiter\ndelimiter - the list delimiter.\nuserIdentifier - OO Application UUID to authorize a REST Call\n\nResponses\:\n   success - if there are > 1 valid server\n   failure - if there are <\= 1 valid server \n\nResult Fields\:\n NA
a8e036b8-57bd-4c71-9f9c-93f333586a65.1402452c-8277-4676-a2f8-b6ee298094cb.prompt=Enter a value for trustKeystore
a8e036b8-57bd-4c71-9f9c-93f333586a65.350ee2bd-a81c-486b-821e-fb0d82172f6c.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
a8e036b8-57bd-4c71-9f9c-93f333586a65.36def9b3-8579-41eb-b9e0-9334d48da911.prompt=Enter a value for trustKeystore
a8e036b8-57bd-4c71-9f9c-93f333586a65.4d1a903e-2aea-4d06-919b-e069ff76e7ed.description=This workflow returns the component properties and values using Artifact APIs.\n\nresult\:\npropertyNameValuesList\: pipe separated list of property name and values ( where each property name and values would be ; seprated and multiple values would be , seprated)\ne.g. - property 1; value1,value2|property 2; value3|property 3; value3,value4|........
a8e036b8-57bd-4c71-9f9c-93f333586a65.885fe785-800d-4845-9a93-c7e72e346468.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
a8e036b8-57bd-4c71-9f9c-93f333586a65.8a52c1c0-4b65-4bcc-bdce-e9b7a361b8ea.prompt=Enter a value for trustAllRoots
a8e036b8-57bd-4c71-9f9c-93f333586a65.901c4f1a-3798-4fe2-9afe-973d0b72586a.description=<pre>\nThis workflow retrieves all the child components of the parent component id sorted by created time.\n\nInputs\:\n\nartifactId\t\t- Component id for which the child components will be retrieved\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\n\nReturns\:\nchildIds\t- List of child component ids each separated by ","\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
a8e036b8-57bd-4c71-9f9c-93f333586a65.9713ef86-bfd7-428a-b19b-44df6524c93d.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
a8e036b8-57bd-4c71-9f9c-93f333586a65.a8f291d7-e89e-456b-b5d0-36f6db12cfc8.prompt=User Identifier
a8e036b8-57bd-4c71-9f9c-93f333586a65.adbd5950-f336-48f4-92ef-fa8515f9e67c.description=<pre>\nIterates through a list of values. Modifying the value of the list and delimiter inputs during iteration is not generally supported.\n\nInputs\:\nlist - The list to iterate through.\nseparator - A delimiter that separates elements in the list.\n\nReturns\:\nThe current element of the list, if the response is has more\n\nResponses\:\nhas more - Another value was in the list, and has been returned.\nhas no more - The iterator has gone fully through the list. This response will only be returned once per iteration through the list, a subsequent call to the Iterator will restart the Iteration through the list.\nfailure - failed to process the list.\n\nNote\: Where the iterator is in the list is tracked by each step's unique id. Therefore you can iterate on the same list from multiple steps simultaneously.\n\nWARNING\: Any step that will use the results of this Iterator operation will, by default, attempt to assign that step's inputs from a flow variable. If this is left checked, then the first element of the iterator will be used for every cycle of iteration.\n\n</pre>
a8e036b8-57bd-4c71-9f9c-93f333586a65.b9ed5a34-805f-4365-acdc-50af11395e49.prompt=Enter a value for trustPassword
a8e036b8-57bd-4c71-9f9c-93f333586a65.c5a0c369-6021-4504-afd5-1bcbe4a009e9.prompt=Enter a value for trustAllRoots
a8e036b8-57bd-4c71-9f9c-93f333586a65.dd4a474f-836d-42e1-8d16-5481f2e7cf2d.prompt=Artifact ID
a8e036b8-57bd-4c71-9f9c-93f333586a65.description=<pre>This flow runs a flex up/flex down action on a server group. It identifies all the servers in a group and runs the flex memory action on each server to set the memory configuration based on the user input.\n\nInputs\:\nuserIdentifier\t\: The user identifier associated with the CSA login\t\nartifactId\t\t\: The server group component ID\nhost\t\t\: The hostname or IP address of the vCenter provider\nuser\t\t\: The name of the user account to login to the vCenter provider\npassword\t\t\: The password of the user account to login to the vCenter provider\nport\t\t\: The port used by the vCenter provider\nprotocol\t\t\: The protocol used by the vCenter provider\ncpuCount\t\t\: The number of cpus to be flexed\nmemoryInMb\t\t\: The memory in MB that the server should be flex to\n\n\nResponse\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n</pre>
a8e036b8-57bd-4c71-9f9c-93f333586a65.e276048e-9a91-4b8e-b981-96cdfc15ba34.description=Flex up a VM to the specific CPU Memory and Disk that is requested.\n\nInput Parameters\:\n serviceName -name of the service that will be created with this flow\n VCenterHost -  vCenter host to execute against\n VCenterUsername - vCenter username\n VCenterPassword - vCenter password.\n virtualMachine - This is the virtual machine that will be flexed.\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n cpuCount - number of cpus the virtual machine should have.\n memSize - amount of memory the virtual machine should have.\n addDisk - whether or not disk should be added to the vm.\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n NA
a9600c4d-922c-404c-907a-1933c106ce52.3532e369-e969-4fe2-8417-9304067c77c8.prompt=User Identifier
a9600c4d-922c-404c-907a-1933c106ce52.67ebb85c-6670-4dd8-801d-2c26680697dc.description=Changes a VM's power state. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n vmPowerState - the desired power state (on / off etc)\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n serviceXml - xml representation of the server created in vCenter
a9600c4d-922c-404c-907a-1933c106ce52.cd4ea7b3-6cfd-4811-9297-9d7ccc0c45dc.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
a9600c4d-922c-404c-907a-1933c106ce52.d5fee4fa-b0eb-41a4-a753-88a5c0d561bc.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
a9600c4d-922c-404c-907a-1933c106ce52.description=<pre>\nSuspend the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
abd2f532-183e-4eeb-8340-9323cfa856e1.2b891b2f-5e63-4e3f-a4a4-06be9b5c98e2.prompt=Password\:
abd2f532-183e-4eeb-8340-9323cfa856e1.424a3329-7f4e-4e61-ac3f-caf05befbd85.description=<pre>\nRetrieves the most recent event from a root object you specify and compare that event with custom spec is completed or not using the objType and objId inputs, based on the event types you specify in the events input.\n\nInputs\: \nhost - The VMware host hostname or IP address.\nuser - The VMware username.\npassword - The VMware user's password. \nport - The Port to connect to the VMware server. \nprotocol - The connection protocol.The valid values are (http oand https). \ncloseSession - Specifies whether to close the internally kept VMwware Infrastructure API session when the operation completes. The valid values are (true and false).  \nevents-The list of event types, from which the event log for the specified events is created. (for example, VmPoweredOnEvent, VmRelocatedEvent, VmReconfiguredEvent, VmCreatedEvent, VmMigratedEvent, VmRenamedEvent). \nobjType - The type of Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Datacenter, or Datastore) on which to begin the search. \nobjId - The value of the reference (such as vm-123, datastore-123, or network-123) to use as a root object. \nlocaleLang - The locale language in which to format the createdTime result.(for example, en or ja). If you do not specify a value for this input, the default value of en is used.\nlocaleCountry - The locale country in which to format the createdTime result.(for example, en or ja). If you do not specify a value for this input, the default value of US is used.\n\nResponses\: \nsuccess - The operation completed successfully. \nfailure - Something went wrong or the required fields are not provided \nno more - There are no results to retrieve. \n\nReturns\: \nUserName - The name of the user who caused the event. \ncreatedTime - The time that the event was created. \nvm - The VirtualMachine object of the event. \nreturnResult - The UserName or reason for failure.\n</pre>
abd2f532-183e-4eeb-8340-9323cfa856e1.49f062a8-dbb5-4f32-b764-d353376c90ee.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
abd2f532-183e-4eeb-8340-9323cfa856e1.4d097861-dfeb-473a-ab67-5e94fb7b87bb.description=<pre>Clone a virtual machine. The virtual machine may be a template vm. The source virtual machine is specified via vmIdentifierType and virtualMachine (optionally vmDatacenter) while the target configuration is defined by vmName,vmFolder,vmResourcePool,dataStore,hostSystem, and clusterName.\n\nNote\: cannot work across virtual datacenters\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvmDatacenter - Virtual machine's datacenter\nvmName - Virtual machine name being created (new)\nvmFolder - Virtual machine's folder by inventory path, / delimited not including datacenter (eg. ManagedVMs/DRS/Location1). For root folder, use /\nvmResourcePool - Virtual machine's resource pool\ndataStore - Datastore (eg. host\:dsname, mydatastore)\nhostSystem - Target virtual machine host system\nclusterName - Name of the VMWare HA or DRS cluster\nmarkAsTemplate - Mark the virtual machine as a template? Mark as regular virtual machine otherwise\ncustomizationTemplateName - Customization template name to use on the existing virtual machine or on the newly created one if a new VM is being created.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task result or operation result.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
abd2f532-183e-4eeb-8340-9323cfa856e1.610c4739-6861-4ad5-9eb7-0fef7edd3632.prompt=Virtual Machine\:
abd2f532-183e-4eeb-8340-9323cfa856e1.6626b2ad-1c20-4ecf-86b8-6475ef99de58.prompt=Enter password
abd2f532-183e-4eeb-8340-9323cfa856e1.698317ec-530f-43d9-a2d4-baf2f044467c.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,paused). Does nothing if the virtual machine is already in the power state.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno action - The operation completed with no action performed.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
abd2f532-183e-4eeb-8340-9323cfa856e1.8252fbc9-6a2a-450e-8f69-cae36664cc4c.description=<pre>\nFlex up a VM to the specific CPU Memory and Disk that is requested.\n\nInput Parameters\:\n serviceName -name of the service that will be created with this flow\n VCenterHost -  vCenter host to execute against\n VCenterUsername - vCenter username\n VCenterPassword - vCenter password.\n virtualMachine - This is the virtual machine that will be flexed.\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n cpuCount - number of cpus the virtual machine should have.\n memSize - amount of memory the virtual machine should have.\n addDisk - whether or not disk should be added to the vm.\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n NA\n</pre>
abd2f532-183e-4eeb-8340-9323cfa856e1.8a984ba8-e3be-4329-a1ba-f17f1ee80dfd.prompt=VMWare Host\:
abd2f532-183e-4eeb-8340-9323cfa856e1.9f07478b-08a9-4691-a204-21f7387b95c1.prompt=VMWare Host\:
abd2f532-183e-4eeb-8340-9323cfa856e1.a1bcdc4f-ec08-4915-8c6e-ea39759ec9ab.prompt=Virtual Machine name\:
abd2f532-183e-4eeb-8340-9323cfa856e1.a25eb32f-a4b6-4509-96bf-67bdabaf256c.prompt=Xml string for the specification item\:
abd2f532-183e-4eeb-8340-9323cfa856e1.a282201c-0b26-4cdb-8606-d40bf9b2f62a.prompt=Task ID\:
abd2f532-183e-4eeb-8340-9323cfa856e1.a4492101-5167-469e-827c-255652b8d344.prompt=VMWare Host\:
abd2f532-183e-4eeb-8340-9323cfa856e1.add4a1a5-221a-43cd-81b9-bc781276eff5.prompt=Password\:
abd2f532-183e-4eeb-8340-9323cfa856e1.b1847856-84af-4092-8793-5973d6434cb3.prompt=Password\:
abd2f532-183e-4eeb-8340-9323cfa856e1.ca3a0b78-5ef0-4652-b0b5-7347b5fe1753.prompt=Enter user
abd2f532-183e-4eeb-8340-9323cfa856e1.db9145cc-92ab-4b8d-a889-02fd6c1e2d99.description=<pre>Retrieve information about a virtual machine or a set of virtual machines in a datacenter or host system. Retrieve each object one at a time from an initial search query as the one used in the SQL Query operation.\n\nInputs\:\n    host - VMware vCenter, ESX or ESXi host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    vmDatacenter - Datacenter to get virtual machines from.\n    hostSystem - Host system to get virtual machines from.\n    vmIdentifierType - Virtual machine identifier type.  Required if virtualMachine input is used.\nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    getDetailed - Retrieve detailed information?\nValid Values\: true, false\n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResults\n    returnResult - Virtual machine ID (vmid) or reason for failure.\n    vmInfo - Detailed virtual machine information when getDetailed is true.  Properties in this result are pipe delimited.\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    name - Name of the virtual machine.\n    uuid - UUID of the virtual machine.\n    inventoryPath - Inventory path of the virtual machine.\n    dataStore - The name of the datastore where the vm configuration file (.vmx) is stored.\n    vmxPath - The path to the vm configuration file (.vmx) on dataStore.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.  See returnResult for details.\n    no more - There are no more results to retrieve.\n\nNotes\:\n1) Depending on the "host" input value, the inventory path can have one of the following formats\: \n    - If "host" is an ESX server, the inventory path will have the format\: ha-datacenter/vm/<name of vm>\n    - If "host" is a vCenter, the inventory path will have the format\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. \n2) The inventory path is case sensitive.\n</pre>
abd2f532-183e-4eeb-8340-9323cfa856e1.description=<pre>\nCreate a VM from a VM template. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n CPUs - Number of cpus to be set on the VMs\n Memory - Amount of Memory in MB to be set on VMs. Memory should be a multiple of 4.\n port - Port Number toconnect on\n protocol - Connection prtocol(http, https)\n availableCPU - Available CPU in  vCenter\n availableMemory - Available Memory in MB in vCenter\n\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n   \n\nResult Fields\:\n vmId - VMID of the Clone \n</pre>
abd2f532-183e-4eeb-8340-9323cfa856e1.ed46b96e-c488-4a59-8d4c-e4d11aea37fd.description=<pre>Retrieves the current state of the task.\n\nInputs\: \nhost - The VMware host hostname or IP address.\nuser - The VMware username.\npassword - The VMware user's password. \nport - The Port to connect to the VMware server. \nprotocol - The connection protocol.The valid values are (http and https). \ncloseSession - Specifies whether to close the internally kept VMware Infrastructure API session when the operation completes. The valid values are (true and false).  \ntaskId - The task ID (for example, task-1234).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - The task information.\ntaskInfo - The task information.\nUserName - The name of the user responsible for the task.\ndescriptionId - The type of the task.\ntaskState - The task state. ((The possible values are running, success, queued and error).\ntaskProgress - The task progress (The possible values are 0 to 100,inclusive).\ntaskSuccess - Specifies whether the task was successful.\ntaskError - The task error, if any.\ntaskResult - The task result.\ntaskCanceled - Specifies whether the task has been canceled. The possible values are (true and false).\ntaskCancelable - Specifies whether the task has been cancelable. </pre>
acc1c701-1871-4db5-9d5f-4339f555d776.10a2941a-d8fb-4b05-bc18-a4d8217fbf1b.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
acc1c701-1871-4db5-9d5f-4339f555d776.16bd17ad-d640-44ad-bc82-d8365d84d819.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
acc1c701-1871-4db5-9d5f-4339f555d776.188448e0-186c-43f9-a697-1b9bbde6cbf5.prompt=User Identifier
acc1c701-1871-4db5-9d5f-4339f555d776.192dc3b6-24ec-4583-98da-b7e2972aa4d6.prompt=User Identifier
acc1c701-1871-4db5-9d5f-4339f555d776.1cb1c841-8874-4ad7-b9d7-0d5b0567c931.prompt=User Identifier
acc1c701-1871-4db5-9d5f-4339f555d776.1d6ff016-0384-4004-bb08-8786a446fdb4.prompt=User Identifier
acc1c701-1871-4db5-9d5f-4339f555d776.23fac45c-6334-439a-a9a2-1ac83672ee11.description=This workflow returns the component properties and values using Artifact APIs.\n\nresult\:\npropertyNameValuesList\: pipe separated list of property name and values ( where each property name and values would be ; seprated and multiple values would be , seprated)\ne.g. - property 1; value1,value2|property 2; value3|property 3; value3,value4|........
acc1c701-1871-4db5-9d5f-4339f555d776.461d1f30-7326-4b03-a9cf-056483259945.prompt=Component ID
acc1c701-1871-4db5-9d5f-4339f555d776.584d56c0-0ecc-42f6-b54f-cc76eee6dd8c.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
acc1c701-1871-4db5-9d5f-4339f555d776.587b572c-2d59-432e-a317-775b4f72d449.prompt=User Identifier
acc1c701-1871-4db5-9d5f-4339f555d776.5e05aab2-ce60-4989-920a-e25ddcd57d90.prompt=User Identifier
acc1c701-1871-4db5-9d5f-4339f555d776.5e806c85-a153-4101-b359-8042848c5703.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
acc1c701-1871-4db5-9d5f-4339f555d776.77b48d98-6aa0-4f3a-a35e-1ae776d180c5.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
acc1c701-1871-4db5-9d5f-4339f555d776.79296818-f5b1-4c42-862e-efb7d5e21478.prompt=Component ID
acc1c701-1871-4db5-9d5f-4339f555d776.7e6f6d6d-d51f-49b2-919b-1e65cc961a9e.prompt=Component ID
acc1c701-1871-4db5-9d5f-4339f555d776.7f6116de-3382-493d-9280-51ee0d8dc9f0.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
acc1c701-1871-4db5-9d5f-4339f555d776.85e99b1f-74cf-4ca1-950e-cd3242f83e5a.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
acc1c701-1871-4db5-9d5f-4339f555d776.8b7b330d-b13a-436b-954b-c2ded2315936.prompt=User Identifier
acc1c701-1871-4db5-9d5f-4339f555d776.8dd70a98-7fc4-4364-95ab-b33a72c196c8.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
acc1c701-1871-4db5-9d5f-4339f555d776.92fcbd29-d160-426a-8b35-7f7e79468710.prompt=Component ID
acc1c701-1871-4db5-9d5f-4339f555d776.9c30c478-7385-453a-a500-faf4d9c6bc8e.prompt=User Identifier
acc1c701-1871-4db5-9d5f-4339f555d776.9dbf1f9a-7414-48f0-899e-4ac610f5698a.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
acc1c701-1871-4db5-9d5f-4339f555d776.a0863dce-473a-4b1c-b26e-e7e57d6368c2.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
acc1c701-1871-4db5-9d5f-4339f555d776.a71cddb3-20ed-4751-afd6-9c5584a933b0.prompt=Component ID
acc1c701-1871-4db5-9d5f-4339f555d776.a7e847d5-bcea-4aac-af6f-09436dabfebc.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
acc1c701-1871-4db5-9d5f-4339f555d776.b1dec8f0-396f-46c9-8d0a-7b28688d3a4f.prompt=Component ID
acc1c701-1871-4db5-9d5f-4339f555d776.bbb42428-366c-4e9d-8465-fc6d34f02083.prompt=Component ID
acc1c701-1871-4db5-9d5f-4339f555d776.bbf851ea-1fca-4ffb-aec9-d25e226e9c4c.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
acc1c701-1871-4db5-9d5f-4339f555d776.c9b9c70f-85b2-4bda-a795-8a4ae8037ae1.prompt=Artifact ID
acc1c701-1871-4db5-9d5f-4339f555d776.cb6b6c49-6bf4-427d-8b47-34aef3448858.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
acc1c701-1871-4db5-9d5f-4339f555d776.ebb2cd5b-50be-4621-8216-58ea6b33255f.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
ad84359b-815d-4373-9d11-9c39889175e6.062aa643-03a3-45e2-bda9-4cd5cd05e22c.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
ad84359b-815d-4373-9d11-9c39889175e6.311863aa-e900-4923-8ec1-b06403cb1a4d.description=Create a VM from a VM template. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n serviceXml - xml representation of the server created in vCenter
ad84359b-815d-4373-9d11-9c39889175e6.378a7880-163d-4919-a308-13ef063a3b60.prompt=Name of guest customization template\:
ad84359b-815d-4373-9d11-9c39889175e6.77154759-91c3-4870-9f43-26364cfaef84.prompt=Password\:
ad84359b-815d-4373-9d11-9c39889175e6.a71ca327-403e-4bae-bfa1-0755c5cde892.prompt=Enter password
ad84359b-815d-4373-9d11-9c39889175e6.description=<pre>\nProvision a VM from a VM template. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n port - Port Number toconnect on\n protocol - Connection prtocol(http, https)\n datacenterName -  target Datacenter on the vCenter host for the VMs\n hostname - VM Name\n templateReference - clone template Name\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n CPUs - Number of cpus to be set on the VMs\n Memory - Amount of Memory in MB to be set on VMs. Memory should be a multiple of 4.\n availableCPU - Available CPU in  vCenter\n availableMemory - Available Memory in MB in vCenter\n disksize - Size of the disk space needed on the VM in GB\n toEmail - Email Address of the recepient to receive a Email Notification \n fromEmail - Email Address of the Sender\n smtpHost - SMTP Hostname/IP Address\n smtpPort - SMTP Port\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n\nReturns\n vmId - VM Identifies of the created VM\n ipAddress - IP Address of the created VM\n macAddress - MAC Address of the created VM\n</pre>
ad84359b-815d-4373-9d11-9c39889175e6.e4af137c-882f-4795-b001-09b8ba5c581f.prompt=Enter user
ad84359b-815d-4373-9d11-9c39889175e6.f8efccdd-7182-43b7-88e7-2b3d0f0046de.prompt=VMWare Host\:
ae9462a1-230f-45d9-8ca3-644be32c967a.ab3cf6d1-a84e-4305-8821-fc787cfb979a.description=<pre>Searches for VMWare objects containing a given name (ignoring case). Retrieves each object one at a time from an initial search query as the one used for the SQL Query operation.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on. Type of object results desired.\nExample\: VirtualMachine, Network, ComputeResource, ClusterComputeResource, ResourcePool, HostSystem, Datastore, Datacenter, VirtualApp\n    nameToMatch - The string to perform a case insensitive contains match to. Only objects that contain this string in their name will be matched.  If not specified, all objects of the specified type will be matched.\n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResults\:\n    returnResult - This is the primary result. It contains the query result item from the current iteration, a message if there are no more items to be retrieved or an error message otherwise.\n    numberOfResults - This contains the number of results from the query remaining to be retrieved.\n    returnCode - It contains the value 0 if the operation successfully completed but there are still more items to be retrieved, the value 1, if the operation successfully completed and there are no more items to be retrieved and the value -1 if an error occurred.\n\nResponses\:\n    success - The operation completed successfully and there are more results available.\n    failure - Something went wrong.\n    no more - There are no more results to retrieve.\n</pre>
ae9462a1-230f-45d9-8ca3-644be32c967a.cb0b3a6f-7f5d-4fb5-9d34-d5e8dc6b2e44.prompt=VMWare Host\:
ae9462a1-230f-45d9-8ca3-644be32c967a.d9d3359d-65ad-4d75-bb20-718932902e83.description=<pre>\nInsert an object into a JSON array, optionally specifying the position at which to insert the new object. \n\nThis Operation differes from the 'Add to Array' operation in that this one will try and validate the new element as\na JSON object, whereas 'Add to Array' will just wrap the element in quotes and treat it as a string. This means \nthat the element passed into this operation must be a valid JSON object, or the operation will fail. \n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n    element - The element to insert into the array. As noted above, this must be a valid JSON object or the operation will fail. It can be \n                    any valid JSON object; such as a number, string, an array, or a name/value pair list. Numbers can be entered as-is, strings\n                    must be wrapped in quotes, and objects must be formated correctly (see examples below for more info)\nValid values\: Any valid JSON object\nExamples\: 1 or "a string" or {"one"\:"two", "three"\:"four"} or [1,2,3]\n\n    index -The index in the array at which to insert the new element. If index is undefined, or index is equal to the length of the array \n               (one past the last element), the new element is placed at the end of the array. See the notes above for more information\n               on using negative numbers to specify array elements.\n               If the index is valid, the new element is inserted at that position, and all remaining elements are shifted one position to the right.\n\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\nDefault value\: undefined (insert the new element at the end of the array)\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array with the inserted element.\n\n</pre>
ae9462a1-230f-45d9-8ca3-644be32c967a.e6fb8ddd-60fa-43d4-994f-b42c0e43b96f.prompt=Password\:
b0525412-1231-46a5-b6ad-48cb2d7897c0.5c5ff4e1-766f-4614-93fc-0300b9411e39.prompt=0d6e9bff-b751-4297-986e-d5a39ee9ad89.170c1c0e-1054-4f53-ba9c-d6fdd3327c66.prompt
b0525412-1231-46a5-b6ad-48cb2d7897c0.f11ef9df-f4cc-4d05-8a94-80ad96e65400.description=<pre>Delete an existing snapshot of a virtual machine or all snapshots of a virtual machine.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of vm, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nasync - Asynchronously perform the task (true, false).\ntaskTimeOut - Time to wait before the operation is considered to have failed in seconds (used when async is false).\nsnapshotName - Name of snapshot if not removing all snapshots.\nremoveChildren - Remove children of snapshot in addition to the named snapshot?\nremoveAllSnapshots - Remove all snapshots?\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
b1afe762-8ae1-4993-9726-ace135c48adb.3642437b-c569-40dc-9822-fbecdfee4017.prompt=Enter password
b1afe762-8ae1-4993-9726-ace135c48adb.3f84fbcb-61d8-4d4f-be6b-42ae2b975926.description=Create a VM from a VM template. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n serviceXml - xml representation of the server created in vCenter
b1afe762-8ae1-4993-9726-ace135c48adb.bd53f7cb-59b1-467c-b103-34c5312594d7.prompt=Enter user
b1afe762-8ae1-4993-9726-ace135c48adb.description=<pre>\nProvision a VM from a VM template. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n port - Port Number toconnect on\n protocol - Connection prtocol(http, https)\n datacenterName -  target Datacenter on the vCenter host for the VMs\n hostname - VM Name\n templateReference - clone template Name\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n CPUs - Number of cpus to be set on the VMs\n Memory - Amount of Memory in MB to be set on VMs. Memory should be a multiple of 4.\n availableCPU - Available CPU in  vCenter\n availableMemory - Available Memory in MB in vCenter\n disksize - Size of the disk space needed on the VM in GB\n toEmail - Email Address of the recepient to receive a Email Notification \n fromEmail - Email Address of the Sender\n smtpHost - SMTP Hostname/IP Address\n smtpPort - SMTP Port\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n\nReturns\n vmId - VM Identifies of the created VM\n ipAddress - IP Address of the created VM\n macAddress - MAC Address of the created VM\n</pre>
b420979a-dfe9-4e1f-b571-dbe0892b44b9.e8ddc00a-b746-43fb-9080-aaeade1ab0de.description=<pre>\nThis workflow requests the life cycle engine to execute and take the given service component and it's childs to the deployed state.\n\nInputs-\ncomponentId \u2013 Service component id\nserviceInstanceId - Service Instance Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
b6686f70-733a-44a1-b6bb-6c3238be8a0e.1fd7cf3a-1242-49e3-bef9-6506e7417c7b.description=<pre>\nInsert an object into a JSON array, optionally specifying the position at which to insert the new object. \n\nThis Operation differes from the 'Add to Array' operation in that this one will try and validate the new element as\na JSON object, whereas 'Add to Array' will just wrap the element in quotes and treat it as a string. This means \nthat the element passed into this operation must be a valid JSON object, or the operation will fail. \n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n    element - The element to insert into the array. As noted above, this must be a valid JSON object or the operation will fail. It can be \n                    any valid JSON object; such as a number, string, an array, or a name/value pair list. Numbers can be entered as-is, strings\n                    must be wrapped in quotes, and objects must be formated correctly (see examples below for more info)\nValid values\: Any valid JSON object\nExamples\: 1 or "a string" or {"one"\:"two", "three"\:"four"} or [1,2,3]\n\n    index -The index in the array at which to insert the new element. If index is undefined, or index is equal to the length of the array \n               (one past the last element), the new element is placed at the end of the array. See the notes above for more information\n               on using negative numbers to specify array elements.\n               If the index is valid, the new element is inserted at that position, and all remaining elements are shifted one position to the right.\n\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\nDefault value\: undefined (insert the new element at the end of the array)\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array with the inserted element.\n\n</pre>
b6686f70-733a-44a1-b6bb-6c3238be8a0e.480c2fe4-e125-4672-8c02-e114522657d5.prompt=VMWare Host\:
b6686f70-733a-44a1-b6bb-6c3238be8a0e.48e50f30-9e19-4d3b-8ad1-b430267f8a7c.prompt=VMWare User\:
b6686f70-733a-44a1-b6bb-6c3238be8a0e.567208df-f686-495a-88ce-3d888efbc86f.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
b6686f70-733a-44a1-b6bb-6c3238be8a0e.8277e298-da3f-462e-8ff8-15224116d9f3.prompt=Close session?\:
b6686f70-733a-44a1-b6bb-6c3238be8a0e.c9fa0fd3-b8a0-4441-93d8-64adea9bf298.description=<pre>Search for VMWare objects of type propsType and their properties (propsPathset) from a root object (if any) specified by propsRootObjType and propsRootObj. Retrieves each object's properties one at a time from an initial search query as the one used for the SQL Query operation. Please see VMWare Integration Guide for more details.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n    no more - There are no more results to retrieve.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
b6686f70-733a-44a1-b6bb-6c3238be8a0e.db8d2bb3-bbfe-4496-a26e-b85ea654d4e2.prompt=Password\:
b7c6e7b2-a730-4557-8c92-5d807ca105c8.00c2fd11-d34d-4831-9cf1-b10aee58be81.prompt=Component ID
b7c6e7b2-a730-4557-8c92-5d807ca105c8.0f47fc8a-db52-4dac-9c09-f9560814eeff.description=<pre>\nThis workflow adds/updates the service component property using Artifact API.\n\nInputs-\ncomponentId \u2013 Service Component  id\nuserIdentifier  - User Identifier id\ndisplayName - Property Display Name to  add or update\npropertyName \u2013 Property Name to add or update\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\nvalueType - Value type of the property. It can have value from selection list "HP CSA \u2013 Property ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values delimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator - A delimiter that separates elements in the values ( default delimiter used is comma ,)\nconsumerVisible - Do you want to make property visible on consumer portal? (true/false), Default set to true\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
b7c6e7b2-a730-4557-8c92-5d807ca105c8.7dad58ea-0e3f-4ebd-9e10-08f18363d39a.prompt=Component ID
b7c6e7b2-a730-4557-8c92-5d807ca105c8.a6e64405-bd26-4427-a341-6c8ccb456a24.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
b7c6e7b2-a730-4557-8c92-5d807ca105c8.b2508966-6258-4dbd-beb2-ea9599b0c375.prompt=User Identifier
b7c6e7b2-a730-4557-8c92-5d807ca105c8.beeec185-3d1f-414c-9101-b5e2ff25612c.description=<pre>\nThis workflow adds/updates the service component property using Artifact API.\n\nInputs-\ncomponentId \u2013 Service Component  id\nuserIdentifier  - User Identifier id\ndisplayName - Property Display Name to  add or update\npropertyName \u2013 Property Name to add or update\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\nvalueType - Value type of the property. It can have value from selection list "HP CSA \u2013 Property ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values delimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator - A delimiter that separates elements in the values ( default delimiter used is comma ,)\nconsumerVisible - Do you want to make property visible on consumer portal? (true/false), Default set to true\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
b7c6e7b2-a730-4557-8c92-5d807ca105c8.c9417f96-5503-465c-a162-990df77f2a5c.prompt=User Identifier
b7c6e7b2-a730-4557-8c92-5d807ca105c8.d1b926dc-3b77-4b4c-af88-5934facf8919.prompt=Component ID
b7c6e7b2-a730-4557-8c92-5d807ca105c8.d4247ea0-6439-4026-a30a-6e76b397358c.description=<pre>\nThis workflow adds/updates the service component property using Artifact API.\n\nInputs-\ncomponentId \u2013 Service Component  id\nuserIdentifier  - User Identifier id\ndisplayName - Property Display Name to  add or update\npropertyName \u2013 Property Name to add or update\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\nvalueType - Value type of the property. It can have value from selection list "HP CSA \u2013 Property ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values delimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator - A delimiter that separates elements in the values ( default delimiter used is comma ,)\nconsumerVisible - Do you want to make property visible on consumer portal? (true/false), Default set to true\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
b7c6e7b2-a730-4557-8c92-5d807ca105c8.e2180e1f-f7f8-4136-a2b0-99d61014ad49.prompt=User Identifier
b7c984cb-8f76-4375-aa6f-cd32cc5ba52a.01c3de9c-8c5e-449d-b343-795956a5af77.description=<pre>Create a snapshot of an existing virtual machine disks and optionally the virtual machine memory if it is running. \n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nasync - Asynchronously perform the task (true, false).\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds).\nsnapshotName - Name of snapshot.\ndescription - Description / annotation of the snapshot.\nsnapshotMem - Snapshot virtual machine memory as well if virtual machine is running? Valid inputs\: true, false (default is true).\nquiesce - Quiesce guest filesystem if vmware tools is install on guest os and virtual machine is running? Valid inputs\: true, false (default is true).\n\nResponses\:\nsuccess - If async is true the task was successfuly queued.  If async is false the snapshot of the virtual machine was successfuly created.\nfailure - Something went wrong.  See returnResult for details.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
b7c984cb-8f76-4375-aa6f-cd32cc5ba52a.53c2c681-c9bd-486e-900a-5124af6ab75a.prompt=Virtual Machine\:
b7c984cb-8f76-4375-aa6f-cd32cc5ba52a.95ec2ef1-d8ac-4923-92bf-2ff1bdbfeda2.prompt=VMWare Host\:
b7c984cb-8f76-4375-aa6f-cd32cc5ba52a.9a0a7558-2068-499a-95cb-935f6e50a9e2.description=<pre>Retrieve information about a virtual machine or a group of virtual machines in a datacenter or host system (pipe-delimited). Retrieve each object one at a time from an initial search query ala SQL Query operation.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvmDatacenter - Virtual machine's datacenter.\nvmIdentifierType - Virtual machine identifier type.\nhostSystem - Target virtual machine host system.\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123).\ngetDetailed - Retrieve detailed information?\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nvmInfo - Virtual machine information.\nnumberOfResults - Number of results from the query remaining to be retrieved.\nreturnResult - Virtual machine ID or operation results.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
b82b2e28-1cf3-444c-b35d-8e39a90ed238.3e5afb27-47b0-41b4-b42a-23c07dd3131a.description=b82b2e28-1cf3-444c-b35d-8e39a90ed238.3e5afb27-47b0-41b4-b42a-23c07dd3131a.description
b82b2e28-1cf3-444c-b35d-8e39a90ed238.3fbee013-27ed-4d46-a5b0-2ee7bdf8f176.description=<pre> This flow will list all the templates in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of templates.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
b82b2e28-1cf3-444c-b35d-8e39a90ed238.50634030-eb98-425a-81af-9df8599e856c.description=b82b2e28-1cf3-444c-b35d-8e39a90ed238.f74d8ffa-dbd9-4cb9-86f8-200b5674bb20.description
b82b2e28-1cf3-444c-b35d-8e39a90ed238.657c2065-fb90-47a6-a7aa-0bb4bb863789.description=<pre> This flow will list all the datacenters in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n\nResponses\:\n    success - The operation completed successfully. It will return the list of datacenters.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
b82b2e28-1cf3-444c-b35d-8e39a90ed238.baaca769-7ef1-4a05-9d9d-3cf97662e795.description=<pre>This operation retrieves the vCenter details.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n\nResults\:\n    returnResult - This is the primary result. It contains the vCenter version.\n    exception - In case of success response, this result is empty. In case of failure response, this result contains the java stack trace of the runtime exception.\n    returnCode - It contains the value 0 if the operation successfully completed but there are still more items to be retrieved, the value 1, if the operation successfully completed and there are no more items to be retrieved and the value -1 if an error occurred.\n    instanceUuid - Globally unique identifier associated with this vCenter Server instance.\n    build - Build string for the server.\nFor example, x.y.z-num. This string does not apply to the API\n    name - Short form of the product name.\n    osType - Operating system type and architecture.\n    vendor - Name of the product vendor.\n    version - Version of the product as a dot separated version string.\nFor example, 1.2.\n\nResponses\:\n    success - The operation completed successfully and there are more results available.\n    failure - Something went wrong.\n</pre>
b82b2e28-1cf3-444c-b35d-8e39a90ed238.cb94bc34-377a-4489-a783-cb008d4ade15.description=b82b2e28-1cf3-444c-b35d-8e39a90ed238.cb94bc34-377a-4489-a783-cb008d4ade15.description
b82b2e28-1cf3-444c-b35d-8e39a90ed238.db9196da-c6d0-449f-82f2-f07e75c0b160.description=<pre> This flow will list all the customspecs in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n\nResponses\:\n    success - The operation completed successfully. It will return the list of customspecs.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
b82b2e28-1cf3-444c-b35d-8e39a90ed238.description=<pre> This flow will list all the details like datacenter, datastore, networks, templates, virtual machines, folders and customespecs in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    providerid - Id of the vCenter provider\n\nResponses\:\n    success - The operation completed successfully. It will return the list details like datacenter, datastore, networks, templates, virtual machines, folders and customespecs in the vCenter.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
b82b2e28-1cf3-444c-b35d-8e39a90ed238.f79ef08f-4126-42af-ab77-1fdfe4d927e7.description=b82b2e28-1cf3-444c-b35d-8e39a90ed238.f79ef08f-4126-42af-ab77-1fdfe4d927e7.description
b8358b92-09b6-418c-98f7-533bda61f897.description=wating time in seconds if  IP is not asssigned while collecting the Guest properties from server
b85f656b-2602-4685-b12b-f7f6c1085b81.07a38cb4-c97c-4f7c-888e-90b947702c05.prompt=Enter a value for trustKeystore
b85f656b-2602-4685-b12b-f7f6c1085b81.11ddc751-3f8b-4bbe-aba6-f9c013e645e8.prompt=Enter a value for authType
b85f656b-2602-4685-b12b-f7f6c1085b81.1a8919ff-e047-476c-9ef6-3513c4196190.prompt=Enter a value for useCookies
b85f656b-2602-4685-b12b-f7f6c1085b81.204e9070-6326-4ca4-b39a-635fb2f438a3.prompt=Enter a value for proxyUsername
b85f656b-2602-4685-b12b-f7f6c1085b81.2185afdb-3bef-445d-bbab-03c7d0e2349d.prompt=Enter a value for followRedirects
b85f656b-2602-4685-b12b-f7f6c1085b81.21c81752-f7f9-4141-83ee-f78aea1fbb37.prompt=Enter a value for trustAllRoots
b85f656b-2602-4685-b12b-f7f6c1085b81.2e2b38f5-8ddd-4d51-8927-b6cb324fc656.prompt=User Identifier
b85f656b-2602-4685-b12b-f7f6c1085b81.303b4881-f707-4ba4-a994-926546a1bd5a.prompt=Enter a value for trustKeystore
b85f656b-2602-4685-b12b-f7f6c1085b81.3f9a037e-f326-4a5a-92e6-9a6d6c7056a2.prompt=Enter a value for trustAllRoots
b85f656b-2602-4685-b12b-f7f6c1085b81.48b8fbe3-eab6-4c9a-bf13-d7b997a91983.prompt=Enter a value for timeout
b85f656b-2602-4685-b12b-f7f6c1085b81.4b26aeb2-ae0e-4c81-aef8-fdf25b6c08c5.prompt=Enter a value for keystorePassword
b85f656b-2602-4685-b12b-f7f6c1085b81.56ef84ef-6001-4915-b719-5c80bc5c7313.prompt=Enter a value for proxyPort
b85f656b-2602-4685-b12b-f7f6c1085b81.6e6dac11-0f9e-46fe-ab5b-8340143ef776.prompt=Enter a value for keystore
b85f656b-2602-4685-b12b-f7f6c1085b81.74387706-47df-4076-8680-a6c8f81c4724.prompt=Enter a value for proxyPassword
b85f656b-2602-4685-b12b-f7f6c1085b81.7ac28cfa-8b82-41a6-a612-30b69a686258.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
b85f656b-2602-4685-b12b-f7f6c1085b81.7bee74db-59cc-4b44-a24a-64b46b3658cf.prompt=Enter a value for socketTimeout
b85f656b-2602-4685-b12b-f7f6c1085b81.80b76211-a0da-4b9e-99f6-12e344f244cc.prompt=Enter a value for kerberosConfFile
b85f656b-2602-4685-b12b-f7f6c1085b81.914690e3-779d-4fab-ac2a-8ce8a8e3ed87.prompt=Enter a value for proxy
b85f656b-2602-4685-b12b-f7f6c1085b81.97f79a60-045f-4428-a1dd-12799950c28e.prompt=Artifact ID
b85f656b-2602-4685-b12b-f7f6c1085b81.9ba9e0b9-9311-4a8d-9302-e69e59398bef.prompt=Enter a value for trustPassword
b85f656b-2602-4685-b12b-f7f6c1085b81.9bc8410e-4740-4b20-9e72-fd8c336ed6ab.description=<pre>\nThis workflow returns the details of the given artifact id.\n\nInputs-\nartifactId \u2013   Artifact  Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nsocketTimeout - The number of milliseconds to wait for the data to be retrieved. This input should be assigned a value greater than or equal to zero. A socketTimeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nfollowRedirects - If true, the GET command automatically follows redirects. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\nname \u2013  name of the artifactr \ndisplayName \u2013 display name of the artifact\nartifactType \u2013 Artifact type\nstate \u2013 state of the artifact\nlifeCycleState \u2013  life cycle state of the artifact\nlifeCycleSubState \u2013 life cycle sub state of the artifact\ndocument  \u2013 returned XML document from API\n</pre>
b85f656b-2602-4685-b12b-f7f6c1085b81.c64ed402-bc08-4da0-82ea-13e905b19732.prompt=Enter a value for trustPassword
b85f656b-2602-4685-b12b-f7f6c1085b81.c6b921d8-932d-40b6-9b1f-15e7f91540ae.description=<pre>\nIterates through a list of values. Modifying the value of the list and delimiter inputs during iteration is not generally supported.\n\nInputs\:\nlist - The list to iterate through.\nseparator - A delimiter that separates elements in the list.\n\nReturns\:\nThe current element of the list, if the response is has more\n\nResponses\:\nhas more - Another value was in the list, and has been returned.\nhas no more - The iterator has gone fully through the list. This response will only be returned once per iteration through the list, a subsequent call to the Iterator will restart the Iteration through the list.\nfailure - failed to process the list.\n\nNote\: Where the iterator is in the list is tracked by each step's unique id. Therefore you can iterate on the same list from multiple steps simultaneously.\n\nWARNING\: Any step that will use the results of this Iterator operation will, by default, attempt to assign that step's inputs from a flow variable. If this is left checked, then the first element of the iterator will be used for every cycle of iteration.\n\n</pre>
b85f656b-2602-4685-b12b-f7f6c1085b81.d0f74152-0ca3-4cf8-8e6f-c075764d9fda.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
b85f656b-2602-4685-b12b-f7f6c1085b81.d25627d4-852c-454b-a6f9-72e7fe119a49.prompt=Enter a value for encodeURL
b85f656b-2602-4685-b12b-f7f6c1085b81.d5db9bf3-c1d4-4192-ada3-7a7f63622458.description=<pre>Useful Op to keep a running results.\nTakes a string input (resultText) and appends this to a global context key of "runningResults". As a result, the context key whose name is in the keyName input will be appended with the string from the input resultText.\n\nInput Parameters\:\nkeyName - name of context key to append to\nresultText - string input to append\ndelimiter - (leave blank for none) the delimiter to put between what is already in keyName before appending resultText\n\nResponses\:\nsuccess - assigned the context variable\n\nReturns\:\nThe the value of the context variable it appended to.\n\nContext\:\nrunningResults\n\nScriptlet Example\:\ncurrentResults \= scriptletContext.get("runningResults");\n\nif (currentResults \=\= null) {\n   currentResults \= resultText;\n} else {\n   currentResults +\= resultText;\n}\n\n\nscriptletContext.putGlobal("runningResults", currentResults);</pre>
b85f656b-2602-4685-b12b-f7f6c1085b81.description=<pre>\nFilter the list of server Ids for Deployed state.\n\nInput Parameters\:\nserverIds - List of server UUIDs separated by a delimiter\ndelimiter - the list delimiter.\nuserIdentifier - OO Application UUID to authorize a REST Call\n\nResponses\:\n   success - Flow completed succesfully\n   failure - failed otherwise \n\nResult Fields\:\n deployedServers - List of serverids which are in Deployed State.\n serverPatternId - Server Id with Pattern set on the artifact.\n</pre>
b85f656b-2602-4685-b12b-f7f6c1085b81.e4c5f31c-c9d6-4555-aff7-af0f08c297a7.prompt=Enter a value for userAgent
b85f656b-2602-4685-b12b-f7f6c1085b81.f39cbb8b-738e-4116-8fa8-6a24db2b9168.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
b85f656b-2602-4685-b12b-f7f6c1085b81.fa10a52f-d2e5-47bd-b412-82a4a3f291a4.prompt=String to Append \:
b94fdb2f-13bb-49bf-a625-c5951af0a9a9.2184d4be-db73-41e2-8157-119b7d05d067.prompt=Artifact ID
b94fdb2f-13bb-49bf-a625-c5951af0a9a9.3c9b6a22-fb57-47c9-abc9-fa968f225691.prompt=Service Component Id
b94fdb2f-13bb-49bf-a625-c5951af0a9a9.4605edf1-b4cd-47c2-ae20-741ef7115411.description=This workflow returns the artifact's properties and values using Artifact APIs.\n\nresult\:\npropertyNameValuesList\: pipe separated list of property name and values ( where each property name and values would be ; seprated and multiple values would be , seprated)\ne.g. - property 1; value1,value2|property 2; value3|property 3; value3,value4|........
b94fdb2f-13bb-49bf-a625-c5951af0a9a9.4d7329c2-25df-412c-958e-2401fbad90ff.prompt=User Identifier
b94fdb2f-13bb-49bf-a625-c5951af0a9a9.63929bf7-e252-4245-b8e3-dfd22bac157b.prompt=User Identifier
b94fdb2f-13bb-49bf-a625-c5951af0a9a9.69b502ae-6131-4bfe-ba1c-14199862d7eb.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
b94fdb2f-13bb-49bf-a625-c5951af0a9a9.9a8f6b55-77e4-4ce1-bcea-5fd6fe1fa795.description=This workflow adds/updates the component property using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\n\nvalueType - Value type of the property. It can have value from selection list "CSA-Property-ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values dilimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator -  A delimiter that separates elements in the values ( default dilimiter used is comma ,)
b94fdb2f-13bb-49bf-a625-c5951af0a9a9.a46265b5-f725-45e6-8195-0063183ce432.prompt=Service Component Id
b94fdb2f-13bb-49bf-a625-c5951af0a9a9.description=<pre>\nRemove a Server from the Server Group\n\nInput Parameters\:\nserverGrpId - Server Group Component Id\nserviceInstanceId - Service Instance Id of the Subscription\nserverId - Server component Id \nreduceServers - Number of Servers to be removed - default to 1\nuserIdentifier - OO Application UUID to authorize a REST Call\n\nResponses\:\n   success -  if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n NA\n</pre>
b94fdb2f-13bb-49bf-a625-c5951af0a9a9.e1167e1d-7975-4478-bf92-740c4b3a9903.prompt=Component ID
b94fdb2f-13bb-49bf-a625-c5951af0a9a9.e2263fd6-0090-4b4f-a9f4-fcedc3a65bbc.prompt=Service Instance Id
b94fdb2f-13bb-49bf-a625-c5951af0a9a9.e76fe934-3ddb-490d-964f-66d2ddb75139.description=<pre>\nSubtracts two numbers\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe difference of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
b99a9c15-bc8c-45a0-9902-ac4ea427cb33.167c18c4-0f00-437e-9319-a64615051cee.prompt=VMWare Host\:
b99a9c15-bc8c-45a0-9902-ac4ea427cb33.3e9173f1-a4d9-4adb-b9dd-dc03fa864403.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
b99a9c15-bc8c-45a0-9902-ac4ea427cb33.748e5425-0a4c-468a-85e1-de309cbaaf0f.prompt=Enter password
b99a9c15-bc8c-45a0-9902-ac4ea427cb33.85dfb4ec-cb56-4288-86f8-65c6d4312afe.description=<pre>Retrieve power state of virtual machine (poweredOn,poweredOff,suspended).\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task completion return message.\npowerState - Power state (poweredOn,poweredOff,suspended).\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
b99a9c15-bc8c-45a0-9902-ac4ea427cb33.8fab817b-324d-46e1-8ebd-1db461f6c392.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
b99a9c15-bc8c-45a0-9902-ac4ea427cb33.ba8d9bdd-7c52-4e50-898f-512cae4ef00a.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
b99a9c15-bc8c-45a0-9902-ac4ea427cb33.bf17a02c-ed48-4add-b76a-8d836c89703a.prompt=Virtual Machine\:
b99a9c15-bc8c-45a0-9902-ac4ea427cb33.d3119ad8-f9a2-40ca-8c46-14b99ce1c614.description=<pre>\nChanges a VM's power state. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n vmPowerState - the desired power state (on / off etc)\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n serviceXml - xml representation of the server created in vCenter\n</pre>
b99a9c15-bc8c-45a0-9902-ac4ea427cb33.dd55762a-26e1-4898-ab07-0e8861dad03f.prompt=Enter user
b99a9c15-bc8c-45a0-9902-ac4ea427cb33.description=<pre>\nRestart the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>   
b99a9c15-bc8c-45a0-9902-ac4ea427cb33.eaaa2f92-71a7-4fa0-9f3f-49a802ca6b51.prompt=Password\:
b99a9c15-bc8c-45a0-9902-ac4ea427cb33.fbbbd6b6-97ed-4adc-b87d-7b1e570689d5.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
b9f7526b-02cd-48f7-872e-bc23e7e4ece7.2ef067c2-fd0e-4c44-a461-d59122f08743.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
b9f7526b-02cd-48f7-872e-bc23e7e4ece7.5e83546a-21af-45b6-8bba-6f2cd3395b4b.prompt=User Identifier
b9f7526b-02cd-48f7-872e-bc23e7e4ece7.8fc27f46-7ca6-48b9-adc8-512a2b91e48f.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
b9f7526b-02cd-48f7-872e-bc23e7e4ece7.dcf0e4b4-9033-48c1-98e8-04ef91148d82.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
b9f7526b-02cd-48f7-872e-bc23e7e4ece7.description=<pre>\nUn Deploy the cloned Server from vCenter.\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
ba0d21f4-0619-4c53-915f-48d222923b82.12eb6c2e-3279-4427-8209-402ce6fd4890.prompt=Password\:
ba0d21f4-0619-4c53-915f-48d222923b82.199b0951-27fe-451d-9709-f9aa0c99f1be.prompt=VMWare User\:
ba0d21f4-0619-4c53-915f-48d222923b82.2d35cee7-8d86-4373-be8b-b0273c5c0670.prompt=Virtual Machine\:
ba0d21f4-0619-4c53-915f-48d222923b82.3e225f13-9fd9-47ea-a7fc-a08e055808a8.prompt=VMWare Host\:
ba0d21f4-0619-4c53-915f-48d222923b82.49bc17ff-bbef-47c3-8e98-3e79b3d15880.prompt=Password\:
ba0d21f4-0619-4c53-915f-48d222923b82.5e0687d4-06df-4cc2-8bd6-7e88e6b3f595.description=<pre>Retrieve information about a virtual machine or a group of virtual machines in a datacenter or host system (pipe-delimited). Retrieve each object one at a time from an initial search query ala SQL Query operation.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvmDatacenter - Virtual machine's datacenter.\nvmIdentifierType - Virtual machine identifier type.\nhostSystem - Target virtual machine host system.\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123).\ngetDetailed - Retrieve detailed information?\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nvmInfo - Virtual machine information.\nnumberOfResults - Number of results from the query remaining to be retrieved.\nreturnResult - Virtual machine ID or operation results.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
ba0d21f4-0619-4c53-915f-48d222923b82.611bcf23-03ae-4f2f-9dd3-384e39d2313d.prompt=Name of the snapshot\: 
ba0d21f4-0619-4c53-915f-48d222923b82.6e639f52-c77d-4b64-b432-d6bfd40f5db4.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
ba0d21f4-0619-4c53-915f-48d222923b82.7c1a7426-bb5e-4165-b702-87c6254147d8.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,suspended). Does nothing if the virtual machine is already in the desired power state.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"    \n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    async - Asynchronously perform the task.\nValid values\: "true", "false"\n    taskTimeOut - Time to wait before the operation is considered to have failed (seconds).\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmIdentifierType - Virtual machine identifier type.\nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"    \n    vmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n    no action - The operation completed with no action performed.\n\nReturns\:\n    returnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>\n\n\n
ba0d21f4-0619-4c53-915f-48d222923b82.d13b75da-2746-45c1-8e63-dd50ade5988a.prompt=VMWare Host\:
ba0d21f4-0619-4c53-915f-48d222923b82.d9c494f4-c982-4ace-b773-9308e43fea0f.prompt=Virtual Machine\:
ba0d21f4-0619-4c53-915f-48d222923b82.dcfda1d2-5f07-4b09-b66c-a42d0edcef2d.description=<pre>Revert a virtual machine to an existing named snapshot or the most current one if none specified.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    async - Asynchronously perform the task.\nValid values\: "true", "false"\n    taskTimeOut - Time to wait before the operation is considered to have failed (seconds).\nDefault value\: 800\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n    snapshotName - Name of snapshot. If the snapshot name is not provided the operation performs a revert to the current snapshot (one level up in the hierachy from the 'You are here' position).\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\nReturns\:\n    returnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
bbd8d370-e37e-4170-b52b-928d2d333b2b.00ccfc91-2cfd-4bd4-9f61-255e1c25605a.description=<pre>Retrieves the current state of the task.\n\nInputs\: \nhost - The VMware host hostname or IP address.\nuser - The VMware username.\npassword - The VMware user's password. \nport - The Port to connect to the VMware server. \nprotocol - The connection protocol.The valid values are (http and https). \ncloseSession - Specifies whether to close the internally kept VMware Infrastructure API session when the operation completes. The valid values are (true and false).  \ntaskId - The task ID (for example, task-1234).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - The task information.\ntaskInfo - The task information.\nUserName - The name of the user responsible for the task.\ndescriptionId - The type of the task.\ntaskState - The task state. ((The possible values are running, success, queued and error).\ntaskProgress - The task progress (The possible values are 0 to 100,inclusive).\ntaskSuccess - Specifies whether the task was successful.\ntaskError - The task error, if any.\ntaskResult - The task result.\ntaskCanceled - Specifies whether the task has been canceled. The possible values are (true and false).\ntaskCancelable - Specifies whether the task has been cancelable. </pre>
bbd8d370-e37e-4170-b52b-928d2d333b2b.0f9942da-8ffb-4381-a7e6-751298c74c9e.prompt=Guest OS ID\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.130641af-56b8-403e-9dc4-f1ac74b02058.prompt=Datastore\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.1f50be61-39fb-4f7a-bb31-451dae8f7dec.prompt=Datacenter to create in\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.2a0e77e8-5dfc-43b1-9c85-701506af7998.prompt=Disk Size (MB)\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.2b32f497-5ff3-49f1-b673-bb2740e8807a.prompt=Virtual Machine name\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.3248247c-06b6-450f-b98c-a5fa5328aa7f.prompt=Virtual Machine name\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.35d1b009-e488-4dfe-b9c5-6d44ad398513.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
bbd8d370-e37e-4170-b52b-928d2d333b2b.436d3203-0079-4784-984b-287edaa671ba.prompt=Datastore\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.4929dac3-7f92-4145-8055-993c6929440c.prompt=Task ID\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.6d17b4cb-209c-4985-91ce-94ae17a5c452.prompt=VMWare Host\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.751a239e-b367-429a-bcfc-652da3ab1b38.prompt=VMWare User\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.76c71bdc-ab33-4452-b1c8-e06413d02cbc.description=Creates a new virtual machine in the vmFolder specified and attaches it to the resource pool specified. \n\nRequired privilege for the user that runs this operation\: VirtualMachine.Inventory.Create \n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol\nValid values\: https, http\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation\nValid values\: "true", "false"\n    async - Asynchronously perform the task\nValid values\: true, false\n    taskTimeOut - Time to wait before the operation is considered to have failed (seconds).\nDefault value\: 800\n    vmName - Virtual machine name being created (new).\n    vmCpuCount - Number of virtual machine CPUs to setup.\n    hostSystem - Target virtual machine host system.\n    clusterName - Name of the VMWare HA or DRS cluster.\n    description - Description / annotation.\n    dataStore - Datastore or datastore cluster (eg. host\:dsname, mydatastore).\n    guestOSID - Guest OS ID (eg. win95Guest,winNetEnterprise64Guest,etc.) or OS description (Microsoft Windows 3.1,Microsoft Windows Vista (64-bit),Red Hat Enterprise Linux 3 (64-bit)). A list of valid entries can be retrieved via the GetOSDescriptors operation.\n    vmDatacenter - Virtual machine's datacenter.\n    vmMemorySize - Virtual machine memory size (megabytes).\n    vmResourcePool - Virtual machine's resource pool.\n    vmFolder - Virtual machine's folder by inventory path, '/' delimited not including datacenter (eg. ManagedVMs/DRS/Location1). For root folder, use '/'.\n    vmDiskSize - Size of the virtual disk to create (MB).\n    thinProvision - Specify whether to perform thin provisioning of the virtual disk. If true, the disk format will be set as thin provisioned format. If false, the disk format will be set as thick format.\nValid values\: "true", "false"\nDefault Value\: "false"\n    networkName - Name of the virtual machine's network or network port group. The value is case sensitive. If the input is empty, the virtual machine will be added to the first network found.\n    version - The hardware version of the virtual machine. If the input is empty, VMware will assign a version to the VM based on the version of the ESX it is created on.\nValid values\: "vmx-04", "vmx-07", "vmx-08", "vmx-09", "vmx-10", "vmx-11"\n    busSharing - Mode for sharing the SCSI bus.\nValid values\:"physical", "virtual", "none".\n    controllerType - The SCSI controller type.\nValid values\:"BusLogic Parallel", "LSI Logic Parallel","LSI Logic SAS","VMware Paravirtual".\n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResults\:\n    returnResult - Task result or operation result.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\nNotes\:\n   1. Note that "socketTimeout" and "connectionTimeout" inputs do not represent the time to wait for the operation to complete. They are used when communicating with the service, to make sure that the service is up and responds to client's requests. They can be used for service diagnosis purpose.\n   2. The "taskTimeOut" input is only used when the task is performed in a synchronous manner ("async" is set to "false").\n   3. There are some limitations based on the VM hardware version\:\n         Virtual hardware 11 (vSphere 6.0)\: 128 CPU,4TB RAM, 62TB HDD\n         Virtual hardware 10 (vSphere 5.5)\: 64 CPU, 1TB RAM, 62TB HDD\n         Virtual hardware 9 (vSphere 5.1)\: 64 CPU, 1TB RAM, 2TB HDD\n         Virtual hardware 8 (vSphere 5)\: 32 CPU, 1TB RAM, 2TB HDD\n         Virtual hardware 7 (vSphere 4)\: 8 CPU, 256GB RAM, 2TB HDD\n         Virtual hardware 4 (ESX 3.x)\: 4 CPU, 64GB RAM, 2TB HDD\n         Virtual hardware 3 (ESX 2.5)\: 2 CPU, 3600MB RAM, 2TB HDD\n    4. You must provide a value for either the clusterName or the hostSystem input, they are mutually exclusive.
bbd8d370-e37e-4170-b52b-928d2d333b2b.8315ae1a-92e6-4111-9a99-93684ea14d33.prompt=Password\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.83db06a1-28fd-4ca7-abb3-be075f2755cd.prompt=VMWare User\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.85f6a990-1133-41fb-9ebe-bdaf28a3d4eb.prompt=Password\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.8c36a6f1-c3b9-4585-8a89-74b77f44dc4f.prompt=Datacenter to create in\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.922e94c3-944e-41b9-bcb0-087f638436d0.prompt=Folder (inventory) path in datacenter\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.97ed8744-cf77-416b-96d6-504e7d04197e.prompt=Disk Size (MB)\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.aa7f10b4-20cb-4fa6-8050-9dc63f3f48ee.prompt=Folder (inventory) path in datacenter\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.aebd84e5-65e4-427c-b453-4337726f404a.prompt=Guest OS ID\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.aec240e0-94ec-4e3d-a058-e98707fd365e.prompt=VMWare Host\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.b1efff94-715f-4048-933c-76e8c9303329.prompt=Password\:
bbd8d370-e37e-4170-b52b-928d2d333b2b.e6c43a90-781f-4d3f-bade-0f3085f2de0a.prompt=VMWare Host\:
c07f5dd6-c880-4d92-89e7-d2588457bf4e.39cc62d5-33f1-4684-bfa8-b628b5f18d1f.description=f63d4890-514e-4512-a11d-c5a75fb41ffc.b450e410-61f1-4d05-beb1-9fc203322b21.description
c07f5dd6-c880-4d92-89e7-d2588457bf4e.444e0668-979c-4afa-8eb4-fdff8e791971.description=f63d4890-514e-4512-a11d-c5a75fb41ffc.f101b760-b061-45f5-a4b9-e29ad5e0332d.description
c07f5dd6-c880-4d92-89e7-d2588457bf4e.92198350-8e37-4a44-a02d-d1baa646b047.description=1f823a6e-4f1c-4a8e-9f18-0cfac408cde9.63f7fcf8-26a1-4404-9a79-9034718d6444.description
c07f5dd6-c880-4d92-89e7-d2588457bf4e.a907187c-f7f9-47c5-bb76-1256e72131e1.description=f63d4890-514e-4512-a11d-c5a75fb41ffc.e3fa7ad0-65b2-49a4-91d8-246ca58d5b84.description
c07f5dd6-c880-4d92-89e7-d2588457bf4e.d9b26c15-3933-4a4d-9682-6cc662f3bfb7.description=f63d4890-514e-4512-a11d-c5a75fb41ffc.8b24885e-ca6a-45aa-8f4e-2a8099ed2f62.description
c07f5dd6-c880-4d92-89e7-d2588457bf4e.f9bd3e14-4848-4fb2-898d-fb49dec06b9c.description=1f823a6e-4f1c-4a8e-9f18-0cfac408cde9.6081d646-8333-464f-83dc-2d074cd7032f.description
c1275c55-716f-4db6-8737-0fb5c3c135d9.04d8f8c9-32dc-427b-a96c-52e9b1977373.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
c1275c55-716f-4db6-8737-0fb5c3c135d9.description=<pre>\nStart the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
c1275c55-716f-4db6-8737-0fb5c3c135d9.f1185169-e9a1-42d6-8907-053cb7208130.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
c1275c55-716f-4db6-8737-0fb5c3c135d9.f8e8c8f6-d6c6-4408-bd4c-38de9528936a.description=Changes a VM's power state. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n vmPowerState - the desired power state (on / off etc)\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n serviceXml - xml representation of the server created in vCenter
c1275c55-716f-4db6-8737-0fb5c3c135d9.fd545dd3-a063-4519-b497-644495e6e694.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
c1302a79-f89c-48d0-a0c0-3f9909068bbe.144ea248-1d71-4cce-ac9d-5d36348ae61f.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
c1302a79-f89c-48d0-a0c0-3f9909068bbe.26ed6aa6-b290-460e-ab66-b190a236ede6.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
c1302a79-f89c-48d0-a0c0-3f9909068bbe.3d371a14-ba91-4f0e-895c-73799640f101.description=<pre>Useful Op to keep a running results.\nTakes a string input (resultText) and appends this to a global context key of "runningResults". As a result, the context key whose name is in the keyName input will be appended with the string from the input resultText.\n\nInput Parameters\:\nkeyName - name of context key to append to\nresultText - string input to append\ndelimiter - (leave blank for none) the delimiter to put between what is already in keyName before appending resultText\n\nResponses\:\nsuccess - assigned the context variable\n\nReturns\:\nThe the value of the context variable it appended to.\n\nContext\:\nrunningResults\n\nScriptlet Example\:\ncurrentResults \= scriptletContext.get("runningResults");\n\nif (currentResults \=\= null) {\n   currentResults \= resultText;\n} else {\n   currentResults +\= resultText;\n}\n\n\nscriptletContext.putGlobal("runningResults", currentResults);</pre>
c1302a79-f89c-48d0-a0c0-3f9909068bbe.49d1a84b-2b1d-4291-b5a4-387f4068efeb.description=<pre>Search for VMWare objects of type propsType and their properties (propsPathset) from a root object (if any) specified by propsRootObj and propsRootObj. Retrieve each object's properties one at a time from an initial search query ala SQL Query operation. Please see VMWare Integration Guide for more details.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\npropsType - VMWare properties type (Task, Datacenter, VirtualMachine, etc.) to filter on. Type of object results desired.\npropsPathset - Property filter's pathset, comma-delimited (eg. name, info.name, runtime.host)\npropsRootObjType - VMWare object type (eg. VirtualMachine, HostSystem, ComputeResource,ResourcePool,Alarm)\npropsRootObj - VMWare object ID\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nnumberOfResults - Number of results from the query remaining to be retrieved\nreturnResult - Query result item or operation result</pre>
c1302a79-f89c-48d0-a0c0-3f9909068bbe.53375f2f-b254-4dd0-a668-b3ee5979c794.prompt=VMWare Host\:
c1302a79-f89c-48d0-a0c0-3f9909068bbe.5fbaa22c-ffc5-493e-918a-88762af39f68.prompt=String to Append \:
c1302a79-f89c-48d0-a0c0-3f9909068bbe.733f05f6-4b6c-4028-a259-ede4d28fc5b7.prompt=String to Append \:
c1302a79-f89c-48d0-a0c0-3f9909068bbe.76acb20e-de67-42ac-b943-3f909d17a81e.prompt=Root object ID\:
c1302a79-f89c-48d0-a0c0-3f9909068bbe.a18d9c01-cfd9-428e-86d7-cfc87034c265.prompt=Enter a value for virtualMachine
c1302a79-f89c-48d0-a0c0-3f9909068bbe.a9aea1d8-167a-4b36-ae8a-02ee86a9664a.prompt=Password\:
c1302a79-f89c-48d0-a0c0-3f9909068bbe.aa2a4132-a96d-41b0-8ba0-d0c94c0d6e57.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
c1302a79-f89c-48d0-a0c0-3f9909068bbe.ab3c9eee-0794-4711-a763-47de6a0da231.description=<pre>Counts from one number to another number.\n\nInputs\:\nfrom - The number to start counting at\nto - The number to count to\nincrementBy - The amount to increment by during each count.\nreset - If set to true, then the counter will restart counting from the beginning.\n\nResponses\:\nhas more - Not yet done counting.\nfailure - Something went wrong.\nno more - Done counting. This will only be returned once, then counting restarts.\n\nReturns\:\nThe number that was just counted.</pre>
c1302a79-f89c-48d0-a0c0-3f9909068bbe.c38938ae-c4fb-4cfa-8152-8dc05b1de977.prompt=VMWare User\:
c1302a79-f89c-48d0-a0c0-3f9909068bbe.d95e2036-e406-450c-9b1c-cd1941e4c655.description=<pre>Useful Op to keep a running results.\nTakes a string input (resultText) and appends this to a global context key of "runningResults". As a result, the context key whose name is in the keyName input will be appended with the string from the input resultText.\n\nInput Parameters\:\nkeyName - name of context key to append to\nresultText - string input to append\ndelimiter - (leave blank for none) the delimiter to put between what is already in keyName before appending resultText\n\nResponses\:\nsuccess - assigned the context variable\n\nReturns\:\nThe the value of the context variable it appended to.\n\nContext\:\nrunningResults\n\nScriptlet Example\:\ncurrentResults \= scriptletContext.get("runningResults");\n\nif (currentResults \=\= null) {\n   currentResults \= resultText;\n} else {\n   currentResults +\= resultText;\n}\n\n\nscriptletContext.putGlobal("runningResults", currentResults);</pre>
c1302a79-f89c-48d0-a0c0-3f9909068bbe.description=<pre>\nSearch for VMWare objects of type propsType and their properties (propsPathset) from a root object (if any) specified by propsRootObj and propsRootObj. Retrieve each object's properties one at a time from an initial search query ala SQL Query operation. Please see VMWare Integration Guide for more details.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\npropsType - VMWare properties type (Task, Datacenter, VirtualMachine, etc.) to filter on. Type of object results desired.\npropsPathset - Property filter's pathset, comma-delimited (eg. name, info.name, runtime.host)\npropsRootObjType - VMWare object type (eg. VirtualMachine, HostSystem, ComputeResource,ResourcePool,Alarm)\npropsRootObj - VMWare object ID\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nhardDisk - boot disk space allocated for the VM.\nipaddess - IPAddress of the VM\nmacaddres - Mac Address of the VM.\n\n\n</pre>
c19d7091-7947-4d55-b918-85ef7be7fa35.10d9850d-f562-49b6-baa8-d025b777e677.prompt=VMWare Host\:
c19d7091-7947-4d55-b918-85ef7be7fa35.33fe0a41-ffb2-4222-8322-7609f91dd984.prompt=Close session?\:
c19d7091-7947-4d55-b918-85ef7be7fa35.4113586c-cd3a-4403-ae6d-1e792cd0a456.prompt=Virtual Machine\:
c19d7091-7947-4d55-b918-85ef7be7fa35.b83c1b6a-8689-41c8-ad3a-5026a2020a61.prompt=Asynchronously Perform Task?\:
c19d7091-7947-4d55-b918-85ef7be7fa35.bf296950-1574-4789-af7d-89b402fac086.prompt=Password\:
c19d7091-7947-4d55-b918-85ef7be7fa35.bf5ec473-b24a-4d2d-b161-42bf654072c4.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
c19d7091-7947-4d55-b918-85ef7be7fa35.c33a6805-8e5a-45ae-8cec-a59fc6f12042.prompt=VMWare Host\:
c19d7091-7947-4d55-b918-85ef7be7fa35.d21e64f9-9090-4e46-9aa8-e97dd6818d2f.prompt=Password\:
c19d7091-7947-4d55-b918-85ef7be7fa35.f47ec5ff-fb6f-4f92-84aa-ad4453bcb96a.prompt=Virtual Machine\:
c19d7091-7947-4d55-b918-85ef7be7fa35.fda305d0-d014-4592-88ee-53feb1b191ba.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,suspended). Does nothing if the virtual machine is already in the desired power state.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"    \n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    async - Asynchronously perform the task.\nValid values\: "true", "false"\n    taskTimeOut - Time to wait before the operation is considered to have failed (seconds).\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmIdentifierType - Virtual machine identifier type.\nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"    \n    vmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n    no action - The operation completed with no action performed.\n\nReturns\:\n    returnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>\n\n\n
c336b828-7d3d-4db3-ac04-57a868dfbd6a.16154905-8005-4d99-8390-03a203f28361.prompt=Close session?\:
c336b828-7d3d-4db3-ac04-57a868dfbd6a.16647adb-9f76-481d-a410-ea00ad0c27e0.prompt=Folder path to create\:
c336b828-7d3d-4db3-ac04-57a868dfbd6a.1c426aaf-55b3-4b91-b6b2-cc858bc5843a.prompt=Target datacenter\:
c336b828-7d3d-4db3-ac04-57a868dfbd6a.29c28c74-2dca-4565-a053-d3b9b237a851.prompt=VMWare User\:
c336b828-7d3d-4db3-ac04-57a868dfbd6a.30f2eadf-f967-4353-a977-6f877cad766e.prompt=Password\:
c336b828-7d3d-4db3-ac04-57a868dfbd6a.3148b102-794f-40e4-a0cd-1c86b8af9873.prompt=Password\:
c336b828-7d3d-4db3-ac04-57a868dfbd6a.3d70e375-4388-42ba-a3ca-57902e6ec984.prompt=Close session?\:
c336b828-7d3d-4db3-ac04-57a868dfbd6a.4eb970e5-8de0-4e14-beea-d471c91c9536.prompt=Target datacenter\:
c336b828-7d3d-4db3-ac04-57a868dfbd6a.656ea5ab-e0fa-44bd-a4d5-790b178d4839.description=<pre>Creates a new inventory folder in a Datacenter as seen in vCenter "Inventory > VMs and Templates" view.\n\nInputs\:\n    host - VMware vCenter host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\n    vmDatacenter - Datacenter to create new VM inventory folder in.\n    vmFolder - Path of VM inventory folder to create.  Folder names are delimited by a forward slash "/". Will create any parent folders if they do not already exist.  This input is case sensitive.\nExample\: /Hewlett Packard/Operations Orchestration/Templates\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\nResults\:\n    returnResult - This is the primary output.  Descriptive result of the operation.  Reason for error on failure.\n    folderID - The ID of the created folder.\n</pre>
c336b828-7d3d-4db3-ac04-57a868dfbd6a.707899a1-c3d1-43ff-ba3a-ecbbc8b27eae.prompt=Folder path to check\:
c336b828-7d3d-4db3-ac04-57a868dfbd6a.83bafad3-ab04-4714-8a07-dfe07050d56a.prompt=Target datacenter\:
c336b828-7d3d-4db3-ac04-57a868dfbd6a.8776bf73-a8fd-4543-b9ac-a07d9d9a6e82.prompt=VMWare Host\:
c336b828-7d3d-4db3-ac04-57a868dfbd6a.8ae580f9-bc5d-4ee7-bcec-cab5fe0a6634.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
c336b828-7d3d-4db3-ac04-57a868dfbd6a.939880db-1fc9-4f8b-b9b3-d5fa35fab0c9.prompt=VMWare Host\:
c336b828-7d3d-4db3-ac04-57a868dfbd6a.9b7355bd-3dcd-412a-9978-83d37b7d262b.prompt=Password\:
c336b828-7d3d-4db3-ac04-57a868dfbd6a.c57d9547-fb7d-4b67-b745-ec6677858004.prompt=VMWare Host\:
c336b828-7d3d-4db3-ac04-57a868dfbd6a.c747d09b-4773-47c6-bf50-12f09c6f2120.prompt=VMWare User\:
c336b828-7d3d-4db3-ac04-57a868dfbd6a.cefbf7df-ab2b-4be5-9192-2b7ef71acb88.description=Verifies if a specified inventory folder exists in a Datacenter, as seen in vCenter "Inventory > VMs and Templates" view.\n\nInputs\:\n   host - VMWare host hostname or IP address to connect to.\n   user - VMWare username used for authentication on the VMWare host.\n   password - VMWare user's password.\n   port - Port to use when establishing the connection. The value must be a numeric value greater than 0.\n            Example\: 443.\n            Default value\: 443.\n   protocol - Connection protocol. Valid values\: http, https. Default value\: https.\n   closeSession - Close the internally kept VMWare Infrastructure API session at completion of the operation.\n                         Valid values\: true, false.\n                         Default value\: false;\n   vmDatacenter - Datacenter in which to check if the VM inventory folder exists.\n   vmFolder - Path of VM inventory folder to check.  Folder names are delimited by a forward slash "/". This input is case sensitive.\n                   Example\: "Hewlett Packard/Operations Orchestration/Templates".\n\nResponses\:\n   folder exists - The operation completed successfully and the specified folder was found.\n   folder does not exist - The operation completed successfully and the specified folder was not found.\n   failure - Something went wrong.\n\nResults\:\n   returnResult - Primary result of the operation.\n   returnCode - Internal code such as 0 for success which is returned if the specified folder was found, 1 for 'no action' which is returned when the specified folder was not found and -1 for failure used to determine the response of a step\n   exception - exception stack trace, mainly used for debugging the root cause in case of failures.\n   folderID - the ID of the specified VM inventory folder if the folder exists.\n   \nNotes\:\n   1. When 'closeSession' is set to 'false' the value 'SESSION_ON\=true' will be included in the primary result.\n   2. The search for the VM inventory folder starts from the datacenter's root VM inventory folder and proceeds according to the inventory path provided in the 'vmFolder' input.\n   3. The Datacenter name must not be specified as part of the inventory folder path which is provided in the 'vmFolder' input.\n   4. When the folder path provided in the 'vmFolder' input contains consecutive forward slashes "//", these will be interpred as a single forward slash "/".\n   5. Limitation\: The operation will not find inventory folders which contain any '/' (forward slash) characters in the folder name.
c336b828-7d3d-4db3-ac04-57a868dfbd6a.ded69455-74f9-400f-971d-64c3108f9c42.prompt=VMWare User\:
c34e134a-5284-46aa-b1a6-e6c79b835c79.17413016-9293-4e73-8b42-1143263b52c1.description=<pre>Retrieve information about a virtual machine's snapshot. If name of snapshot not specified, returns the snapshot tree.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nsnapshotName - Name of snapshot\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task completion return message\nsnapshotInfo - Snapshot information.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
c34e134a-5284-46aa-b1a6-e6c79b835c79.7792a1a4-3d9b-4348-8761-a3fa4f64e345.prompt=Password\:
c34e134a-5284-46aa-b1a6-e6c79b835c79.89787948-1bd5-4db1-83b9-29eb71cfa621.prompt=VMWare Host\:
c399cd95-3e76-434a-857d-dc64f374c8d8.08f74388-e9da-4d65-b22d-274273c47a15.description=Changes a VM's power state. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n vmPowerState - the desired power state (on / off etc)\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n serviceXml - xml representation of the server created in vCenter
c399cd95-3e76-434a-857d-dc64f374c8d8.3556d656-c3e4-4b12-ae37-f7231b86014e.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
c399cd95-3e76-434a-857d-dc64f374c8d8.478754d2-4391-4c98-9ceb-7447df1eb3e5.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
c399cd95-3e76-434a-857d-dc64f374c8d8.62f136e0-1259-4e10-93ba-e79babbb152a.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
c399cd95-3e76-434a-857d-dc64f374c8d8.description=<pre>\nSuspend the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
c44fffd1-5b92-496a-afe7-3fcf9115ea47.1faed9cb-eac6-4f25-9d9a-0e7f9b479333.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
c44fffd1-5b92-496a-afe7-3fcf9115ea47.301da3d9-0f04-462d-ab79-ef635fea8264.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
c44fffd1-5b92-496a-afe7-3fcf9115ea47.5d02b96f-a642-46dd-b0eb-759a38ea6124.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
c44fffd1-5b92-496a-afe7-3fcf9115ea47.6525da89-fbef-48b5-8803-3d75a5de2c0b.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
c44fffd1-5b92-496a-afe7-3fcf9115ea47.81661e87-ed72-43e1-8484-67b8a80a215a.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
c44fffd1-5b92-496a-afe7-3fcf9115ea47.bb7bee4b-8fdf-44c2-b379-0245dbc81a9e.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
c44fffd1-5b92-496a-afe7-3fcf9115ea47.description=<pre>\nThis workflow will generate unique id based on subscription name and uuid. 9 charactes from subscription and 6 characters from uuid are appended to create unique id.\n\nInputs\:\n\nsubName\t\t- Subscription Name\nuuid\t\t- UUID of component or service instance or any alpha numeric characters\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\ntruncateSpecialChars\t- remove special characters in subscription name\n\nReturns\nObjectId \t- Returns Object Id\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
c4b19911-7fe6-428e-956e-b305f5c12e3b.629ab70e-64d8-4b9e-92c2-f2c9fe45f978.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
c4b19911-7fe6-428e-956e-b305f5c12e3b.d2cae795-9c37-4c9e-8345-d77a2d132107.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
c4b19911-7fe6-428e-956e-b305f5c12e3b.f0f133cc-bb7a-4f2d-a2ca-0688888f7c02.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
c4c198e6-96e4-442d-90b1-4446842641b7.145857e0-4679-4102-ab12-b954e52ff912.description=<pre>Takes a reference to XML (in the form of a String) and the specified XPath Query is run against the XML and returns the results in a form of a delimited list. The World Wide Web Consortium (W3C) organization provides the XPath specification (http\://www.w3.org).\n\nInputs\:\nxml - The XML (in the form of a String)\n\nxpathQuery - The XPath Query that is wanted to be run. See Examples in Notes section below.\n\ndelimiter- The delimiter used to separate values in the returnResult list. \n\nDefault value\: ,\n\nResult Value\:\nreturnResult - The result of the operation. If multiple XPaths are defined then this will add the delimiter between each value. There is no final delimiter.\n\nNotes\:\nExamples\:\nThe XPath Query can be specified as a single query in a format similiar to the following\:\n/employees/employee[@id\="3"]/*[name()\="name" or name()\="jobDescription" or name()\="salary" or name()\="managerId"]/text()\n\nThis would return the following results\:\nGoofy,tester,$50,1\n\nOr if more then one XPath query needs to be specified, populate xpathQuery using the XPath concat function.  As an example here is sample of a xpathQuery value using XPath concat function\:\nconcat(/employees/employee[@id\="2"]/name/text(),',',/employees/employee[@id\="2"]/jobDescription/text(),',',/employees/employee[@id\="2"]/managerId/text(),',',/employees/employee[@id\="2"]/salary/text())\n\nThe output using the concat xpathQuery input would return the following results\:\nDonald Duck,Lead Coder,1,$50\n\nThe examples above use the following xml string value\:\n<?xml version\="1.0" encoding\="UTF-8"?>\n<employees>\n  <employee id\="1">\n    <name>Mickey Mouse</name>\n    <jobDescription>Chief</jobDescription>\n    <salary>$100</salary>\n    <managerId/>\n  </employee>\n  <employee id\="2">\n    <name>Donald Duck</name>\n    <jobDescription>Lead Coder</jobDescription>\n    <salary>$50</salary>\n    <managerId>1</managerId>\n  </employee>\n  <employee id\="3">\n    <name>Goofy</name>\n    <jobDescription>tester</jobDescription>\n    <salary>$50</salary>\n    <managerId>1</managerId>\n  </employee>\n  <employee id\="4">\n    <name>Pluto</name>\n    <jobDescription>Coder - grade 1</jobDescription>\n    <salary>$25</salary>\n    <managerId>2</managerId>\n  </employee>\n</employees>\n\n</pre>
c4c198e6-96e4-442d-90b1-4446842641b7.1b4077c4-e68a-4b2b-afa3-610f1be81852.prompt=Artifact ID
c4c198e6-96e4-442d-90b1-4446842641b7.26392a46-140e-4fcf-9d81-c01c740243c9.prompt=Enter a value for xml
c4c198e6-96e4-442d-90b1-4446842641b7.4e1e913e-f510-4d2d-8ddb-3e47e235a043.description=<pre>\nService to perform an HTTP GET via the Java HTTP Client\n\nInputs\:\nurl - the url to attempt to retrieve.\nusername - the username to authenticate to url with.\npassword - the password for username.\ntimeout - a timeout after which the connection should be terminated, or 0 for no timeout.\nuseCookies - Enables cookie tracking. Cookies will be stored between consecutive calls. valid options are\: true/false\nfollowRedirects - specifies whether or not the get command should automatically follow redirects.\ntrustAllRoots - enables weak security over SSL. A SSH certificate is trusted even if no trusted CA issued it. valid options are\: true/false\nproxy - a proxy to use when accessing the web site.\nproxyPort - a port on the proxy to connect to.\nproxyUsername - a username to use when connecting to the proxy.\nproxyPassword - a password to use when connecting to the proxy.\nencodeURL - perform URL encoding.\nuserAgent - if the HTTP header USER_AGENT needs to be overridden, pass in the value here\ncharacterSet - the characterSet for HTTP Get request and response. Default is UTF-8.\n\nResponses\:\nsuccess - URL retrieved successfully.\nfailure - The url could not be retrieved.\n</pre>
c4c198e6-96e4-442d-90b1-4446842641b7.5c809060-5a59-4a61-8874-81dd5d230d6f.description=<pre>Useful Op to keep a running results.\nTakes a string input (resultText) and appends this to a global context key of "runningResults". As a result, the context key whose name is in the keyName input will be appended with the string from the input resultText.\n\nInput Parameters\:\nkeyName - name of context key to append to\nresultText - string input to append\ndelimiter - (leave blank for none) the delimiter to put between what is already in keyName before appending resultText\n\nResponses\:\nsuccess - assigned the context variable\n\nReturns\:\nThe the value of the context variable it appended to.\n\nContext\:\nrunningResults\n\nScriptlet Example\:\ncurrentResults \= scriptletContext.get("runningResults");\n\nif (currentResults \=\= null) {\n   currentResults \= resultText;\n} else {\n   currentResults +\= resultText;\n}\n\n\nscriptletContext.putGlobal("runningResults", currentResults);</pre>
c4c198e6-96e4-442d-90b1-4446842641b7.98b6dad8-b8b6-4a4b-ab28-87200c0e11b2.description=<pre>Retrieves Attributes from the root element of the given XML. If an 'attributeName' is specified, returns that specific attribute. If not, returns an iterator with all attributes.\n\nInputs\:\nxml - The xml (in the form of a String).\nattributeName - The name of the attribute (optional. If empty, returns all)\n\nResponses\:\nhas more - Another attribute was in the Element, and has been returned.\nfailure - Something went wrong.\nno more - No more attributes. This will only be returned once, then iteration restarts.\n\nReturns\:\nreturnResult - The value of the attribute.\nattributeName - The name of the attribute.</pre>
c4c198e6-96e4-442d-90b1-4446842641b7.b544d591-d494-44d5-889c-9e858203badc.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
c4c198e6-96e4-442d-90b1-4446842641b7.d548b78f-629d-4b1a-b307-bb2778f7ec42.description=<pre>\nIterates through a list of values. Modifying the value of the list and delimiter inputs during iteration is not generally supported.\n\nInputs\:\nlist - The list to iterate through.\nseparator - A delimiter that separates elements in the list.\n\nReturns\:\nThe current element of the list, if the response is has more\n\nResponses\:\nhas more - Another value was in the list, and has been returned.\nhas no more - The iterator has gone fully through the list. This response will only be returned once per iteration through the list, a subsequent call to the Iterator will restart the Iteration through the list.\nfailure - failed to process the list.\n\nNote\: Where the iterator is in the list is tracked by each step's unique id. Therefore you can iterate on the same list from multiple steps simultaneously.\n\nWARNING\: Any step that will use the results of this Iterator operation will, by default, attempt to assign that step's inputs from a flow variable. If this is left checked, then the first element of the iterator will be used for every cycle of iteration.\n\n</pre>
c4c198e6-96e4-442d-90b1-4446842641b7.d8fcf291-529d-4e8c-a341-52c72e151e4f.description=<pre>Useful Op to keep a running results.\nTakes a string input (resultText) and appends this to a global context key of "runningResults". As a result, the context key whose name is in the keyName input will be appended with the string from the input resultText.\n\nInput Parameters\:\nkeyName - name of context key to append to\nresultText - string input to append\ndelimiter - (leave blank for none) the delimiter to put between what is already in keyName before appending resultText\n\nResponses\:\nsuccess - assigned the context variable\n\nReturns\:\nThe the value of the context variable it appended to.\n\nContext\:\nrunningResults\n\nScriptlet Example\:\ncurrentResults \= scriptletContext.get("runningResults");\n\nif (currentResults \=\= null) {\n   currentResults \= resultText;\n} else {\n   currentResults +\= resultText;\n}\n\n\nscriptletContext.putGlobal("runningResults", currentResults);</pre>
c4c198e6-96e4-442d-90b1-4446842641b7.de4051dd-6484-46fb-9a36-a47657b6d44b.description=<pre>Takes a reference to XML (in the form of a String) and the specified XPath Query is run against the XML and returns the results in a form of a delimited list. The World Wide Web Consortium (W3C) organization provides the XPath specification (http\://www.w3.org).\n\nInputs\:\nxml - The XML (in the form of a String)\n\nxpathQuery - The XPath Query that is wanted to be run. See Examples in Notes section below.\n\ndelimiter- The delimiter used to separate values in the returnResult list. \n\nDefault value\: ,\n\nResult Value\:\nreturnResult - The result of the operation. If multiple XPaths are defined then this will add the delimiter between each value. There is no final delimiter.\n\nNotes\:\nExamples\:\nThe XPath Query can be specified as a single query in a format similiar to the following\:\n/employees/employee[@id\="3"]/*[name()\="name" or name()\="jobDescription" or name()\="salary" or name()\="managerId"]/text()\n\nThis would return the following results\:\nGoofy,tester,$50,1\n\nOr if more then one XPath query needs to be specified, populate xpathQuery using the XPath concat function.  As an example here is sample of a xpathQuery value using XPath concat function\:\nconcat(/employees/employee[@id\="2"]/name/text(),',',/employees/employee[@id\="2"]/jobDescription/text(),',',/employees/employee[@id\="2"]/managerId/text(),',',/employees/employee[@id\="2"]/salary/text())\n\nThe output using the concat xpathQuery input would return the following results\:\nDonald Duck,Lead Coder,1,$50\n\nThe examples above use the following xml string value\:\n<?xml version\="1.0" encoding\="UTF-8"?>\n<employees>\n  <employee id\="1">\n    <name>Mickey Mouse</name>\n    <jobDescription>Chief</jobDescription>\n    <salary>$100</salary>\n    <managerId/>\n  </employee>\n  <employee id\="2">\n    <name>Donald Duck</name>\n    <jobDescription>Lead Coder</jobDescription>\n    <salary>$50</salary>\n    <managerId>1</managerId>\n  </employee>\n  <employee id\="3">\n    <name>Goofy</name>\n    <jobDescription>tester</jobDescription>\n    <salary>$50</salary>\n    <managerId>1</managerId>\n  </employee>\n  <employee id\="4">\n    <name>Pluto</name>\n    <jobDescription>Coder - grade 1</jobDescription>\n    <salary>$25</salary>\n    <managerId>2</managerId>\n  </employee>\n</employees>\n\n</pre>
c4c198e6-96e4-442d-90b1-4446842641b7.description=<pre>\nThis workflow returns the list of Artifact\u2019s Properties and values.\n\nInputs-\nartifactId  \u2013  Artifact id\nuserIdentifier  - User Identifier id\npropertyNames \u2013 List of property names separated by pipe |\nIf user provides this inputs, flow will return the values for given property names only. Otherwise flow will return all properties and values for the given artifact.\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nsocketTimeout - The number of milliseconds to wait for the data to be retrieved. This input should be assigned a value greater than or equal to zero. A socketTimeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nfollowRedirects - If true, the GET command automatically follows redirects. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\npropertyNameValuesList \u2013 List of property Names and values\nE.g. property 1;value1,value2|property 2;value3|property 3;value3,value4|........\n</pre>
c4c198e6-96e4-442d-90b1-4446842641b7.fc4420d7-2f01-437d-a530-f1c2713e4fac.prompt=User Identifier
c7ad34b1-0e45-45d5-8d2c-b353b68e6587.1b875af7-22b8-47a0-b372-42131ad06b13.prompt=Component ID
c7ad34b1-0e45-45d5-8d2c-b353b68e6587.21fbaa3d-01ad-434c-a6c1-7ec90eb337ae.prompt=Component ID
c7ad34b1-0e45-45d5-8d2c-b353b68e6587.23e38928-b3b4-4c53-b85b-3e76ef2ae1d2.prompt=User Identifier
c7ad34b1-0e45-45d5-8d2c-b353b68e6587.67650225-25cb-4495-a48c-662f76ba981b.prompt=User Identifier
c7ad34b1-0e45-45d5-8d2c-b353b68e6587.a690ffe0-069a-49f8-a245-20226459ddf4.description=<pre>\nThis workflow adds/updates the service component property using Artifact API.\n\nInputs-\ncomponentId \u2013 Service Component  id\nuserIdentifier  - User Identifier id\ndisplayName - Property Display Name to  add or update\npropertyName \u2013 Property Name to add or update\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\nvalueType - Value type of the property. It can have value from selection list "HP CSA \u2013 Property ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values delimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator - A delimiter that separates elements in the values ( default delimiter used is comma ,)\nconsumerVisible - Do you want to make property visible on consumer portal? (true/false), Default set to true\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
c7ad34b1-0e45-45d5-8d2c-b353b68e6587.c81258b1-9a96-4f66-a95d-78a9136ad340.description=This workflow returns the component properties and values using Artifact APIs.\n\nresult\:\npropertyNameValuesList\: pipe separated list of property name and values ( where each property name and values would be ; seprated and multiple values would be , seprated)\ne.g. - property 1; value1,value2|property 2; value3|property 3; value3,value4|........
c7ad34b1-0e45-45d5-8d2c-b353b68e6587.d363c94d-c858-4b30-bca8-661f1355d8f1.prompt=Artifact ID
c7ad34b1-0e45-45d5-8d2c-b353b68e6587.ed39cf19-d5f0-4956-aa77-63fa1c23dcbe.description=<pre>\nThis workflow adds/updates the service component property using Artifact API.\n\nInputs-\ncomponentId \u2013 Service Component  id\nuserIdentifier  - User Identifier id\ndisplayName - Property Display Name to  add or update\npropertyName \u2013 Property Name to add or update\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\nvalueType - Value type of the property. It can have value from selection list "HP CSA \u2013 Property ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values delimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator - A delimiter that separates elements in the values ( default delimiter used is comma ,)\nconsumerVisible - Do you want to make property visible on consumer portal? (true/false), Default set to true\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
c7ad34b1-0e45-45d5-8d2c-b353b68e6587.f5d35c9f-9c70-4033-b1fd-dd3d9798b3b1.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
c7ad34b1-0e45-45d5-8d2c-b353b68e6587.fc54346a-2fbf-4296-a51d-5a416f969136.prompt=User Identifier
c9018c07-5f79-45ca-9c17-920d5b5bd107.020b4373-54ce-4b14-bf24-4e7ea3cf38bc.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
c9018c07-5f79-45ca-9c17-920d5b5bd107.0b701da6-0969-4cbd-8e1c-b39d0a2565a8.prompt=Component ID
c9018c07-5f79-45ca-9c17-920d5b5bd107.103beeaa-b76b-4c76-ab4c-66f7d458cf13.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
c9018c07-5f79-45ca-9c17-920d5b5bd107.19fedce1-5790-4558-ab1f-1160e28e2346.prompt=Component ID
c9018c07-5f79-45ca-9c17-920d5b5bd107.1aae60d1-0da5-482e-b516-78b4f6d29ac7.prompt=User Identifier
c9018c07-5f79-45ca-9c17-920d5b5bd107.20e3328e-0e81-4162-b5ea-edd13f1eed7f.prompt=User Identifier
c9018c07-5f79-45ca-9c17-920d5b5bd107.255cf194-8683-4a6c-abb5-217030791769.prompt=User Identifier
c9018c07-5f79-45ca-9c17-920d5b5bd107.2835aa2a-494f-4a06-ba49-e3a1354e8056.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
c9018c07-5f79-45ca-9c17-920d5b5bd107.362166bc-4262-4cb3-8825-a2c5d47d6137.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
c9018c07-5f79-45ca-9c17-920d5b5bd107.463bce81-798b-4f12-9d29-7d9c6d08f32d.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
c9018c07-5f79-45ca-9c17-920d5b5bd107.464001a1-3b8f-4156-a5b0-a1eaae2e99ab.prompt=Component ID
c9018c07-5f79-45ca-9c17-920d5b5bd107.47f8265e-b1d2-43c8-91ff-6408acf19299.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
c9018c07-5f79-45ca-9c17-920d5b5bd107.48f557aa-8ea7-4a37-a20a-8c596e5beeb6.prompt=User Identifier
c9018c07-5f79-45ca-9c17-920d5b5bd107.4991886c-fc08-4000-b5a1-ad113681c2b9.prompt=Component ID
c9018c07-5f79-45ca-9c17-920d5b5bd107.5429ee81-4269-4933-b0b7-f89853091936.prompt=User Identifier
c9018c07-5f79-45ca-9c17-920d5b5bd107.68e5b8b3-7d6c-414d-9bfa-603cdef977f8.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
c9018c07-5f79-45ca-9c17-920d5b5bd107.6b207501-ab2d-448f-8678-2ef52270478d.prompt=Component ID
c9018c07-5f79-45ca-9c17-920d5b5bd107.70cc6055-9161-4ab8-8ba6-06d9a81acebf.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
c9018c07-5f79-45ca-9c17-920d5b5bd107.75b8f1f2-4054-40e8-96bd-efe23059295a.prompt=Component ID
c9018c07-5f79-45ca-9c17-920d5b5bd107.794be8a5-d3ba-4ad9-a19b-c67f947cb65f.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
c9018c07-5f79-45ca-9c17-920d5b5bd107.7db191c9-6eea-4add-81b2-9bf3875c0546.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
c9018c07-5f79-45ca-9c17-920d5b5bd107.84bd6082-ff54-48fa-a5da-3ef3f3b0b28c.prompt=User Identifier
c9018c07-5f79-45ca-9c17-920d5b5bd107.8b8945e5-647c-454c-ad20-e56c22927bcd.prompt=User Identifier
c9018c07-5f79-45ca-9c17-920d5b5bd107.8bf9feb0-902a-45d4-a5f9-4465dc213b38.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
c9018c07-5f79-45ca-9c17-920d5b5bd107.94e08047-b377-4468-8b8f-898d38c04886.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
c9018c07-5f79-45ca-9c17-920d5b5bd107.9bc08077-515f-4aab-bca8-7c2224227756.description=This workflow returns the component properties and values using Artifact APIs.\n\nresult\:\npropertyNameValuesList\: pipe separated list of property name and values ( where each property name and values would be ; seprated and multiple values would be , seprated)\ne.g. - property 1; value1,value2|property 2; value3|property 3; value3,value4|........
c9018c07-5f79-45ca-9c17-920d5b5bd107.a841d24b-01c0-4148-86cf-fb178b244a82.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
c9018c07-5f79-45ca-9c17-920d5b5bd107.ac7ce18d-93b3-498f-90f9-776b1ca4d075.prompt=User Identifier
c9018c07-5f79-45ca-9c17-920d5b5bd107.b5885913-69f7-41a3-bfbb-3627af731d3e.prompt=Artifact ID
c9018c07-5f79-45ca-9c17-920d5b5bd107.b69ec2f9-4ac7-4fac-93fa-b1da91c54c21.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
c9018c07-5f79-45ca-9c17-920d5b5bd107.ba50fd69-997d-48ad-8f7b-084e1227430c.prompt=User Identifier
c9018c07-5f79-45ca-9c17-920d5b5bd107.dd0dbd28-8998-44af-b070-20a5fc738786.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
c9018c07-5f79-45ca-9c17-920d5b5bd107.e00ac1ca-71f0-4b32-a7f8-7b2d5102c393.prompt=Component ID
c9018c07-5f79-45ca-9c17-920d5b5bd107.ead9fada-ba12-4486-87df-1ccd92668694.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
c9018c07-5f79-45ca-9c17-920d5b5bd107.f1163f6a-d42f-4152-88b4-836fbfc6634a.prompt=Component ID
ca29900a-6ef2-4e2c-85dc-3d9d016804f9.0acde2c2-5db7-43be-929e-ad5d8d0ff340.description=<pre>\nThis workflow returns the list of Artifact\u2019s Properties and values.\n\nInputs-\nartifactId  \u2013  Artifact id\nuserIdentifier  - User Identifier id\npropertyNames \u2013 List of property names separated by pipe |\nIf user provides this inputs, flow will return the values for given property names only. Otherwise flow will return all properties and values for the given artifact.\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nsocketTimeout - The number of milliseconds to wait for the data to be retrieved. This input should be assigned a value greater than or equal to zero. A socketTimeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nfollowRedirects - If true, the GET command automatically follows redirects. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\npropertyNameValuesList \u2013 List of property Names and values\nE.g. property 1;value1,value2|property 2;value3|property 3;value3,value4|........\n</pre>
ca29900a-6ef2-4e2c-85dc-3d9d016804f9.1407d96a-a696-415d-980a-0a8bfafffcad.description=<pre>This is a soft copy of "Http Client" customized for the POST method (the input "method"\='POST' should not be changed). Check the linked "Http Client" operation. The specific input to this operation is "formParams".\n\nInputs\n    url - The web address to make the request to. This must be a standard URL as specified in RFC 3986. This is a required input.\nFormat\: scheme\://domain\:port/path?query_string\#fragment_id\nExamples\: https\://[fe80\:\:1260\:4bff\:fe49\:42fc]\:8080/my/path?key1\=val1&key2\=val2\#my_fragment\n    authType - The type of authentication used by this operation when trying to execute the request on the target server. The authentication is not preemptive\: a plain request not including authentication info will be made and only when the server responds with a 'WWW-Authenticate' header the client will send required headers. If the server needs no authentication but you specify one in this input the request will work nevertheless. The client cannot choose the authentication method and there is no fallback so you have to know which one you need. If the web application and proxy use different authentication types, these must be specified like in the Example model. \nDefault value\: basic\nValid values\: basic, digest, ntlm, kerberos, any, anonymous, "" or a list of valid values separated by comma.\nExample\: basic,digest\n    username - The user name used for authentication. For NTLM authentication, the required format is 'domain\\user' and if you only specify the 'user' it will append a dot like '.\\user' so that a local user on the target machine can be used. In order for all authentication schemes to work (except Kerberos) username is required.\n    password - The password used for authentication.\n    preemptiveAuth - If this field is "true", authentication info will be sent in the first request. If this is "false" a request with no authentication info will be made and if the server responds with 401 and a header such as WWW-Authenticate\: Basic realm\="myRealm", only then will the authentication info be sent.\nDefault value\: true\nValid values\: true, false\n    proxyHost - The proxy server used to access the web site.\n    proxyPort - The proxy server port. Default value\: 8080. Valid values\: -1, and positive integer values. When the value is '-1' the default port of the scheme, specified in the 'proxyHost', will be used.\n    proxyUsername - The user name used when connecting to the proxy. The "authType" input will be used to choose authentication type. The "Basic" and "Digest" proxy auth type are supported.\n    proxyPassword - The proxy server password associated with the proxyUsername input value.\n    trustAllRoots - Specifies whether to enable weak security over SSL/TSL. A certificate is trusted even if no trusted certification authority issued it.\nDefault value\: false\nValid values\: true, false\n    x509HostnameVerifier - Specifies the way the server hostname must match a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate. The hostname verification system prevents communication with other hosts other than the ones you intended. This is done by checking that the hostname is in the subject alternative name extension of the certificate. This system is designed to ensure that, if an attacker (Man-In-The-Middle) redirects traffic to his machine, the client will not accept the connection. If you set this input to "allow_all", this verification is ignored and you become vulnerable to security attacks. For the value "browser_compatible" the hostname verifier works the same way as Curl and Firefox. The hostname must match either the first CN, or any of the subject-alts. A wildcard can occur in the CN, and in any of the subject-alts. The only difference between "browser_compatible" and "strict" is that a wildcard (such as "*.foo.com") with "browser_compatible" matches all subdomains, including "a.b.foo.com". From the security perspective, to provide protection against possible Man-In-The-Middle attacks, we strongly recommend to use "strict" option.\nDefault value\: strict\nValid values\: strict, browser_compatible, allow_all\n    trustKeystore - The pathname of the Java TrustStore file. This contains certificates from other parties that you expect to communicate with, or from Certificate Authorities that you trust to identify other parties.  If the protocol (specified by the URL) is not HTTPS or if trustAllRoots is "true" this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    trustPassword - The password associated with the TrustStore file. If trustAllRoots is false and trustKeystore is empty, trustPassword default will be supplied.\nDefault value\: changeit\n    keystore - The pathname of the Java KeyStore file. You only need this if the server requires client authentication. If the protocol (specified by the URL) is not https or if trustAllRoots is 'true' this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    keystorePassword - The password associated with the KeyStore file. If trustAllRoots is false and keystore is empty, keystorePassword default will be supplied.\nDefault value\: changeit\n    connectTimeout - The time to wait for a connection to be established, in seconds. A timeout value of 0 represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout - The timeout for waiting for data (a maximum period inactivity between two consecutive data packets), in seconds. A socketTimeout value of 0 represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\n    useCookies - Specifies whether to enable cookie tracking or not. Cookies are stored between consecutive calls in a serializable session object therefore they will be available on a branch level (same subflow, same lane). If you specify a non-boolean value, the default value is used.\nDefault value\: true\nValid values\: true, false\n    keepAlive - Specifies whether to create a shared connection that will be used in subsequent calls. If keepAlive is false, the already open connection will be used and after execution it will close it. The operation will use a connection pool stored in a GlobalSessionObject that will be available throughout the execution (the flow and subflows, between parallel split lanes).\nDefault value\: true\nValid values\: true, false\n    connectionsMaxPerRoute - The maximum limit of connections on a per route basis. The default will create no more than 2 concurrent connections per given route.\nDefault value\: 2\n    connectionsMaxTotal - The maximum limit of connections in total. The default will create no more than 2 concurrent connections in total.\nDefault value\: 20\n    headers - The list containing the headers to use for the request separated by new line (CRLF).The header name - value pair will be separated by "\:".\nFormat\: According to HTTP standard for headers (RFC 2616).\nExamples\: Accept\:text/plain\n    responseCharacterSet - The character encoding to be used for the HTTP response. If responseCharacterSet is empty, the charset from the 'Content-Type' HTTP response header will be used. If responseCharacterSet is empty and the charset from the HTTP response Content-Type header is empty, the default value will be used. You should not use this for method\=HEAD or OPTIONS.\nDefault value\: ISO-8859-1\n    destinationFile - The absolute path of a file on disk where to save the entity returned by the response. "returnResult" will no longer be populated with the entity if this is specified. You should not use this for method\=HEAD or OPTIONS.\tExample\: C\:\\temp\\destinationFile.txt\n    followRedirects - Specifies whether the HTTP client automatically follows redirects.  Redirects explicitly prohibited by the HTTP specification as requiring user intervention will not be followed (redirects on POST and PUT requests that are converted to GET requests). If you specify a non-boolean value, the default value is used.\nDefault value\: true\nValid values\: true, false\n    queryParams - The list containing query parameters to append to the URL. The names and the values must not be URL encoded unless you specify "queryParamsAreURLEncoded"\=true because if they are encoded and "queryParamsAreURLEncoded"\=false they will get double encoded. The separator between name-value pairs is "&". The query name will be separated from query value by "\=". Note that you need to URL encode at least "&" to "%26" and "\=" to "%3D" and set "queryParamsAreURLEncoded"\="true" if you leave the other special URL characters un-encoded they will be encoded by the HTTP Client.\nExamples\: parameterName1\=parameterValue1&parameterName2\=parameterValue2;\n    queryParamsAreURLEncoded - Specifies whether to encode  (according to the URL encoding standard) the queryParams. If you set "queryParamsAreURLEncoded"\=true and you have invalid characters in 'queryParams' they will get encoded anyway. If you specify a non-boolean value, the default value is used.\nDefault value\: false\nValid values\: true, false\n    formParams - This input needs to be given in form encoded format and will set the entity to be sent in the request. It will also set the content-type to application/x-www-form-urlencoded. This should only be used with method\=POST. Note that you need to URL encode at least "&" to "%26" and "\=" to "%3D" and set "queryParamsAreURLEncoded"\="true" if you leave the other special URL characters unencoded they will be encoded by the HTTP Client.\nExamples\: input1\=value1&input2\=value2\n (The client will send\: input1\=value1&in+put+2\=val+u%0A+e2)\n    formParamsAreURLEncoded - formParams will be encoding  (according to the url encoding standard) if this is 'true'.  If you set "formParamsAreURLEncoded"\=true and you have invalid characters in 'formParams' they will get encoded anyway. This should only be used with method\=POST.\nDefault value\: false\nValid values\: true, false\n    sourceFile - The absolute path of a file on disk from where to read the entity for the HTTP request. This will be read using "requestCharacterSet" or "contentType" input (see below). This should not be provided for method\=GET, HEAD, TRACE\nExamples\: C\:\\temp\\sourceFile.txt\n    body - The string to include in body for HTTP POST operation. If both sourceFile and body will be provided, the body input has priority over sourceFile. This should not be provided for method\=GET, HEAD, TRACE\n    requestCharacterSet - The character encoding to be used for the HTTP request body. If contentType is empty, the requestCharacterSet will use the default value. If contentType will include charset (ex.\: "application/json; charset\=UTF-8"), the requestCharacterSet value will overwrite the charset value from contentType input. This should not be provided for method\=GET, HEAD, TRACE\nDefault value\: ISO-8859-1\n    chunkedRequestEntity - Data is sent in a series of "chunks". It uses the Transfer-Encoding HTTP header in place of the Content-Length header. Generally it is recommended to let HttpClient choose the most appropriate transfer encoding based on the properties of the HTTP message being transferred. It is possible, however, to inform HttpClient that chunk coding is preferred by setting this input to "true". Please note that HttpClient will use this flag as a hint only. This value will be ignored when using HTTP protocol versions that do not support chunk coding, such as HTTP/1.0. This setting is ignored for multipart post entities.\nDefault value\: \nValid values\: true, false\n    method - The HTTP method used. This is a required input.\n\nOutputs\n    returnResult - This will contain the response entity (unless "destinationFile" is specified). In case of an error this output will contain the error message.\n    exception - In case of success response, this result is empty. In case of failure response, this result contains the java stack trace of the runtime exception.\n    statusCode - The HTTP status code.\nFormat\: 1xx (Informational - Request received, continuing process), 2xx (Success - The action was successfully received, understood, and accepted), 3xx (Redirection - Further action must be taken in order to complete the request), 4xx (Client Error - The request contains bad syntax or cannot be fulfilled), 5xx Server Error - The server failed to fulfil an apparently valid request)\nExamples\: 200, 404\n    finalLocation - The final location after redirects.\nFormat\: URL\n    responseHeaders - The list containing the headers of the response message, separated by newline.\nFormat\: According to HTTP standard for headers (RFC 2616).\n    protocolVersion - The HTTP protocol version.\nExamples\: HTTP/1.1\n    reasonPhrase - The reason phrase from the origin HTTP response. This depends on the status code and are according to RFC 1945 and RFC 2048\nExamples\: (HTTP 1.0)\: OK, Created, Accepted, No Content, Moved Permanently, Moved Temporarily, Not Modified, Bad Request, Unauthorized, Forbidden, Not Found, Internal Server Error, Not Implemented, Bad Gateway, Service Unavailable Values (HTTP 1.1)\: Continue, Temporary Redirect, Method Not Allowed, Conflict, Precondition Failed, Request Too Long, Request-URI Too Long, Unsupported Media Type, Multiple Choices, See Other, Use Proxy, Payment Required, Not Acceptable, Proxy Authentication Required, Request Timeout, Switching Protocols, Non Authoritative Information, Reset Content, Partial Content, Gateway Timeout, Http Version Not Supported, Gone, Length Required, Requested Range Not Satisfiable, Expectation Failed\n    returnCode - The returnCode of the operation\: 0 for success, -1 for failure.\n\nResponses\n    success - The operation completed without a runtime exception. So it will go to success for any http codes even those in the 400-599 range.\n    failure - A runtime exception occurred. This may be due to incorrectly formated inputs (authType, contentType, headers, method, proxy, queryParams, requestCharacterSet, responseCharacterSet, truststore, url), or failed ntlm or Kerberos authentication.\n\nNotes\nThe "formParams" input takes precedence, then the input "body" and lastly the input "sourceFile". All of these are the body entity of a HTTP post request. Only one of them is included in the actual http post request, as follows\: If formParams is used, then body and sourceFile are ignored, else if body is used, sourceFile is ignored, else sourceFile is used.\n</pre>\n
ca29900a-6ef2-4e2c-85dc-3d9d016804f9.6768fd94-b739-4b33-88a6-7351beaeac2b.prompt=User Identifier
ca29900a-6ef2-4e2c-85dc-3d9d016804f9.925ad63c-25ef-4e36-a68f-edc569a100b7.description=Replaces a substring within a string.\n\n<pre>\nInputs\:\ninput - the master string.\nreplace - the text to replace.\nreplaceWith - the text to replace with.\n\nResults\:\nthe string with the text replaced.\n\nResponses\:\nsuccess - succeeded in updating string.\nfailure - was unable to replace for some reason\n</pre>
ca29900a-6ef2-4e2c-85dc-3d9d016804f9.b91a6997-f636-42e0-805e-590181e2f9bc.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
ca29900a-6ef2-4e2c-85dc-3d9d016804f9.c71fc664-3bfd-43c0-b2ce-1559016c5a87.description=<pre>This is a soft copy of 'Http Client' customized for the PUT method (the input 'method'\='PUT' should not be changed). Check the linked 'Http Client' operation.\n\nInputs\n    url - The web address to make the request to. This must be a standard URL as specified in RFC 3986. This is a required input.\nFormat\: scheme\://domain\:port/path?query_string\#fragment_id\nExamples\: https\://[fe80\:\:1260\:4bff\:fe49\:42fc]\:8080/my/path?key1\=val1&key2\=val2\#my_fragment\n    authType - The type of authentication used by this operation when trying to execute the request on the target server. The authentication is not preemptive\: a plain request not including authentication info will be made and only when the server responds with a 'WWW-Authenticate' header the client will send required headers. If the server needs no authentication but you specify one in this input the request will work nevertheless. The client cannot choose the authentication method and there is no fallback so you have to know which one you need. If the web application and proxy use different authentication types, these must be specified like in the Example model. \nDefault value\: basic\nValid values\: basic, digest, ntlm, kerberos, any, anonymous, "" or a list of valid values separated by comma.\nExample\: basic,digest\n    username - The user name used for authentication. For NTLM authentication, the required format is 'domain\\user' and if you only specify the 'user' it will append a dot like '.\\user' so that a local user on the target machine can be used. In order for all authentication schemes to work (except Kerberos) username is required.\n    password - The password used for authentication.\n    preemptiveAuth - If this field is 'true' authentication info will be sent in the first request. If this is 'false' a request with no authentication info will be made and if server responds with 401 and a header like WWW-Authenticate\: Basic realm\="myRealm" only then the authentication info will be sent.\nDefault value\: true\nValid values\: true, false\n    proxyHost - The proxy server used to access the web site.\n    proxyPort - The proxy server port. Default value\: 8080. Valid values\: -1, and positive integer values. When the value is '-1' the default port of the scheme, specified in the 'proxyHost', will be used.\n    proxyUsername - The user name used when connecting to the proxy. The 'authType' input will be used to choose authentication type. The 'Basic' and 'Digest' proxy authentication type are supported.\n    proxyPassword - The proxy server password associated with the proxyUsername input value.\n    trustAllRoots - Specifies whether to enable weak security over SSL/TSL. A certificate is trusted even if no trusted certification authority issued it.\nDefault value\: false\nValid values\: true, false\n    x509HostnameVerifier - Specifies the way the server hostname must match a domain name in the subject's Common Name (CN) or subjectAltName field of the X.509 certificate. The hostname verification system prevents communication with other hosts other than the ones you intended. This is done by checking that the hostname is in the subject alternative name extension of the certificate. This system is designed to ensure that, if an attacker(Man In The Middle) redirects traffic to his machine, the client will not accept the connection. If you set this input to "allow_all", this verification is ignored and you become vulnerable to security attacks. For the value "browser_compatible" the hostname verifier works the same way as Curl and Firefox. The hostname must match either the first CN, or any of the subject-alts. A wildcard can occur in the CN, and in any of the subject-alts. The only difference between "browser_compatible" and "strict" is that a wildcard (such as "*.foo.com") with "browser_compatible" matches all subdomains, including "a.b.foo.com". From the security perspective, to provide protection against possible Man-In-The-Middle attacks, we strongly recommend to use "strict" option.\nDefault value\: strict\nValid values\: strict, browser_compatible, allow_all\n    trustKeystore - The pathname of the Java TrustStore file. This contains certificates from other parties that you expect to communicate with, or from Certificate Authorities that you trust to identify other parties.  If the protocol (specified by the 'url') is not 'https' or if trustAllRoots is 'true' this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    trustPassword - The password associated with the TrustStore file. If trustAllRoots is false and trustKeystore is empty, trustPassword default will be supplied.\nDefault value\: changeit\n    keystore - The pathname of the Java KeyStore file. You only need this if the server requires client authentication. If the protocol (specified by the 'url') is not 'https' or if trustAllRoots is 'true' this input is ignored.\nDefault value\: <OO_Home>/java/lib/security/cacerts\nFormat\: Java KeyStore (JKS)\n    keystorePassword - The password associated with the KeyStore file. If trustAllRoots is false and keystore is empty, keystorePassword default will be supplied.\nDefault value\: changeit\n    connectTimeout - The time to wait for a connection to be established, in seconds. A timeout value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout - The timeout for waiting for data (a maximum period inactivity between two consecutive data packets), in seconds. A socketTimeout value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\n    useCookies - Specifies whether to enable cookie tracking or not. Cookies are stored between consecutive calls in a serializable session object therefore they will be available on a branch level (same subflow, same lane). If you specify a non-boolean value, the default value is used.\nDefault value\: true\nValid values\: true, false\n    keepAlive - Specifies whether to create a shared connection that will be used in subsequent calls. If keepAlive is false, the already open connection will be used and after execution it will close it. The operation will use a connection pool stored in a GlobalSessionObject that will be available throughout the execution (the flow and subflows, between parallel split lanes).\nDefault value\: true\nValid values\: true, false\n    connectionsMaxPerRoute - The maximum limit of connections on a per route basis. The default will create no more than 2 concurrent connections per given route.\nDefault value\: 2\n    connectionsMaxTotal - The maximum limit of connections in total. The default will create no more than 2 concurrent connections in total.\nDefault value\: 20\n    headers - The list containing the headers to use for the request separated by new line (CRLF).The header name - value pair will be separated by "\:".\nFormat\: According to HTTP standard for headers (RFC 2616).\nExamples\: Accept\:text/plain\n    sourceFile - The absolute path of a file on disk from where to read the entity for the http request. This will be read using 'requestCharacterSet' or 'contentType' input (see below). This should not be provided for method\=GET, HEAD, TRACE\nExamples\: C\:\\temp\\sourceFile.txt\n    body - The string to include in body for HTTP POST operation. If both sourceFile and body will be provided, the body input has priority over sourceFile. This should not be provided for method\=GET, HEAD, TRACE\n    contentType - The content type that should be set in the request header, representing the MIME-type of the data in the message body.\nDefault value\: "" (empty)\nExamples\: "text/html", "application/x-www-form-urlencoded"\n    requestCharacterSet - The character encoding to be used for the HTTP request body. If contentType is empty, the requestCharacterSet will use the default value. If contentType will include charset (ex.\: "application/json; charset\=UTF-8"), the requestCharacterSet value will overwrite the charset value from contentType input. This should not be provided for method\=GET, HEAD, TRACE\nDefault value\: ISO-8859-1\n    destinationFile - The absolute path of a file on disk where to save the entity returned by the response. 'returnResult' will no longer be populated with the entity if this is specified. You should not use this for method\=HEAD or OPTIONS.\tExample\: C\:\\temp\\destinationFile.txt\n    responseCharacterSet - The character encoding to be used for the HTTP response. If responseCharacterSet is empty, the charset from the 'Content-Type' HTTP response header will be used. If responseCharacterSet is empty and the charset from the HTTP response Content-Type header is empty, the default value will be used. You should not use this for method\=HEAD or OPTIONS.\nDefault value\: ISO-8859-1\n    chunkedRequestEntity - Data is sent in a series of "chunks". It uses the Transfer-Encoding HTTP header in place of the Content-Length header.Generally it is recommended to let HttpClient choose the most appropriate transfer encoding based on the properties of the HTTP message being transferred. It is possible, however, to inform HttpClient that chunk coding is preferred by setting this input to "true". Please note that HttpClient will use this flag as a hint only. This value will be ignored when using HTTP protocol versions that do not support chunk coding, such as HTTP/1.0. This setting is ignored for multipart post entities.\nDefault value\: \nValid values\: true, false\n    method - The HTTP method used. This is a required input.\n\nOutputs\n    returnResult - This will contain the response entity (unless 'destinationFile' is specified). In case of an error this output will contain the error message.\n    exception - In case of success response, this result is empty. In case of failure response, this result contains the java stack trace of the runtime exception.\n    statusCode - The HTTP status code.\nFormat\: 1xx (Informational - Request received, continuing process), 2xx (Success - The action was successfully received, understood, and accepted), 3xx (Redirection - Further action must be taken in order to complete the request), 4xx (Client Error - The request contains bad syntax or cannot be fulfilled), 5xx Server Error - The server failed to fulfil an apparently valid request)\nExamples\: 200, 404\n    finalLocation - The final location after redirects.\nFormat\: URL\n    responseHeaders - The list containing the headers of the response message, separated by newline.\nFormat\: According to HTTP standard for headers (RFC 2616).\n    protocolVersion - The HTTP protocol version.\nExamples\: HTTP/1.1\n    reasonPhrase - The reason phrase from the origin HTTP response. This depends on the status code and are according to RFC 1945 and RFC 2048\nExamples\: (HTTP 1.0)\: OK, Created, Accepted, No Content, Moved Permanently, Moved Temporarily, Not Modified, Bad Request, Unauthorized, Forbidden, Not Found, Internal Server Error, Not Implemented, Bad Gateway, Service Unavailable\tValues (HTTP 1.1)\: Continue, Temporary Redirect, Method Not Allowed, Conflict, Precondition Failed, Request Too Long, Request-URI Too Long, Unsupported Media Type, Multiple Choices, See Other, Use Proxy, Payment Required, Not Acceptable, Proxy Authentication Required, Request Timeout, Switching Protocols, Non Authoritative Information, Reset Content, Partial Content, Gateway Timeout, Http Version Not Supported, Gone, Length Required, Requested Range Not Satisfiable, Expectation Failed\n    returnCode - The returnCode of the operation\: 0 for success, -1 for failure.\n\nResponses\n    success - The operation completed without a runtime exception. So it will go to success for any  http codes even those in the 400-599 range.\n    failure - A runtime exception occurred. This may be due to incorrectly formatted inputs (authType, contentType, headers, method, proxy, queryParams, requestCharacterSet, responseCharacterSet, truststore, url), or failed ntlm or Kerberos authentication.\n\nNotes\nCheck the "v2.0" folder description for more help.\n</pre>\n
ca29900a-6ef2-4e2c-85dc-3d9d016804f9.dac6da39-61ec-4426-9b6a-110675cd9aa4.prompt=Artifact ID
ca29900a-6ef2-4e2c-85dc-3d9d016804f9.description=<pre>\nThis workflow requests the life cycle engine to execute and take the given service component and it's childs to the deployed state.\n\nInputs-\ncomponentId \u2013 Service component id\nserviceInstanceId - Service Instance Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.0125feac-e4b8-4e0c-aa3e-b4bc7d21cc9a.description=<pre>\nChecks to see if a string matches a specific rule.\n\nInputs\:\nmatchType - The type of match to perform.\ntoMatch - The string to check if matches another string.\nmatchTo - The string to match against.\nignoreCase - Boolean value for whether or not to ignore case during match.\n\nResponses\:\nsuccess - The String matched.\nfailure - The string did not match, or something went wrong.\n</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.1cfd57f8-02a7-4789-9940-28e7c06053e5.description=Service to perform an HTTP PUT via the Java HTTP Client\n\n<pre>\nInputs\:\nurl - the url to PUT from.\nusername - The username to use for basic authentication to the url\npassword - The password to use for basic authentication to the url\ntimeout - a timeout after which the connection should be terminated, or 0 for no timeout.\nuseCookies - Enables cookie tracking. Cookies will be stored between consecutive calls. Valid options are\: true/false\ntrustAllRoots - enables weak security over SSL. A SSH certificate is trusted even if no trusted CA issued it. Valid options are\: true/false\nproxy - a proxy to use when accessing the web site.\nproxyPort - a port on the proxy to connect to.\nproxyUsername - a username to use when connecting to the proxy.\nproxyPassword - a password to use when connecting to the proxy.\nkeystore - the path to the keystore to use for SSL Client Certificates\nkeystorePassword - the password for the keystore\nencodeURL - perform URL encoding.\nfile - The file to put on the specified url.\nuserAgent - if the HTTP header USER_AGENT needs to be overridden, pass in the value here\n\nResponses\:\nsuccess - The PUT command completed\nfailure - The PUT operation failed.\n\nResult\:\nThe operation's return code.\n\nExtraResults\: \nresultText - the raw result of the operation\ndocument - The Complete document returned by the PUT operation\npageLoadTimeInMS - The number of milliseconds it took the page to load.\nresponseTimeInMS - The number of milliseconds it took before the server responded.\nURL - the url to PUT from\nsessionId - the session ID of the connection to the host\nexception - if an error occurred, the message of this error\n</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.36dbb1ce-f00a-45a6-83d8-97e00a814d1f.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.3ac4c0cf-0dcf-4d33-bd9f-c12b053ca700.prompt=Component ID
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.582970f6-8cb8-46cd-aa13-6f1a98797859.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.5c13d3e6-f90a-4b74-a25c-c73afe417595.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.61af0b59-fcbd-492d-b850-451ee91a03be.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.6cef8e28-abe6-4a35-96a6-1e19ec37865b.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.7302fb5b-a84e-4214-b011-669210f9e513.prompt=User Identifier
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.7dbbcdb8-97ae-4cf3-80d1-64f00cde2bb1.description=Check to see if the value stored in a specified flow variable, denoted by key, is null.\n\n<pre>\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: The value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - if the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - if some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.7dce3d3d-cc59-4cb5-bad0-5681a28d85e7.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.821a9f71-4ac7-43f0-9a42-bd8020b59983.description=<pre>\nIterates through a list of values. Modifying the value of the list and delimiter inputs during iteration is not generally supported.\n\nInputs\:\nlist - The list to iterate through.\nseparator - A delimiter that separates elements in the list.\n\nReturns\:\nThe current element of the list, if the response is has more\n\nResponses\:\nhas more - Another value was in the list, and has been returned.\nhas no more - The iterator has gone fully through the list. This response will only be returned once per iteration through the list, a subsequent call to the Iterator will restart the Iteration through the list.\nfailure - failed to process the list.\n\nNote\: Where the iterator is in the list is tracked by each step's unique id. Therefore you can iterate on the same list from multiple steps simultaneously.\n\nWARNING\: Any step that will use the results of this Iterator operation will, by default, attempt to assign that step's inputs from a flow variable. If this is left checked, then the first element of the iterator will be used for every cycle of iteration.\n\n</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.8b76b893-9027-435b-b2fd-1838997a7d71.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.945c1cfd-592b-451a-ade6-3c6cb64bbab6.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.b763119a-0c78-4381-bc98-e562e0a56faa.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.c26a37b8-4228-48a7-a9e0-ade6e5af1f5c.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.c50334b8-c161-448c-acbd-1167976cb790.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.ca057361-2a1c-4981-9853-ff677f35d6c8.prompt=Property Name
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.description=<pre>\nThis workflow adds/updates the service component property using Artifact API.\n\nInputs-\ncomponentId \u2013 Service Component  id\nuserIdentifier  - User Identifier id\ndisplayName - Property Display Name to  add or update\npropertyName \u2013 Property Name to add or update\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\nvalueType - Value type of the property. It can have value from selection list "HP CSA \u2013 Property ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values delimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator - A delimiter that separates elements in the values ( default delimiter used is comma ,)\nconsumerVisible - Do you want to make property visible on consumer portal? (true/false), Default set to true\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.e0e74bd5-beb2-4fe0-b252-325aa64adbf5.description=Service to perform an HTTP PUT via the Java HTTP Client\n\n<pre>\nInputs\:\nurl - the url to PUT from.\nusername - The username to use for basic authentication to the url\npassword - The password to use for basic authentication to the url\ntimeout - a timeout after which the connection should be terminated, or 0 for no timeout.\nuseCookies - Enables cookie tracking. Cookies will be stored between consecutive calls. Valid options are\: true/false\ntrustAllRoots - enables weak security over SSL. A SSH certificate is trusted even if no trusted CA issued it. Valid options are\: true/false\nproxy - a proxy to use when accessing the web site.\nproxyPort - a port on the proxy to connect to.\nproxyUsername - a username to use when connecting to the proxy.\nproxyPassword - a password to use when connecting to the proxy.\nkeystore - the path to the keystore to use for SSL Client Certificates\nkeystorePassword - the password for the keystore\nencodeURL - perform URL encoding.\nfile - The file to put on the specified url.\nuserAgent - if the HTTP header USER_AGENT needs to be overridden, pass in the value here\n\nResponses\:\nsuccess - The PUT command completed\nfailure - The PUT operation failed.\n\nResult\:\nThe operation's return code.\n\nExtraResults\: \nresultText - the raw result of the operation\ndocument - The Complete document returned by the PUT operation\npageLoadTimeInMS - The number of milliseconds it took the page to load.\nresponseTimeInMS - The number of milliseconds it took before the server responded.\nURL - the url to PUT from\nsessionId - the session ID of the connection to the host\nexception - if an error occurred, the message of this error\n</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.f0640a71-fdf0-4d39-9809-5cd1f0a5e0d7.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
cc24f041-f100-4c7a-a2a5-dfcdfa89d3d1.f213c386-ea75-46b5-b185-47eb097275eb.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
cddab68d-3fb4-4cd3-93ec-1e200fca599e.4508a49f-3dcc-4523-936c-67862582fbdd.description=<pre>\nSubtracts two numbers\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe difference of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
cddab68d-3fb4-4cd3-93ec-1e200fca599e.5ced5f84-06dd-48b9-b0eb-ee0b811aee84.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
cddab68d-3fb4-4cd3-93ec-1e200fca599e.64168a63-4363-4e00-9d2c-86d35dc9b485.prompt=User Identifier
cddab68d-3fb4-4cd3-93ec-1e200fca599e.8539a047-0c89-4706-91dd-1dd21cc1b9a3.description=This workflow adds/updates the component property using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing property (In this case input "valueType" is not required , This input will not be considered even if provided)\nno - To add/update property\n\nvalueType - Value type of the property. It can have value from selection list "CSA-Property-ValueType". This Input is required only when Input "onlyUpdate" is selected as "no".\nvalues - One or more values dilimited by comma , (If user want to use some other separator for multiple values then needs to be pass as next input "separator")\nseparator -  A delimiter that separates elements in the values ( default dilimiter used is comma ,)
cddab68d-3fb4-4cd3-93ec-1e200fca599e.946d431b-f56f-491b-bcff-195617ddab11.prompt=Component ID
cddab68d-3fb4-4cd3-93ec-1e200fca599e.98937eb3-b760-4df5-a2ba-f06724f3d435.prompt=Service Component Id
cddab68d-3fb4-4cd3-93ec-1e200fca599e.a85f701f-8ddb-48e1-8071-06c70e207d53.description=This workflow returns the artifact's properties and values using Artifact APIs.\n\nresult\:\npropertyNameValuesList\: pipe separated list of property name and values ( where each property name and values would be ; seprated and multiple values would be , seprated)\ne.g. - property 1; value1,value2|property 2; value3|property 3; value3,value4|........
cddab68d-3fb4-4cd3-93ec-1e200fca599e.b6cd63f6-f421-4760-8782-fdc2ad9d9dd2.prompt=Artifact ID
cddab68d-3fb4-4cd3-93ec-1e200fca599e.bd9221f1-0b07-407d-ad08-c36c2fea065b.prompt=User Identifier
cddab68d-3fb4-4cd3-93ec-1e200fca599e.description=<pre>\nRemove a Server from the Server Group\n\nInput Parameters\:\nserverGrpId - Server Group Component Id\nserviceInstanceId - Service Instance Id of the Subscription\nserverId - Server component Id \nreduceServers - Number of Servers to be removed - default to 1\nuserIdentifier - OO Application UUID to authorize a REST Call\n\nResponses\:\n   success -  if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n NA\n</pre>
cddab68d-3fb4-4cd3-93ec-1e200fca599e.ea7539c2-a498-4110-8676-d77f672de2e0.prompt=Service Component Id
cddab68d-3fb4-4cd3-93ec-1e200fca599e.f4d26e12-3c7a-4921-95d5-43c460e1b8ba.prompt=Service Instance Id
d13b931d-07df-489b-bfcf-d7200406e07c.0b316c85-0500-4789-9add-02bf06a2e4ae.description=<pre>\nIterates through a list of values. Modifying the value of the list and delimiter inputs during iteration is not generally supported.\n\nInputs\:\nlist - The list to iterate through.\nseparator - A delimiter that separates elements in the list.\n\nReturns\:\nThe current element of the list, if the response is has more\n\nResponses\:\nhas more - Another value was in the list, and has been returned.\nhas no more - The iterator has gone fully through the list. This response will only be returned once per iteration through the list, a subsequent call to the Iterator will restart the Iteration through the list.\nfailure - failed to process the list.\n\nNote\: Where the iterator is in the list is tracked by each step's unique id. Therefore you can iterate on the same list from multiple steps simultaneously.\n\nWARNING\: Any step that will use the results of this Iterator operation will, by default, attempt to assign that step's inputs from a flow variable. If this is left checked, then the first element of the iterator will be used for every cycle of iteration.\n\n</pre>
d13b931d-07df-489b-bfcf-d7200406e07c.2c52243e-003f-4cc0-8a14-3853354392f7.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
d13b931d-07df-489b-bfcf-d7200406e07c.460a9c33-416b-47c4-a7cb-5cdfc4ec3b11.prompt=Enter a value for proxyUsername
d13b931d-07df-489b-bfcf-d7200406e07c.4ee953a3-47c2-4a5c-aa65-e97e944d3c8d.prompt=User Identifier
d13b931d-07df-489b-bfcf-d7200406e07c.5d210c0b-7554-4bd5-99d5-0e2096b5435a.prompt=Enter a value for followRedirects
d13b931d-07df-489b-bfcf-d7200406e07c.6c16662d-22c4-4c2b-ab3f-0743aa9becdd.prompt=Enter a value for socketTimeout
d13b931d-07df-489b-bfcf-d7200406e07c.6e88711d-908e-416d-90e4-a80dcfec640e.prompt=Enter a value for keystorePassword
d13b931d-07df-489b-bfcf-d7200406e07c.7a20206a-9217-4473-837c-55455338889e.description=<pre>Useful Op to keep a running results.\nTakes a string input (resultText) and appends this to a global context key of "runningResults". As a result, the context key whose name is in the keyName input will be appended with the string from the input resultText.\n\nInput Parameters\:\nkeyName - name of context key to append to\nresultText - string input to append\ndelimiter - (leave blank for none) the delimiter to put between what is already in keyName before appending resultText\n\nResponses\:\nsuccess - assigned the context variable\n\nReturns\:\nThe the value of the context variable it appended to.\n\nContext\:\nrunningResults\n\nScriptlet Example\:\ncurrentResults \= scriptletContext.get("runningResults");\n\nif (currentResults \=\= null) {\n   currentResults \= resultText;\n} else {\n   currentResults +\= resultText;\n}\n\n\nscriptletContext.putGlobal("runningResults", currentResults);</pre>
d13b931d-07df-489b-bfcf-d7200406e07c.7b74110e-1309-42e7-b246-e5281c485774.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
d13b931d-07df-489b-bfcf-d7200406e07c.818318c7-20d6-4f5b-83b7-75a77d21b1db.prompt=Enter a value for kerberosConfFile
d13b931d-07df-489b-bfcf-d7200406e07c.8fa914ba-8928-4e08-9744-c35a62933fe1.prompt=Enter a value for proxyPassword
d13b931d-07df-489b-bfcf-d7200406e07c.9b4e9883-835b-46d9-9294-4c4eff6964d3.prompt=String to Append \:
d13b931d-07df-489b-bfcf-d7200406e07c.9e1ee482-ce9f-40fe-8401-40a2b8de297d.prompt=Enter a value for keystore
d13b931d-07df-489b-bfcf-d7200406e07c.a33a05bc-3854-4a40-b26c-7c7505418fe3.prompt=Enter a value for trustAllRoots
d13b931d-07df-489b-bfcf-d7200406e07c.b0c0cb0b-0994-4e12-ae98-b788c78f9bbf.prompt=Enter a value for proxyPort
d13b931d-07df-489b-bfcf-d7200406e07c.b4d88e28-d2a1-4ad5-9a07-6eec952d7267.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
d13b931d-07df-489b-bfcf-d7200406e07c.b5394c86-2ab8-418a-895d-c09c3d132734.prompt=Enter a value for userAgent
d13b931d-07df-489b-bfcf-d7200406e07c.b9ff04c7-8903-453c-a3d7-2cbbccefd283.description=<pre>\nThis workflow returns the details of the given artifact id.\n\nInputs-\nartifactId \u2013   Artifact  Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nsocketTimeout - The number of milliseconds to wait for the data to be retrieved. This input should be assigned a value greater than or equal to zero. A socketTimeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nfollowRedirects - If true, the GET command automatically follows redirects. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\nname \u2013  name of the artifactr \ndisplayName \u2013 display name of the artifact\nartifactType \u2013 Artifact type\nstate \u2013 state of the artifact\nlifeCycleState \u2013  life cycle state of the artifact\nlifeCycleSubState \u2013 life cycle sub state of the artifact\ndocument  \u2013 returned XML document from API\n</pre>
d13b931d-07df-489b-bfcf-d7200406e07c.bcb55a03-9001-4482-84c6-5209077b9fe8.prompt=Enter a value for authType
d13b931d-07df-489b-bfcf-d7200406e07c.bd993753-efef-404b-8325-622585e83d19.prompt=Enter a value for trustKeystore
d13b931d-07df-489b-bfcf-d7200406e07c.c9e36184-9ee8-454b-9db8-7f6b46e2dc64.prompt=Enter a value for useCookies
d13b931d-07df-489b-bfcf-d7200406e07c.ce33740e-610c-44a1-94e5-c9fb69b6f7ca.prompt=Enter a value for timeout
d13b931d-07df-489b-bfcf-d7200406e07c.d3f0e6fc-97df-4978-8328-84e10bfb7145.prompt=Artifact ID
d13b931d-07df-489b-bfcf-d7200406e07c.dbdb13ce-662c-4583-bea7-07717cd8730b.prompt=Enter a value for encodeURL
d13b931d-07df-489b-bfcf-d7200406e07c.dd58cd0c-284a-4466-8ac1-102370cbe37b.prompt=Enter a value for proxy
d13b931d-07df-489b-bfcf-d7200406e07c.description=<pre>\nFilter the list of server Ids for Deployed state.\n\nInput Parameters\:\nserverIds - List of server UUIDs separated by a delimiter\ndelimiter - the list delimiter.\nuserIdentifier - OO Application UUID to authorize a REST Call\n\nResponses\:\n   success - Flow completed succesfully\n   failure - failed otherwise \n\nResult Fields\:\n deployedServers - List of serverids which are in Deployed State.\n serverPatternId - Server Id with Pattern set on the artifact.\n</pre>
d13b931d-07df-489b-bfcf-d7200406e07c.e394d17c-94bd-48b3-b123-ddb93ad1e9b6.prompt=Enter a value for trustPassword
d1610e95-d733-41d7-beaa-05a87eba7680.296222e2-742f-40a9-bd26-f7dd1db5c9c3.description=<pre>\nInsert an object into a JSON array, optionally specifying the position at which to insert the new object. \n\nThis Operation differes from the 'Add to Array' operation in that this one will try and validate the new element as\na JSON object, whereas 'Add to Array' will just wrap the element in quotes and treat it as a string. This means \nthat the element passed into this operation must be a valid JSON object, or the operation will fail. \n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n    element - The element to insert into the array. As noted above, this must be a valid JSON object or the operation will fail. It can be \n                    any valid JSON object; such as a number, string, an array, or a name/value pair list. Numbers can be entered as-is, strings\n                    must be wrapped in quotes, and objects must be formated correctly (see examples below for more info)\nValid values\: Any valid JSON object\nExamples\: 1 or "a string" or {"one"\:"two", "three"\:"four"} or [1,2,3]\n\n    index -The index in the array at which to insert the new element. If index is undefined, or index is equal to the length of the array \n               (one past the last element), the new element is placed at the end of the array. See the notes above for more information\n               on using negative numbers to specify array elements.\n               If the index is valid, the new element is inserted at that position, and all remaining elements are shifted one position to the right.\n\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\nDefault value\: undefined (insert the new element at the end of the array)\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array with the inserted element.\n\n</pre>
d1610e95-d733-41d7-beaa-05a87eba7680.3a6e4e54-5f93-41a3-a680-bfb88d7c5173.description=<pre>Retrieve information about a virtual machine's snapshot. If name of snapshot not specified, returns the snapshot tree.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nsnapshotName - Name of snapshot\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task completion return message\nsnapshotInfo - Snapshot information.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
d1610e95-d733-41d7-beaa-05a87eba7680.3d3080db-faa5-4ff3-83d4-f359ae551acc.description=<pre>Retrieve information about a virtual machine's snapshot. If name of snapshot not specified, returns the snapshot tree.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nsnapshotName - Name of snapshot\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task completion return message\nsnapshotInfo - Snapshot information.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
d1610e95-d733-41d7-beaa-05a87eba7680.8f42fd6f-e833-4acc-b7ce-a7b359a4db27.prompt=Password\:
d1610e95-d733-41d7-beaa-05a87eba7680.9812a04f-e55e-4a5a-b43b-b29f04630f8f.description=<pre>This operation iterates through a list of values. It is not recommended to modify the value of the "list" and "separator" inputs during the iteration process.\n\nInputs\:\n    list - The list to iterate through.\n    separator - A delimiter separating the list elements.\nDefault value\: \u2018,\u2019 (comma) \n\nResults\:\n    resultString - The current list element (if the response is "has more").\n\nResponses\:\n    has more - Another value was found in the list and it has been returned.\n    no more - The iterator has gone through the entire list. This response is returned once per list iteration.  A subsequent call to the List iterator operation restarts the list iteration process.\n    failure - The operation completed unsuccessfully.\n\nNote\:\n   The position of the iterator in the list is tracked by each step's unique identifier. Therefore, you can simultaneously iterate through the same list from multiple steps.\n</pre>
d1610e95-d733-41d7-beaa-05a87eba7680.b0dc6da4-196d-4bd5-88b2-a2c7e5319d85.prompt=VMWare Host\:
d1610e95-d733-41d7-beaa-05a87eba7680.c49da473-4aad-4b73-8c85-1f67645e4f3e.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
d1610e95-d733-41d7-beaa-05a87eba7680.d0ac725c-77e3-468f-9140-b3f460fd8304.prompt=Identify VM by\:
d1610e95-d733-41d7-beaa-05a87eba7680.ede4a761-2aeb-4585-9236-52385675844e.prompt=Virtual Machine\:
d5335833-4f03-4b3b-a796-7d5f3973e29c.223c6a86-bb08-4527-ac06-dc204c6c8dec.description=a1e1cadc-8114-4707-96d7-21d275c84a3e.e66562db-c31a-4148-826d-f41d082c5cb1.description
d5335833-4f03-4b3b-a796-7d5f3973e29c.2fc4d2d1-a234-4539-9211-67665fd2859f.prompt=User Identifier
d5335833-4f03-4b3b-a796-7d5f3973e29c.3c21b0a7-ef8c-4307-88c0-08ccb2310089.description=a1e1cadc-8114-4707-96d7-21d275c84a3e.8385a693-9ae0-45a1-afd7-f7e728cdeec5.description
d5335833-4f03-4b3b-a796-7d5f3973e29c.b1b916aa-16ce-45e8-b60a-b0254c5ff62c.description=<pre>\nStart the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
d56bfff9-6da8-4ffd-a49d-4ea0d09ec19c.17d23701-f17c-4180-a2bd-c0160fa27ace.prompt=Enter password
d56bfff9-6da8-4ffd-a49d-4ea0d09ec19c.252df317-363d-4f45-8d1a-b1bcb2cbd728.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
d56bfff9-6da8-4ffd-a49d-4ea0d09ec19c.34406f18-95f0-4668-9b13-9c57336164f5.description=<pre>\nChanges a VM's power state. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n vmPowerState - the desired power state (on / off etc)\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n serviceXml - xml representation of the server created in vCenter\n</pre>
d56bfff9-6da8-4ffd-a49d-4ea0d09ec19c.3491b7f7-b879-4ccb-8f10-958f4bf22931.prompt=Virtual Machine\:
d56bfff9-6da8-4ffd-a49d-4ea0d09ec19c.5c27cbc0-42e7-4cd4-96c9-ac0831afe22f.prompt=Password\:
d56bfff9-6da8-4ffd-a49d-4ea0d09ec19c.653ed474-4072-48e2-bcc6-380310ef2119.description=<pre>Retrieve power state of virtual machine (poweredOn,poweredOff,suspended).\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task completion return message.\npowerState - Power state (poweredOn,poweredOff,suspended).\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
d56bfff9-6da8-4ffd-a49d-4ea0d09ec19c.8f03bdeb-0f73-4aa2-a516-c79ba23e2822.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
d56bfff9-6da8-4ffd-a49d-4ea0d09ec19c.a59c78d6-b2f8-4526-849a-3dc7f22692bd.prompt=User Identifier
d56bfff9-6da8-4ffd-a49d-4ea0d09ec19c.a76e7c41-fb9b-4520-8335-431ecd61e2b7.prompt=VMWare Host\:
d56bfff9-6da8-4ffd-a49d-4ea0d09ec19c.d14be230-63c6-41d3-81aa-65c91e93fcaf.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
d56bfff9-6da8-4ffd-a49d-4ea0d09ec19c.description=<pre>\nRestart the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>   
d56bfff9-6da8-4ffd-a49d-4ea0d09ec19c.e1ca28c3-aee5-40dd-926e-4f15a450ee87.prompt=Enter user
d5cf58b9-1063-483d-b339-6a887ea883ee.019f8fb3-5840-40f5-8626-4fc1c41c03c4.description=1f823a6e-4f1c-4a8e-9f18-0cfac408cde9.6081d646-8333-464f-83dc-2d074cd7032f.description
d5cf58b9-1063-483d-b339-6a887ea883ee.17987ca7-4ba1-4ba2-8736-3d8f3a195cfc.description=f63d4890-514e-4512-a11d-c5a75fb41ffc.e3fa7ad0-65b2-49a4-91d8-246ca58d5b84.description
d5cf58b9-1063-483d-b339-6a887ea883ee.1a28f75d-b569-4f9f-97f9-7883f520ca1b.description=1f823a6e-4f1c-4a8e-9f18-0cfac408cde9.63f7fcf8-26a1-4404-9a79-9034718d6444.description
d5cf58b9-1063-483d-b339-6a887ea883ee.8bde2f06-f852-4d17-b90e-7424e718e6e8.description=f63d4890-514e-4512-a11d-c5a75fb41ffc.b450e410-61f1-4d05-beb1-9fc203322b21.description
d5cf58b9-1063-483d-b339-6a887ea883ee.8d672c25-711e-4f9c-a137-d9d115d366c5.description=f63d4890-514e-4512-a11d-c5a75fb41ffc.f101b760-b061-45f5-a4b9-e29ad5e0332d.description
d619f782-380b-4647-90cb-ac4ac9690b04.062c93c2-cf0f-40b0-8a0d-cd9f32d03d08.prompt=Enter a value for protocol
d619f782-380b-4647-90cb-ac4ac9690b04.2d6b524a-2d43-465e-a858-187390823c66.prompt=Enter a value for password
d619f782-380b-4647-90cb-ac4ac9690b04.2ee1a4e0-16c8-4c46-b633-1ee5d6f478f2.prompt=Enter a value for port
d619f782-380b-4647-90cb-ac4ac9690b04.47ea6ce6-f86e-4d3a-85b4-487c73a7651c.prompt=Enter a value for user
d619f782-380b-4647-90cb-ac4ac9690b04.56d04bf7-f9b7-4189-99d1-480d29fe1b5e.prompt=Enter a value for vmID
d619f782-380b-4647-90cb-ac4ac9690b04.664122bc-bc10-4522-b17f-25e814a54d0a.description=<pre>\nStart the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
d619f782-380b-4647-90cb-ac4ac9690b04.b1a8cad1-84d2-4df0-8474-93161879df3e.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
d619f782-380b-4647-90cb-ac4ac9690b04.cabe71d5-603f-40fc-95d7-0d17ad68a4ee.prompt=Enter a value for host
d619f782-380b-4647-90cb-ac4ac9690b04.description=<pre>\nStart the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
d619f782-380b-4647-90cb-ac4ac9690b04.e238daf3-7d93-4f8d-9047-79dd41a2c5e1.prompt=User Identifier
d619f782-380b-4647-90cb-ac4ac9690b04.fb3986aa-0f56-4931-a51f-633ffae54ebe.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.0a254f89-a851-40fb-a573-74a6605e25ca.description=d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.0a254f89-a851-40fb-a573-74a6605e25ca.description
d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.0cc1c19a-7d3a-4b65-b76f-0f5074e7c63a.description=d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.0cc1c19a-7d3a-4b65-b76f-0f5074e7c63a.description
d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.261eb8bf-aceb-41ee-83cc-1461324c5eb9.description=d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.261eb8bf-aceb-41ee-83cc-1461324c5eb9.description
d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.2f6c9590-8917-427b-9e9f-3832709c884b.description=d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.2f6c9590-8917-427b-9e9f-3832709c884b.description
d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.2fc30a19-aabc-40f2-bc47-64ac6b5d5fdf.description=d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.2fc30a19-aabc-40f2-bc47-64ac6b5d5fdf.description
d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.4e3c0643-2967-47b0-894b-f8a31613f45f.description=d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.4e3c0643-2967-47b0-894b-f8a31613f45f.description
d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.93df1663-f31f-44eb-9e2e-c317d8371705.description=d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.93df1663-f31f-44eb-9e2e-c317d8371705.description
d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.ae10d0fd-def3-46be-9147-eeea2cd4c450.description=d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.ae10d0fd-def3-46be-9147-eeea2cd4c450.description
d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.description=<pre> This flow will list all the customspecs in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n\nResponses\:\n    success - The operation completed successfully. It will return the list of customspecs.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
d8d2b15e-f461-46ba-ac3c-fbf2692ecc7b.ecda61de-3adb-480f-88be-01439bdc5956.description=<pre> This flow will list all the customspecs in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n\nResponses\:\n    success - The operation completed successfully. It will return the list of customspecs.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
d9e07d12-7e28-447b-bf4b-1c6262e53e13.577b0570-2664-4f9f-8fa7-e163afbb65ea.prompt=Password\:
d9e07d12-7e28-447b-bf4b-1c6262e53e13.72165993-7010-4119-9159-c98fb459d356.prompt=User Identifier
d9e07d12-7e28-447b-bf4b-1c6262e53e13.8f3246a4-9fd3-44fb-aac0-13fb1749f830.prompt=Resource Provider ID
d9e07d12-7e28-447b-bf4b-1c6262e53e13.a4e8fd7a-ca53-4c4d-99a4-54cf5c6a3d4f.prompt=VMWare User\:
d9e07d12-7e28-447b-bf4b-1c6262e53e13.a55c52a4-fcaa-4f9f-9cac-40b0527869e0.description=<pre>\nInserts a new name/value property into a JSON object, where the value is a string. This operation forces the value of the name/vale pair to be a string, no matter what data type it actually is. This means that the <newPropertyValue> input does not need to be wrapped in quotes as any quotes entered in this input will be escaped, ending up in the properties' value. \nThe 'Add JSON Property to Object' operation should be used to add values of type other than string, for example\: another object, an array or a number. \n\nExamples\: \n1)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: test_value\n     Result\:\n         { "test"\:"test_value"}\n2)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: "test_value"\n     Result\:\n         { "test"\:"\\"test_value\\""}\n3)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: 1\n     Result\:\n         { "test"\:"1"}\n4)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: [1,2,3,4]\n     Result\:\n         { "test"\:"[1,2,3,4]"}\n     Note the value in the name/value pair above is not a JSON Array, but a plain string that looks like one. \n\nInputs\:\n    jsonObject - String representation of a JSON object. Objects in JSON are a collection of name value pairs, separated by a colon and surrounded with curly brackets {}. The name must be a string value, and the value can be a single string or any valid JSON object or array.\nExamples\: {"one"\:1, "two"\:2}, {"one"\:{"a"\:"a","B"\:"B"}, "two"\:"two", "three"\:[1,2,3.4]}\n    newPropertyName - The name of the new property to add to the JSON object. \nExamples\: property1, some_property, another property\n    newPropertyValue - The value for the new property. This is interpreted as a string, no matter what the contents of the input. \nExamples\: value1, another value\n\nResults\:\n    Result - The JSON array with the inserted element.\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation completed unsuccessfully. See the message in <returnResult> for details.\n</pre>
d9e07d12-7e28-447b-bf4b-1c6262e53e13.cee6e2d4-52d5-411e-8533-81119c75f7de.description=<pre>Search for VMWare objects of type propsType and their properties (propsPathset) from a root object (if any) specified by propsRootObj and propsRootObj. Retrieve each object's properties one at a time from an initial search query ala SQL Query operation. Please see VMWare Integration Guide for more details.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\npropsType - VMWare properties type (Task, Datacenter, VirtualMachine, etc.) to filter on. Type of object results desired.\npropsPathset - Property filter's pathset, comma-delimited (eg. name, info.name, runtime.host)\npropsRootObjType - VMWare object type (eg. VirtualMachine, HostSystem, ComputeResource,ResourcePool,Alarm)\npropsRootObj - VMWare object ID\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nnumberOfResults - Number of results from the query remaining to be retrieved\nreturnResult - Query result item or operation result</pre>
d9e07d12-7e28-447b-bf4b-1c6262e53e13.description=<pre>\nGet the name and available disk space for a datastore .\n\nInputs\:\nproviderId \t\t- Resource Provider Id \nuserIdentifier\t- User Identifier  \n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nMap of datastore names and its free diskspace (KB)\n\n</pre>
d9e07d12-7e28-447b-bf4b-1c6262e53e13.fca36700-bb98-4c01-9872-b4df371b60f1.prompt=VMWare Host\:
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.0ad2b1bc-2408-4e0a-917b-973efa5b38cd.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,paused). Does nothing if the virtual machine is already in the power state.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno action - The operation completed with no action performed.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.173bf837-eb17-4e71-852b-6342b91ea8f6.description=<pre>Sets the memory size for a virtual machine. The virtual machine must be in a powered off state for this operation to succeed.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation? Valid values\: true or false.\nasync - Asynchronously perform the task.\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nvmDatacenter - Virtual machine's datacenter.\nvmMemorySize - New memory size for the virtual machine in megabytes.\n\nResponses\:\nsuccess - If async is true the task was successfuly queued.  If async is false the memory size for the virtual machine was successfully set.\nfailure - Something went wrong.  See returnResult for details.\n\nReturns\:\nreturnResult - Task result or operation result.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\nMemory limits\: The maximum value for vmMemorySize is based on the virtual hardware version of the virtual machine. Limits are as follows\:\n  Virtual hardware 7 (ESX 4.0)\: 261120\n  Virtual hardware 4 (ESX 3.x)\: 65532\n  Virtual hardware 3 (ESX 2.5)\: 3600\n</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.18a74cd8-d2b7-40e3-86b0-a97de62f53f9.description=<pre>Sets the number of CPUs for a virtual machine.  The virtual machine must be in a powered off state for this operation to succeed.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation? Valid values\: true or false.\nasync - Asynchronously perform the task.\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nvmDatacenter - Virtual machine's datacenter.\nvmCpuCount - New number of CPUs for the virtual machine.\n\nResponses\:\nsuccess - If async is true the task was successfuly queued.  If async is false the CPU count for the virtual machine was successfully set.\nfailure - Something went wrong.  See returnResult for details.\n\nReturns\:\nreturnResult - Task result or operation result.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\nCPU limits\: The maximum value for vmCpuCount is based on the virtual hardware version of the virtual machine. Limits are as follows\:\n  Virtual hardware 7 (ESX 4.0)\: 8\n  Virtual hardware 4 (ESX 3.x)\: 4\n  Virtual hardware 3 (ESX 2.5)\: 2\n</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.1a42e93f-f33c-41ea-8681-4b03b5cf38a1.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.1eb2ccff-3611-4f4d-9209-acacc306e519.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.31de8fe0-ba2a-4bd6-aae3-d053f1f6025f.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,paused). Does nothing if the virtual machine is already in the power state.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno action - The operation completed with no action performed.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.4ea7e08e-5f75-4066-ac2b-1e6b6fe5080d.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.687a3a5f-0e96-4df4-a9ad-530dc86d4a1b.prompt=Virtual Machine\:
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.688b7da9-a42d-415c-a687-7549b1d43c00.prompt=Virtual Machine\:
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.6b0ef906-4571-44b6-a970-a2bf2317ee73.description=<pre>Retrieves the configured memory size for a virtual machine in megabytes.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n\nResponses\:\nsuccess - Successfully retrieved the number of megabytes of memory configured for the virtual machine.\nfailure - Something went wrong.\n\nReturns\:\nvmMemorySize - Megabytes of memory configured for the virtual machine\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.73f9c5a2-401c-47a3-8cdb-9727cd106092.description=<pre>Retrieves the configured number of CPUs for a virtual machine.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n\nResponses\:\nsuccess - Successfully retrieved the number of CPUs configured for the virtual machine.\nfailure - Something went wrong.\n\nReturns\:\nvmCpuCount - Number of CPUs configured for the virtual machine\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.9436a073-49a0-4a72-801c-a6031eabe65d.description=Changes a VM's power state. Must specify either hostSystem, clusterName, or vmResourcePool as a target location for VMs.\n\nInput Parameters\:\n vmName - name of the VM that will be created with this flow\n templateName -  name of the VM template to clone in vCenter\n osType - linux or windows\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VMs\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n clusterName - target cluster for the VMs\n vmResourcePool - target resource pool for the VMs\n vmPowerState - the desired power state (on / off etc)\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n serviceXml - xml representation of the server created in vCenter
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.9a6f3cc2-2994-45de-99b7-1c60afd7adf3.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.9f31958d-f017-4e98-917d-a92d0dc722bc.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.a547964f-9477-4fe4-9a34-bd68f3423fb1.description=<pre>Loops as many number of times as specified in the input, that is, counts from 1 to another number incrementing by 1 for each iteration.\n\nInputs\:\ncount - Number of loops to complete.\nreset - If true, then the counter will restart counting from 1.\n\nReturns\:\nThe number that was just counted.\n\nResponses\:\nhas more \t- Counting has not completed, one or more iterations are pending.\nno more \t- Counting completed. This will only be returned once, then counting restarts.\nfailure \t- Something went wrong.\n</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.ad3f6c9e-483d-4ab4-9d24-c8587108df71.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.b92d1c0f-7759-4a2b-917e-3c1d42a7b7d3.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.c1b08fd3-2b8e-4c4a-9f68-f77329c3c8dc.description=<pre>Retrieve power state of virtual machine (poweredOn,poweredOff,suspended).\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task completion return message.\npowerState - Power state (poweredOn,poweredOff,suspended).\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.c383d0cd-5387-4b54-9236-340c6ac40616.prompt=Virtual Machine\:
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.dd86ceab-883e-404c-8f1d-5eb46d2c690f.prompt=Virtual Machine\:
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.description=<pre>\nFlex up a VM to the specific CPU Memory and Disk that is requested.\n\nInput Parameters\:\n serviceName -name of the service that will be created with this flow\n VCenterHost -  vCenter host to execute against\n VCenterUsername - vCenter username\n VCenterPassword - vCenter password.\n virtualMachine - This is the virtual machine that will be flexed.\n dataStore -  target datastore on the vCenter host for the VMs\n hostSystem - target ESX host for the VMs\n cpuCount - number of cpus the virtual machine should have.\n memSize - amount of memory the virtual machine should have.\n addDisk - whether or not disk should be added to the vm.\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n\nResult Fields\:\n NA\n</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.e4ea9c4a-4e6d-409f-b7fc-de16d767bb1f.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,paused). Does nothing if the virtual machine is already in the power state.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno action - The operation completed with no action performed.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.e9d28718-ac95-49ad-bb58-1eed252924b4.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
da1cff0c-dcd9-42b4-8dd6-bed819acd6e5.eb725b4f-ff7e-4b9d-9270-7148c6415be3.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.0d3c3f68-63a4-4099-bac0-9c503d565b9c.prompt=Enter a value for socketTimeout
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.0ef5671b-2021-443c-ad4a-e202161699be.prompt=Enter a value for followRedirects
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.1272b87f-6cda-4da5-8c49-71170427a0a0.prompt=Enter a value for kerberosConfFile
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.13e62480-886e-4c9b-b31c-bbc43fba3c58.prompt=Enter a value for keystorePassword
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.1c1b473a-ce01-4d63-97d9-2fe0b6f3e039.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.28b921c4-88fd-4444-9361-9cb50333af5f.prompt=Enter a value for trustAllRoots
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.39ed8fa1-8945-489e-a26e-a9faf90d8b95.prompt=Enter a value for authType
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.3da0127d-2c93-40d8-81f6-4dc5f0da2af8.description=<pre>\nThis workflow returns the details of the given artifact id.\n\nInputs-\nartifactId \u2013   Artifact  Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nValid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nsocketTimeout - The number of milliseconds to wait for the data to be retrieved. This input should be assigned a value greater than or equal to zero. A socketTimeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nfollowRedirects - If true, the GET command automatically follows redirects. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\nuserAgent - The value that should be used if the HTTP header USER_AGENT has to be overridden.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\nname \u2013  name of the artifactr \ndisplayName \u2013 display name of the artifact\nartifactType \u2013 Artifact type\nstate \u2013 state of the artifact\nlifeCycleState \u2013  life cycle state of the artifact\nlifeCycleSubState \u2013 life cycle sub state of the artifact\ndocument  \u2013 returned XML document from API\n</pre>
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.4079d9e0-e610-45ef-a3b1-34d45eb788a3.prompt=Enter a value for proxyPort
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.490a8c85-9b9f-4f27-969d-a6ec016240be.prompt=Enter a value for userAgent
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.5512b6e0-1598-4cfe-98fe-1b6de5990327.prompt=Enter a value for proxy
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.689d0294-2e17-46b8-bf30-81cd511000db.prompt=User Identifier
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.69003f8e-b9f9-4cff-baf4-9853471a5f7f.prompt=Enter a value for proxyUsername
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.6d23d360-02f2-441c-9135-20d545fcabd1.prompt=Enter a value for trustPassword
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.712bccc0-4096-4aa1-bfed-64f3a205ddec.prompt=Enter a value for useCookies
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.9312521f-0454-4876-861e-93db26989570.prompt=Enter a value for proxyPassword
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.94d5c236-3d60-4b5f-8fcd-c0a0709e04e4.prompt=Artifact ID
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.9aa516bd-2f41-4f30-aef5-02ffd455bb3c.description=<pre>\nThis workflow retrieves all the child components from the list of component ids.\n\nInputs\:\n\nartifactIds\t\t- List of component ids each separated by "," for which the child components will be retrieved\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.b8df9802-8821-4f73-844d-82ad5ca8f17a.prompt=Enter a value for trustKeystore
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.c80a7112-8cd1-494e-9628-cceacc0efe09.prompt=Enter a value for keystore
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.description=<pre>\nThis workflow will generate hostname based on subscription name and uuid. 20 charactes from subscription and 15 characters from uuid are appended to create unique id. For Windows  15 characters from uuid are parsed to create the hostname\n\nInputs\:\n\nsubscriptionId\t- Subscription ID\nuuid\t\t- UUID of server component Id\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\n\n\nReturns\nObjectId \t- Returns hostname\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.df865daa-b304-41de-bb3c-b3c78b800c88.prompt=Enter a value for encodeURL
dc77819b-6cc7-4fbe-8ae1-63ba36d0f437.f3151d0f-2f67-4d5a-8554-2e662c1dfa44.prompt=Enter a value for timeout
dcb8961a-ac68-4da6-815a-c9d6689f1949.0bf750e7-cec0-44b5-80a0-f456d3871417.description=<pre>\nIterates through a list of values. Modifying the value of the list and delimiter inputs during iteration is not generally supported.\n\nInputs\:\nlist - The list to iterate through.\nseparator - A delimiter that separates elements in the list.\n\nReturns\:\nThe current element of the list, if the response is has more\n\nResponses\:\nhas more - Another value was in the list, and has been returned.\nhas no more - The iterator has gone fully through the list. This response will only be returned once per iteration through the list, a subsequent call to the Iterator will restart the Iteration through the list.\nfailure - failed to process the list.\n\nNote\: Where the iterator is in the list is tracked by each step's unique id. Therefore you can iterate on the same list from multiple steps simultaneously.\n\nWARNING\: Any step that will use the results of this Iterator operation will, by default, attempt to assign that step's inputs from a flow variable. If this is left checked, then the first element of the iterator will be used for every cycle of iteration.\n\n</pre>
dcb8961a-ac68-4da6-815a-c9d6689f1949.33748896-f82d-41df-9e92-506d65b1c17e.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
dcb8961a-ac68-4da6-815a-c9d6689f1949.41481b3e-4bb5-4e92-a943-cd2a4172d86d.description=<pre>Returns the length of the list.\n\nInputs\:\ndelimiter - The list delimiter.\nlist - The list to be processed\n\nResponses\:\nsuccess - The operation completed Successfully.\nfailure - Something went wrong.\n\nReturns\:\nThe length of the list.</pre>
dcb8961a-ac68-4da6-815a-c9d6689f1949.5b20cba2-0033-46a9-8769-8ac409bd36ef.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
dcb8961a-ac68-4da6-815a-c9d6689f1949.63c40e72-f816-4e70-83ad-0e77118ae0b6.description=Counts from one number to another number.\n\n<pre>\nInputs\:\nfrom - The number to start counting at.\nto - The number to count to.\nincrementBy - The number to increment by while counting. If unspecified this is 1. If you wanted to count 2,4,6,8 this would be 2.\nreset - If true, then the counter will restart counting from the beginning.\n\nNOTE\: These values must be between -9223372036854775808 and 9223372036854775807\n\nReturns\:\nThe number that was just counted.\n\nNote\: the primary result is resultString, Result can also be used. result (All lower case) should not be used as it is the response code.\n\nResponses\:\nhas more - Not yet done counting.\nno more - Done counting. This will only be returned once, then counting restarts.\nfailure - Something went wrong.\n</pre>
dcb8961a-ac68-4da6-815a-c9d6689f1949.6a42c7b9-97e7-432e-aa96-a8c2b18c473f.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
dcb8961a-ac68-4da6-815a-c9d6689f1949.7c2c7614-5e74-47bb-ac9c-1cb6ced2fdba.description=<pre>\nSubtracts two numbers\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe difference of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
dcb8961a-ac68-4da6-815a-c9d6689f1949.d887eeea-c38c-4d73-8b5e-1b44f56c930c.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
dcb8961a-ac68-4da6-815a-c9d6689f1949.description=<pre>\nBuild Customization Specification list xml elements.\n\nInputs Parameters\:\n\n list - List of values which needs to be part of the list.\n delimiter - value separation in the list.\n xmlElementName - Xml element name which needs to be built.\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n\nOutput\:\n xmlElement - List XML element.\n</pre>\n   
dcb8961a-ac68-4da6-815a-c9d6689f1949.eb0196ce-a6d5-4133-8d01-150ead46664c.prompt=Enter a value for value1
dcca6a3b-f0ef-4b71-88eb-80e00778ad8e.17888e08-915d-4972-a013-5a6747239cb2.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
dcca6a3b-f0ef-4b71-88eb-80e00778ad8e.23f9f29d-12b4-4643-947c-88344e6f6265.description=<pre>Retrieve information about a virtual machine's snapshot. If name of snapshot not specified, returns the snapshot tree.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nsnapshotName - Name of snapshot\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task completion return message\nsnapshotInfo - Snapshot information.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
dcca6a3b-f0ef-4b71-88eb-80e00778ad8e.56213dea-deec-45df-ac66-cefdd89a7a3e.description=<pre>Retrieve information about a virtual machine's snapshot. If name of snapshot not specified, returns the snapshot tree.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nsnapshotName - Name of snapshot\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task completion return message\nsnapshotInfo - Snapshot information.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
dcca6a3b-f0ef-4b71-88eb-80e00778ad8e.a0f1675d-7ea1-49b4-a4ed-8df36bfc8d2e.prompt=Virtual Machine\:
dcca6a3b-f0ef-4b71-88eb-80e00778ad8e.a0fadc9e-523f-46bf-baef-c5006add7088.prompt=Password\:
dcca6a3b-f0ef-4b71-88eb-80e00778ad8e.ac02b2e6-65e8-45ca-837e-59e8bf541704.prompt=Identify VM by\:
dcca6a3b-f0ef-4b71-88eb-80e00778ad8e.b025e788-b145-4c1f-901b-985ba9fd2db0.description=<pre>\nInsert an object into a JSON array, optionally specifying the position at which to insert the new object. \n\nThis Operation differes from the 'Add to Array' operation in that this one will try and validate the new element as\na JSON object, whereas 'Add to Array' will just wrap the element in quotes and treat it as a string. This means \nthat the element passed into this operation must be a valid JSON object, or the operation will fail. \n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n    element - The element to insert into the array. As noted above, this must be a valid JSON object or the operation will fail. It can be \n                    any valid JSON object; such as a number, string, an array, or a name/value pair list. Numbers can be entered as-is, strings\n                    must be wrapped in quotes, and objects must be formated correctly (see examples below for more info)\nValid values\: Any valid JSON object\nExamples\: 1 or "a string" or {"one"\:"two", "three"\:"four"} or [1,2,3]\n\n    index -The index in the array at which to insert the new element. If index is undefined, or index is equal to the length of the array \n               (one past the last element), the new element is placed at the end of the array. See the notes above for more information\n               on using negative numbers to specify array elements.\n               If the index is valid, the new element is inserted at that position, and all remaining elements are shifted one position to the right.\n\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\nDefault value\: undefined (insert the new element at the end of the array)\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array with the inserted element.\n\n</pre>
dcca6a3b-f0ef-4b71-88eb-80e00778ad8e.b3119505-b475-40d9-a071-43f52d81dca6.description=<pre>This operation iterates through a list of values. It is not recommended to modify the value of the "list" and "separator" inputs during the iteration process.\n\nInputs\:\n    list - The list to iterate through.\n    separator - A delimiter separating the list elements.\nDefault value\: \u2018,\u2019 (comma) \n\nResults\:\n    resultString - The current list element (if the response is "has more").\n\nResponses\:\n    has more - Another value was found in the list and it has been returned.\n    no more - The iterator has gone through the entire list. This response is returned once per list iteration.  A subsequent call to the List iterator operation restarts the list iteration process.\n    failure - The operation completed unsuccessfully.\n\nNote\:\n   The position of the iterator in the list is tracked by each step's unique identifier. Therefore, you can simultaneously iterate through the same list from multiple steps.\n</pre>
dcca6a3b-f0ef-4b71-88eb-80e00778ad8e.f2663106-1fef-43ca-a301-b291424d9429.prompt=VMWare Host\:
dd63213e-6c97-4214-b2ea-8a6cce3c43f9.0e02dacc-beac-49d7-aa1c-86563ae8ade2.description=<pre>\nThis workflow requests the life cycle engine to execute and take the given service component and it's childs to the deployed state.\n\nInputs-\ncomponentId \u2013 Service component id\nserviceInstanceId - Service Instance Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
e24fc23c-8b65-4385-8223-c91fe044eb80.0127b8b1-d102-4a7e-8101-9135aece4363.prompt=Enter a value for value2
e24fc23c-8b65-4385-8223-c91fe044eb80.291d9f7d-7691-4aa8-bf31-fc9d015c9611.description=<pre>\nMultiplies two numbers\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe product of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
e24fc23c-8b65-4385-8223-c91fe044eb80.6f67cc3f-ac03-4a1a-b88f-67c3bf5eab98.description=<pre>\nSubtracts two numbers\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe difference of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
e24fc23c-8b65-4385-8223-c91fe044eb80.acf43d05-04d9-48ee-aa75-7708620ecbd5.prompt=Enter a value for value1
e24fc23c-8b65-4385-8223-c91fe044eb80.aeae5835-4357-4f72-a5f0-b4679cb89ca4.prompt=Enter a value for value2
e24fc23c-8b65-4385-8223-c91fe044eb80.b4834dbe-9de8-4438-918c-8e4f22f49f1b.prompt=Enter a value for value1
e24fc23c-8b65-4385-8223-c91fe044eb80.bcf0f09e-e288-400b-9413-9257afe6b3c7.description=<pre>\nMultiplies two numbers\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe product of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
e24fc23c-8b65-4385-8223-c91fe044eb80.ee018161-8b06-4609-9b14-db1715e1d7af.prompt=Enter a value for value1
e24fc23c-8b65-4385-8223-c91fe044eb80.ff717b76-ccb3-4b13-bee1-67459d735e75.prompt=Enter a value for value2
e36b7fae-a44e-44cc-84e2-5529b8b4be54.1bf5f724-3d37-4f8d-8829-cc13ee0cdcd8.description=<pre>Inserts a new name/value property into a JSON object, where the value is a valid JSON string. If the <newPropertyValue> input is not a valid string representation of a JSON object, the operation fails.\n\nThe 'Add Property to Object' operation can be used to add a property with a simple string value. \n\nExamples\: \n1)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: [1,2,3]\n     Result\:\n         { "test"\:[1,2,3]}\n2)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: {"a"\:"b"}\n     Result\:\n         { "test"\:{"a"\:"b"}}\n3)\n    Inputs\:\n        jsonObject\: {}\n        newPropertyName\: test\n        newPropertyValue\: 1\n     Result\:\n         { "test"\:1}\n\nInputs\:\n    jsonObject - String representation of a JSON object. Objects in JSON are a collection of name value pairs, separated by a colon and surrounded with curly brackets {}. The name must be a string value, and the value can be a single string or any valid JSON object or array.\nExamples\: {"one"\:1, "two"\:2}, {"one"\:{"a"\:"a","B"\:"B"}, "two"\:"two", "three"\:[1,2,3.4]}\n    newPropertyName - The name of the new property to add to the JSON object. \nExamples\: property1, some_property, another property\n    newPropertyValue - The value for the new property. This must be a valid JSON representation of a JavaScript object.\nExamples\: 1, {"A"\:"A"}, [1,2,3,4]\n\nResults\:\n    Result - The JSON array with the inserted element.\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation completed unsuccessfully. See the message in <returnResult> for details.\n</pre>
e36b7fae-a44e-44cc-84e2-5529b8b4be54.3bc1937f-5de7-4ace-b599-1017bfbd2bf7.prompt=Close session?\:
e36b7fae-a44e-44cc-84e2-5529b8b4be54.44659fb4-9881-4b48-ad5c-4821356128f7.prompt=Password\:
e36b7fae-a44e-44cc-84e2-5529b8b4be54.468a73b9-a712-4232-b0dc-c3b5cdb635f1.description=<pre>\nInsert an object into a JSON array, optionally specifying the position at which to insert the new object. \n\nThis Operation differes from the 'Add to Array' operation in that this one will try and validate the new element as\na JSON object, whereas 'Add to Array' will just wrap the element in quotes and treat it as a string. This means \nthat the element passed into this operation must be a valid JSON object, or the operation will fail. \n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n    element - The element to insert into the array. As noted above, this must be a valid JSON object or the operation will fail. It can be \n                    any valid JSON object; such as a number, string, an array, or a name/value pair list. Numbers can be entered as-is, strings\n                    must be wrapped in quotes, and objects must be formated correctly (see examples below for more info)\nValid values\: Any valid JSON object\nExamples\: 1 or "a string" or {"one"\:"two", "three"\:"four"} or [1,2,3]\n\n    index -The index in the array at which to insert the new element. If index is undefined, or index is equal to the length of the array \n               (one past the last element), the new element is placed at the end of the array. See the notes above for more information\n               on using negative numbers to specify array elements.\n               If the index is valid, the new element is inserted at that position, and all remaining elements are shifted one position to the right.\n\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\nDefault value\: undefined (insert the new element at the end of the array)\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array with the inserted element.\n\n</pre>
e36b7fae-a44e-44cc-84e2-5529b8b4be54.5184e0bf-d155-488e-9278-6b541552ca1e.prompt=Virtual Machine\:
e36b7fae-a44e-44cc-84e2-5529b8b4be54.59260722-a4c5-4e0e-8b0c-363bfe2694a1.description=<pre>Get all device numbers for a specified device type on a Virtual Machine (VM).\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmDatacenter - Virtual machine's datacenter\ndeviceType - Type of device. Valid values are\: hardDisk, floppyDisk, Cdrom, SCSIController, ethernetCard.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nreturnResult - Task result or operation result\ndeviceId - Number of device of the specified deviceType.\n</pre>
e36b7fae-a44e-44cc-84e2-5529b8b4be54.5e2d72b4-50c9-4d65-a0d7-4db7cfde4888.prompt=VMWare User\:
e36b7fae-a44e-44cc-84e2-5529b8b4be54.86371a29-56cd-447b-8879-8d5bca48ef61.description=<pre>\nThis operation adds a flow variable to the local context. The variable is available in the current flow and its child flows.\n\nInputs\:\n    keyName - The name of the flow variable to add.\n    myValue - The value to assign to the flow variable.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of "myValue" input field.\n\nResponses\:\n    success - The operation completed as stated in the description.\n\nNote\:\n   If a flow variable with the same name already exists, its value will be overwritten.\n</pre>
e36b7fae-a44e-44cc-84e2-5529b8b4be54.8d485539-c861-42bf-aa48-502c5e2c5dfa.prompt=Network Card Number\:
e36b7fae-a44e-44cc-84e2-5529b8b4be54.ac8c1be8-b314-4308-b36f-1c94468a0f37.description=<pre>Useful Op to keep a running results.\nTakes a string input (resultText) and appends this to a global context key of "runningResults". As a result, the context key whose name is in the keyName input will be appended with the string from the input resultText.\n\nInput Parameters\:\nkeyName - name of context key to append to\nresultText - string input to append\ndelimiter - (leave blank for none) the delimiter to put between what is already in keyName before appending resultText\n\nResponses\:\nsuccess - assigned the context variable\n\nReturns\:\nThe the value of the context variable it appended to.\n\nContext\:\nrunningResults\n\nScriptlet Example\:\ncurrentResults \= scriptletContext.get("runningResults");\n\nif (currentResults \=\= null) {\n   currentResults \= resultText;\n} else {\n   currentResults +\= resultText;\n}\n\n\nscriptletContext.putGlobal("runningResults", currentResults);</pre>
e36b7fae-a44e-44cc-84e2-5529b8b4be54.addac98c-9a00-43c7-9bc9-519f04b4d630.prompt=VMWare Host\:
e36b7fae-a44e-44cc-84e2-5529b8b4be54.ae00109e-9158-49d5-9025-8d9fbf749d21.prompt=String to Append \:
e36b7fae-a44e-44cc-84e2-5529b8b4be54.d5d26d0b-ce61-438d-910c-81e0d093fedd.description=<pre>Retrieves details about an existing Network Interface Card (NIC) on a virtual machine.\n\nInputs\:\n    host - VMware vCenter, ESX or ESXi host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmIdentifierType - Virtual machine identifier type \nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"\n    vmDatacenter - Virtual machine's datacenter.\n    deviceNumber - The NIC number to get details of on the VM.  As an example\: "Network Adapter 1" would have be deviceNumber "1".\nExamples\: If a VM as a network adapter named "Network Adapter 1" the deviceNumber would be "1".\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    returnResult - Task result or operation result\n    connectAtPowerOn - The network adapter will automatically be connected to the network when the VM is powered on.  Possible values\: true, false.\n    connect - The network adapter is currently connected to the network.  Possible values\: true, false.\n    netPortGroup - The name of the port group the network adapter is attached to.  This can be either a legacy port group or a distributed virtual port group.\n    netMacAddr - The MAC address of the network adapter.  Example format\: "00\:50\:56\:94\:AB\:EF"\n    netMacGeneration - The MAC address assignment method configured for the network adapter.  Possible values\: assigned, generated, manual.\n    netWakeOnLan - Wake on Lan has been enabled for this network adapter.  Possible values\: true, false.\n    netNicType - The type of network adapter.  Possible values\: PCNet32, E1000, VmxNet, VmxNet2, VmxNet3.\n\nNotes\:\n1. Inventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
e36b7fae-a44e-44cc-84e2-5529b8b4be54.description=<pre>Get information about all virtual connected hard disks on a Virtual Machine (VM).\n\nInputs\:\n    host - VMWare host hostname or IP\n    user - VMWare username\n    password - VMWare user's password\n    port - Port to connect on\n    protocol - Connection protocol (http or https)\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\n    virtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123). If nothing is specified, all VMs are retrieved.\n    vmIdentifierType - Virtual machine identifier type\n    vmDatacenter - Virtual machine's datacenter\n\nResponses\:\nsuccess - The flow completed successfully.\nfailure - Something went wrong.\n</pre>
e6593a4c-4f7e-4e9d-b030-ebae91883642.05e25a9b-bc5f-4c99-9957-e0fbfa9c961a.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
e6593a4c-4f7e-4e9d-b030-ebae91883642.09523bdf-e9ad-4935-9372-f29b2e562e22.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
e6593a4c-4f7e-4e9d-b030-ebae91883642.0b543147-b87d-43c9-b6c2-2dabc9662678.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
e6593a4c-4f7e-4e9d-b030-ebae91883642.1029c9e2-b9b1-4b39-8d9a-e5138eb0f24c.prompt=Password\:
e6593a4c-4f7e-4e9d-b030-ebae91883642.118c2081-b0e2-4032-b1a1-257525037019.description=This workflow returns the component properties and values using Artifact APIs.\n\nresult\:\npropertyNameValuesList\: pipe separated list of property name and values ( where each property name and values would be ; seprated and multiple values would be , seprated)\ne.g. - property 1; value1,value2|property 2; value3|property 3; value3,value4|........
e6593a4c-4f7e-4e9d-b030-ebae91883642.13fbae74-f8a5-44e1-8529-c10ab225cbe7.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
e6593a4c-4f7e-4e9d-b030-ebae91883642.184ddb9f-68b1-4559-b123-cf9080e0570d.prompt=Password\:
e6593a4c-4f7e-4e9d-b030-ebae91883642.19e828ed-d3d8-4e53-b564-3a14069b4736.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
e6593a4c-4f7e-4e9d-b030-ebae91883642.1de26609-7ae2-48ac-8096-e3eab0c5a5a3.prompt=Resource Provider ID
e6593a4c-4f7e-4e9d-b030-ebae91883642.210a8be1-6faf-428c-8455-4fd5e949f762.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
e6593a4c-4f7e-4e9d-b030-ebae91883642.228c3ba8-40fb-472d-be38-cdae340e1d8e.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
e6593a4c-4f7e-4e9d-b030-ebae91883642.26c57f8f-5e29-499f-b691-d484c48d015e.prompt=VMWare Host\:
e6593a4c-4f7e-4e9d-b030-ebae91883642.390d872c-bcb5-48b5-8324-ebe9d40fff81.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
e6593a4c-4f7e-4e9d-b030-ebae91883642.3afe3ae1-6be7-438a-827c-88606cce4de3.prompt=User Identifier
e6593a4c-4f7e-4e9d-b030-ebae91883642.3b206b9d-d8a4-4b7b-a3aa-66d5bdfc4993.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
e6593a4c-4f7e-4e9d-b030-ebae91883642.4446a3f0-6f45-435b-a75a-4130ef6c6298.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
e6593a4c-4f7e-4e9d-b030-ebae91883642.4b4846b6-1475-4ae7-bccd-e0a9efcc8237.prompt=Process Instance ID
e6593a4c-4f7e-4e9d-b030-ebae91883642.4f731d29-abf6-491d-9709-a5eb088aa751.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
e6593a4c-4f7e-4e9d-b030-ebae91883642.50bcb3eb-0b74-4811-80e1-6b1b5b3c309f.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
e6593a4c-4f7e-4e9d-b030-ebae91883642.5c019217-9f69-4848-9685-26533d79f844.description=<pre>Checks to see if the virtual machine is template.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol (http or https).\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\n    vmDatacenter - Datacenter to get virtual machine from.\n    vmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n\nResponses\:\n    success - Successfully completed the flow.\n    failure - Something went wrong.\n\nReturns\:\n    isTemplate - Returns true if the virtual machine is template, else false.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
e6593a4c-4f7e-4e9d-b030-ebae91883642.6ddec76e-3212-42fd-932b-fe23c72e62dd.prompt=VMWare Host\:
e6593a4c-4f7e-4e9d-b030-ebae91883642.739ad9dd-e218-44d7-96f8-b0542d32b809.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
e6593a4c-4f7e-4e9d-b030-ebae91883642.89042459-a18a-4886-8666-59655909fc38.prompt=User Identifier
e6593a4c-4f7e-4e9d-b030-ebae91883642.894964b8-4169-4034-a558-4897b01d1574.prompt=User Identifier
e6593a4c-4f7e-4e9d-b030-ebae91883642.8d90b800-42a1-4d2a-a1ae-341b2a3cc1ff.prompt=User Identifier
e6593a4c-4f7e-4e9d-b030-ebae91883642.a5257540-7cdb-47ba-aaf9-705199e22c42.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
e6593a4c-4f7e-4e9d-b030-ebae91883642.b0383711-ddc5-4835-b247-078e118639f7.prompt=VMWare Host\:
e6593a4c-4f7e-4e9d-b030-ebae91883642.bc961d2b-9208-4c66-98fd-008e1ff5c918.description=<pre> Export a guest customization spec to customization spec XML string.\nThe exported customization spec xml string can be modified and imported to the vCenter Customization Specifications Manager using the 'Import Guest Customization Spec' operation.\n\nInputs\:\n    host - VMWare vCenter hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    customizationTemplateName - Name of the customization specification to export. The customization specification should already exist in the vCenter customization specifications manager.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\nReturns\:\n    returnResult - Returns the customization spec Xml string or the failure message.\n\nNotes\:\nThe returnResult of this operation can be used for the 'customizationSpecXml' input in the 'Clone Virtual Machine' operation, 'Clone Virtual Machine to Template' flow and  'Deploy Virtual Machine from Template' flow.\n</pre>
e6593a4c-4f7e-4e9d-b030-ebae91883642.c57e3cb0-2927-48ad-b9c3-20262350e773.prompt=Password\:
e6593a4c-4f7e-4e9d-b030-ebae91883642.description=<pre>\nValidates virtual machine deployment input properties. This can be attached pre deployment state to check all the required information available to deploy.\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
e6593a4c-4f7e-4e9d-b030-ebae91883642.e8e9fa13-9afd-4397-a643-8bc188aacd1f.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
e6593a4c-4f7e-4e9d-b030-ebae91883642.ecc4b238-3dee-472b-820a-4e87ae950b81.prompt=Virtual Machine\:
e6593a4c-4f7e-4e9d-b030-ebae91883642.ed4a7766-bcb2-4d6f-af64-f19263f0d426.prompt=Process Instance ID
e6593a4c-4f7e-4e9d-b030-ebae91883642.f0cc61c3-c6aa-4077-b937-8a863e237789.prompt=User Identifier
e6593a4c-4f7e-4e9d-b030-ebae91883642.f77c5686-771d-428f-8711-1b7737e7c083.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
e6593a4c-4f7e-4e9d-b030-ebae91883642.f7e0a5c7-ac52-47d4-bb56-bcef15f2eb03.description=<pre>Search for VMWare objects containing a given name (ignoring case). Retrieve each object one at a time from an initial search query ala SQL Query operation.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\npropsType - VMWare properties type (VirtualMachine, Network, ComputeResource, ClusterComputeResource, ResourcePool, HostSystem, Datastore, Datacenter, VirtualApp) to filter on. Type of object results desired.\nnameToMatch - The string to perform a case insensitive contains match to.  Only objects that contain this string in their name will be matched.  If not specified, all objects of the specified type will be matched.\n\nResponses\:\nsuccess - The operation completed successfully and there are more results available.\nfailure - Something went wrong.\nno more - There are no more results to retrieve.\n\nReturns\:\nnumberOfResults - Number of results from the query remaining to be retrieved.\nreturnResult - Query result item or operation result.</pre>
e6593a4c-4f7e-4e9d-b030-ebae91883642.f852ccaa-3a2d-4017-a20d-8adec4ce3a27.prompt=Artifact ID
e6593a4c-4f7e-4e9d-b030-ebae91883642.f9203b22-b040-4236-b786-4c8db46f1356.prompt=Process Instance ID
e686ceb6-6e33-40ea-8744-028bf2ffbd34.115e5207-b304-457f-97e3-7bee5438710a.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
e686ceb6-6e33-40ea-8744-028bf2ffbd34.316dd110-c4df-470f-b61a-32226da5de61.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
e686ceb6-6e33-40ea-8744-028bf2ffbd34.3269d81d-b3c1-4d93-82ad-5bcae7bbc814.description=<pre>\nMultiplies two numbers\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe product of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
e686ceb6-6e33-40ea-8744-028bf2ffbd34.37c78d02-e376-4ea7-870b-97906641f7b2.prompt=Enter a value for value1
e686ceb6-6e33-40ea-8744-028bf2ffbd34.5a8239e5-1320-45ea-ade3-e9f15abd6d3a.description=<pre>This flow runs a flex up/flex down action on a server group. It identifies all the servers in a group and runs the flex memory action on each server to set the memory configuration based on the user input.\n\nInputs\:\nuserIdentifier\t\: The user identifier associated with the CSA login\t\nartifactId\t\t\: The server group component ID\nhost\t\t\: The hostname or IP address of the vCenter provider\nuser\t\t\: The name of the user account to login to the vCenter provider\npassword\t\t\: The password of the user account to login to the vCenter provider\nport\t\t\: The port used by the vCenter provider\nprotocol\t\t\: The protocol used by the vCenter provider\navailableMemory\t\: The memory that is available for flex operations on the vCenter provider\nmemoryInMb\t\t\: The memory in MB that the server should be flex to\n\n\nResponse\:\nsuccess\t\t\: Memory for all servers were flexed\nignored\t\t\: Flex memory was not executed on at least one server as it has the same memory configuration as the desired configuration\nfailure\t\t\: Flex memory failed on at least one server \n</pre>
e686ceb6-6e33-40ea-8744-028bf2ffbd34.822128f7-fd00-4c20-b72d-33df2ce6ce64.description=<pre>Checks to see if a string matches a specific rule.\n\nIf the matchType is RegEx, input matchTo is the regular expression like \: ^-?\\d+(([\\.,]\\d+)?)+$. Input toMatch is the actual string to check to see if it matches the matchTo expression.\n\nInputs\:\nmatchType - The type of match to perform.\ntoMatch - The string to check if matches another string.\nmatchTo - The string to match against. \nignoreCase - Boolean value for whether or not to ignore case during match.\n\nResponses\:\nsuccess - The String matched.\nfailure - The string did not match, or something went wrong.</pre>
e686ceb6-6e33-40ea-8744-028bf2ffbd34.9919700c-7b52-4a91-85df-339f38bc1c3d.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
e686ceb6-6e33-40ea-8744-028bf2ffbd34.9db0189b-92e1-48ea-bb38-d5e0f586fbbc.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
e686ceb6-6e33-40ea-8744-028bf2ffbd34.description=<pre>This flow will flex up or flex down the cpu and memory configuration of all the servers in a server group. \n\nThe flex up and flex down operations will execute whether the server is running, suspended or in switched off state.\nIf the flex up or flex down operation fails for one server, the action will continue on the remaining servers in the server group.\nThe maximum number that can be given as input for a flex up operation depends on the underlying configured vCenter.\n\nInputs\:\nCSA_CONTEXT_ID \t\: CSA Context Id\nCSA_PROCESS_ID \t\: CSA Process Instance Id\nSVC_COMPONENT_ID \t\: This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\nRSC_PROVIDER_ID \t\: This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\nSVC_SUBSCRIPTION_EMAIL \: This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\nRSC_SUBSCRIPTION_ID \t\: This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time. Default value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\nSVC_COMPONENT_TYPE \t\: This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\nRSC_POOL_ID \t\: This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\nSVC_INSTANCE_ID \t\: This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\nSVC_SUBSCRIPTION_ID \t\: This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\nPRN_COMPONENT_ID \t\: This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\nREQ_ORG_ID \t\: This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\nREQ_USER_ID \t\: This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\nUSR_ORG_ID \t\: This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\nRSC_BINDING_ID \t\: This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nThese tokens with the default values are resolved by CSA when the flow is invoked.\n\nResponses\:\nsuccess\t\t\: The flex up/flex down operation succeeded on all servers of the server group\nfailure\t\t\: The flex up/flex down operation may have failed on one or more servers of the server group\n</pre>
e74396d5-7e59-4ddf-8cd8-4aa089023e5e.10d056cd-20db-44a3-b9e4-42ec532c76f7.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\n    string1 - The first string. \nDefault value\: "" (empty)\n    string2 - The second string.\nDefault value\: "" (empty)\n    ignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nResponses\:\n    true - If the two strings are equal.\n    false - If the two strings are not equal.\n\n</pre>
e74396d5-7e59-4ddf-8cd8-4aa089023e5e.3a5706f5-ae51-4f91-874f-3f3290e5a881.prompt=VMWare Host\:
e74396d5-7e59-4ddf-8cd8-4aa089023e5e.3bbf7f4f-d656-48f5-abb1-619af8948b76.description=<pre>Clears the value of a flow variable\n\nInput Parameters\:\nkeyName - the name of the flow variable to clear\n\nResponses\:\nsuccess - cleared the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, null];</pre>
e74396d5-7e59-4ddf-8cd8-4aa089023e5e.429af061-5c56-4ee7-8774-a3e26c29ad55.description=<pre>\nInsert an object into a JSON array, optionally specifying the position at which to insert the new object. \n\nThis Operation differes from the 'Add to Array' operation in that this one will try and validate the new element as\na JSON object, whereas 'Add to Array' will just wrap the element in quotes and treat it as a string. This means \nthat the element passed into this operation must be a valid JSON object, or the operation will fail. \n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n    element - The element to insert into the array. As noted above, this must be a valid JSON object or the operation will fail. It can be \n                    any valid JSON object; such as a number, string, an array, or a name/value pair list. Numbers can be entered as-is, strings\n                    must be wrapped in quotes, and objects must be formated correctly (see examples below for more info)\nValid values\: Any valid JSON object\nExamples\: 1 or "a string" or {"one"\:"two", "three"\:"four"} or [1,2,3]\n\n    index -The index in the array at which to insert the new element. If index is undefined, or index is equal to the length of the array \n               (one past the last element), the new element is placed at the end of the array. See the notes above for more information\n               on using negative numbers to specify array elements.\n               If the index is valid, the new element is inserted at that position, and all remaining elements are shifted one position to the right.\n\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\nDefault value\: undefined (insert the new element at the end of the array)\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array with the inserted element.\n\n</pre>
e74396d5-7e59-4ddf-8cd8-4aa089023e5e.5b84d64e-f2da-42ce-8266-161bb5dd4819.prompt=VMWare Host\:
e74396d5-7e59-4ddf-8cd8-4aa089023e5e.678c2c2b-aaaa-488a-b4eb-22dfdea51fbe.prompt=VMWare User\:
e74396d5-7e59-4ddf-8cd8-4aa089023e5e.8d3bf33e-8cfa-46dd-b9ff-65893093e9c0.description=<pre>Searches for VMWare objects containing a given name (ignoring case). Retrieves each object one at a time from an initial search query as the one used for the SQL Query operation.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on. Type of object results desired.\nExample\: VirtualMachine, Network, ComputeResource, ClusterComputeResource, ResourcePool, HostSystem, Datastore, Datacenter, VirtualApp\n    nameToMatch - The string to perform a case insensitive contains match to. Only objects that contain this string in their name will be matched.  If not specified, all objects of the specified type will be matched.\n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResults\:\n    returnResult - This is the primary result. It contains the query result item from the current iteration, a message if there are no more items to be retrieved or an error message otherwise.\n    numberOfResults - This contains the number of results from the query remaining to be retrieved.\n    returnCode - It contains the value 0 if the operation successfully completed but there are still more items to be retrieved, the value 1, if the operation successfully completed and there are no more items to be retrieved and the value -1 if an error occurred.\n\nResponses\:\n    success - The operation completed successfully and there are more results available.\n    failure - Something went wrong.\n    no more - There are no more results to retrieve.\n</pre>
e74396d5-7e59-4ddf-8cd8-4aa089023e5e.95543acd-4c75-470e-93ff-abd9b44b1a99.prompt=Password\:
e74396d5-7e59-4ddf-8cd8-4aa089023e5e.991d71bd-ed72-4900-b46a-778d3ea8c54f.description=<pre>Useful Op to keep a running results.\nTakes a string input (resultText) and appends this to a global context key of "runningResults". As a result, the context key whose name is in the keyName input will be appended with the string from the input resultText.\n\nInput Parameters\:\nkeyName - name of context key to append to\nresultText - string input to append\ndelimiter - (leave blank for none) the delimiter to put between what is already in keyName before appending resultText\n\nResponses\:\nsuccess - assigned the context variable\n\nReturns\:\nThe the value of the context variable it appended to.\n\nContext\:\nrunningResults\n\nScriptlet Example\:\ncurrentResults \= scriptletContext.get("runningResults");\n\nif (currentResults \=\= null) {\n   currentResults \= resultText;\n} else {\n   currentResults +\= resultText;\n}\n\n\nscriptletContext.putGlobal("runningResults", currentResults);</pre>
e74396d5-7e59-4ddf-8cd8-4aa089023e5e.a8f76d08-74f4-4612-b04f-402575744981.description=<pre>Search for VMWare objects of type propsType and their properties (propsPathset) from a root object (if any) specified by propsRootObjType and propsRootObj. Retrieves each object's properties one at a time from an initial search query as the one used for the SQL Query operation. Please see VMWare Integration Guide for more details.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n    no more - There are no more results to retrieve.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
e74396d5-7e59-4ddf-8cd8-4aa089023e5e.a9a753a1-b127-4940-80d3-e1f17254de3b.prompt=Password\:
e88fb139-8115-49a5-93e0-95a143d08fc4.0c843f0e-cb5a-480a-85bb-a9055f74be14.prompt=e88fb139-8115-49a5-93e0-95a143d08fc4.0c843f0e-cb5a-480a-85bb-a9055f74be14.prompt
e88fb139-8115-49a5-93e0-95a143d08fc4.2b363a1a-c346-4ee9-a527-f31e1e16cd0a.description=e88fb139-8115-49a5-93e0-95a143d08fc4.2b363a1a-c346-4ee9-a527-f31e1e16cd0a.description
e88fb139-8115-49a5-93e0-95a143d08fc4.454ba638-0981-4ee2-9ff5-3971c3a164fb.description=e88fb139-8115-49a5-93e0-95a143d08fc4.454ba638-0981-4ee2-9ff5-3971c3a164fb.description
e88fb139-8115-49a5-93e0-95a143d08fc4.4f2db3b4-af26-4a47-8b97-f7da05ea26b0.description=<pre> This flow will list all the iso images in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    datacenter -  Name of the datacenter.\n    datastore - Name of the datastore.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of iso images.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
e88fb139-8115-49a5-93e0-95a143d08fc4.5ea6ae93-c2af-4775-840b-bd321ada8a12.prompt=e88fb139-8115-49a5-93e0-95a143d08fc4.5ea6ae93-c2af-4775-840b-bd321ada8a12.prompt
e88fb139-8115-49a5-93e0-95a143d08fc4.69e67eb1-e13b-4f6c-9370-ddae897ae5c4.description=e88fb139-8115-49a5-93e0-95a143d08fc4.69e67eb1-e13b-4f6c-9370-ddae897ae5c4.description
e88fb139-8115-49a5-93e0-95a143d08fc4.6a104d01-9ee2-458f-a039-ae8978288def.prompt=e88fb139-8115-49a5-93e0-95a143d08fc4.6a104d01-9ee2-458f-a039-ae8978288def.prompt
e88fb139-8115-49a5-93e0-95a143d08fc4.70975302-95bf-495a-b134-72a5ccfb311a.description=e88fb139-8115-49a5-93e0-95a143d08fc4.70975302-95bf-495a-b134-72a5ccfb311a.description
e88fb139-8115-49a5-93e0-95a143d08fc4.83c6f032-ebf5-45d5-a4ed-e286c8e58180.prompt=e88fb139-8115-49a5-93e0-95a143d08fc4.83c6f032-ebf5-45d5-a4ed-e286c8e58180.prompt
e88fb139-8115-49a5-93e0-95a143d08fc4.88f2d5e4-2cc0-447b-88a2-d86c673fa8a0.prompt=e88fb139-8115-49a5-93e0-95a143d08fc4.5afe7aca-b01f-4e25-89ab-acac42f8c56d.prompt
e88fb139-8115-49a5-93e0-95a143d08fc4.8ea37eaf-6c48-4233-a746-f3317fc9ccf2.prompt=e88fb139-8115-49a5-93e0-95a143d08fc4.ce77ed35-82b0-4a74-b2d3-423e0ca5a9e8.prompt
e88fb139-8115-49a5-93e0-95a143d08fc4.b194fa56-fa0f-4513-83f3-cf2f73c6e95a.prompt=e88fb139-8115-49a5-93e0-95a143d08fc4.b49b3951-71dd-4bdc-9c5e-2778ef60d0fc.prompt
e88fb139-8115-49a5-93e0-95a143d08fc4.bdf2b832-cc85-440b-9407-14a0ea17d646.description=e88fb139-8115-49a5-93e0-95a143d08fc4.bdf2b832-cc85-440b-9407-14a0ea17d646.description
e88fb139-8115-49a5-93e0-95a143d08fc4.cb682841-b3ae-4055-ab22-4dba7a79528e.prompt=e88fb139-8115-49a5-93e0-95a143d08fc4.7158b4ab-a39d-44e1-a028-61c1bc173c41.prompt
e88fb139-8115-49a5-93e0-95a143d08fc4.d679f910-8ff8-46eb-9034-afc63e5f94f8.description=e88fb139-8115-49a5-93e0-95a143d08fc4.d679f910-8ff8-46eb-9034-afc63e5f94f8.description
e88fb139-8115-49a5-93e0-95a143d08fc4.description=<pre> This flow will list all the iso images in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    datacenter -  Name of the datacenter.\n    datastore - Name of the datastore.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of iso images.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
e88fb139-8115-49a5-93e0-95a143d08fc4.e60eb64b-e091-428a-9d95-f9012dc03c8e.description=e88fb139-8115-49a5-93e0-95a143d08fc4.e60eb64b-e091-428a-9d95-f9012dc03c8e.description
e88fb139-8115-49a5-93e0-95a143d08fc4.e8b68f8b-11db-4f41-87b4-f95ce38ab0e5.prompt=e88fb139-8115-49a5-93e0-95a143d08fc4.e8b68f8b-11db-4f41-87b4-f95ce38ab0e5.prompt
e88fb139-8115-49a5-93e0-95a143d08fc4.f4fa90ae-6cff-4b2f-91c5-a89482d49a81.prompt=e88fb139-8115-49a5-93e0-95a143d08fc4.e8a29b85-41bd-4cf5-a767-667ad7dc5579.prompt
e88fb139-8115-49a5-93e0-95a143d08fc4.f7c4cfdc-4361-4dc1-b28f-1f09b64bec32.description=e88fb139-8115-49a5-93e0-95a143d08fc4.f7c4cfdc-4361-4dc1-b28f-1f09b64bec32.description
e8914efd-90fb-4983-8be7-7126eccd222c.021948ec-30a2-4768-9701-9aef602c56af.prompt=Enter list of values separated by delimiter\:
e8914efd-90fb-4983-8be7-7126eccd222c.030fac98-f3aa-489e-b4ef-e779cfe87651.description=<pre>Search for VMWare objects of type propsType and their properties (propsPathset) from a root object (if any) specified by propsRootObjType and propsRootObj. Retrieves each object's properties one at a time from an initial search query as the one used for the SQL Query operation. Please see VMWare Integration Guide for more details.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n    no more - There are no more results to retrieve.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
e8914efd-90fb-4983-8be7-7126eccd222c.16923dd3-9a4a-4b3c-a852-00c8cf34eab8.prompt=Password\:
e8914efd-90fb-4983-8be7-7126eccd222c.22c4988c-7e5a-4af4-b099-dd2d66f7f00b.prompt=VMWare Host\:
e8914efd-90fb-4983-8be7-7126eccd222c.2abc2060-de4b-40ed-a355-000dda8edea6.prompt=Number to count to.
e8914efd-90fb-4983-8be7-7126eccd222c.589eb7a5-6e46-4a37-bc49-58c2e64b3d15.description=<pre>This operation is used to retrieve a value from a list. When the index of an element from a list is known, this operation can be used to extract the element.\n\nInputs\:\n    list - A list to get the value from.\n    delimiter - The delimiter that separates values in the list.\nDefault value\: ','\n    index - The index of the value (starting at 0) to retrieve from the list.\nValid values\: an integer, end (for the last element), end-1 (for the second to last element)\n\nResults\:\n    returnResult - This is the primary output. It contains the value found at the specified index in the list, if the value specified for the "index" input field is positive and less than the size of the list. Otherwise, it contains the value specified for "index".\n\nResponses\:\n     success - The operation completed as stated in the description.\n     failure - The operation completed unsuccessfully.\n</pre>
e8914efd-90fb-4983-8be7-7126eccd222c.5d10b228-3539-4555-a5ad-e8aadfa1b2df.description=<pre>Searches for VMWare objects containing a given name (ignoring case). Retrieves each object one at a time from an initial search query as the one used for the SQL Query operation.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on. Type of object results desired.\nExample\: VirtualMachine, Network, ComputeResource, ClusterComputeResource, ResourcePool, HostSystem, Datastore, Datacenter, VirtualApp\n    nameToMatch - The string to perform a case insensitive contains match to. Only objects that contain this string in their name will be matched.  If not specified, all objects of the specified type will be matched.\n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResults\:\n    returnResult - This is the primary result. It contains the query result item from the current iteration, a message if there are no more items to be retrieved or an error message otherwise.\n    numberOfResults - This contains the number of results from the query remaining to be retrieved.\n    returnCode - It contains the value 0 if the operation successfully completed but there are still more items to be retrieved, the value 1, if the operation successfully completed and there are no more items to be retrieved and the value -1 if an error occurred.\n\nResponses\:\n    success - The operation completed successfully and there are more results available.\n    failure - Something went wrong.\n    no more - There are no more results to retrieve.\n</pre>
e8914efd-90fb-4983-8be7-7126eccd222c.656c0575-850d-4bf1-b37d-9b5b3145626e.description=Counts from one number to another number.\n\n<pre>\nInputs\:\nfrom - The number to start counting at.\nto - The number to count to.\nincrementBy - The number to increment by while counting. If unspecified this is 1. If you wanted to count 2,4,6,8 this would be 2.\nreset - If true, then the counter will restart counting from the beginning.\n\nNOTE\: These values must be between -9223372036854775808 and 9223372036854775807\n\nReturns\:\nThe number that was just counted.\n\nNote\: the primary result is resultString, Result can also be used. result (All lower case) should not be used as it is the response code.\n\nResponses\:\nhas more - Not yet done counting.\nno more - Done counting. This will only be returned once, then counting restarts.\nfailure - Something went wrong.\n</pre>
e8914efd-90fb-4983-8be7-7126eccd222c.68587a82-a9fa-46e9-bd62-592ae3f37c6d.prompt=VMWare Host\:
e8914efd-90fb-4983-8be7-7126eccd222c.78306b9b-e23e-438d-a1ff-f39665f85967.description=<pre>Returns the length of the list.\n\nInputs\:\ndelimiter - The list delimiter.\nlist - The list to be processed\n\nResponses\:\nsuccess - The operation completed Successfully.\nfailure - Something went wrong.\n\nReturns\:\nThe length of the list.</pre>
e8914efd-90fb-4983-8be7-7126eccd222c.7af92bc6-090b-46dc-b484-1ea7842ab693.prompt=VMWare Host\:
e8914efd-90fb-4983-8be7-7126eccd222c.8326371d-e583-4e37-9b29-f2d143edeb9b.prompt=Password\:
e8914efd-90fb-4983-8be7-7126eccd222c.8861f538-5eb1-4dfb-b3a2-8c87abdd0c7a.description=<pre>This operation is used to retrieve a value from a list. When the index of an element from a list is known, this operation can be used to extract the element.\n\nInputs\:\n    list - A list to get the value from.\n    delimiter - The delimiter that separates values in the list.\nDefault value\: ','\n    index - The index of the value (starting at 0) to retrieve from the list.\nValid values\: an integer, end (for the last element), end-1 (for the second to last element)\n\nResults\:\n    returnResult - This is the primary output. It contains the value found at the specified index in the list, if the value specified for the "index" input field is positive and less than the size of the list. Otherwise, it contains the value specified for "index".\n\nResponses\:\n     success - The operation completed as stated in the description.\n     failure - The operation completed unsuccessfully.\n</pre>
e8914efd-90fb-4983-8be7-7126eccd222c.8bc34ae0-35b2-43c6-a559-b7f52187e93c.description=<pre>\nInsert an object into a JSON array, optionally specifying the position at which to insert the new object. \n\nThis Operation differes from the 'Add to Array' operation in that this one will try and validate the new element as\na JSON object, whereas 'Add to Array' will just wrap the element in quotes and treat it as a string. This means \nthat the element passed into this operation must be a valid JSON object, or the operation will fail. \n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n    element - The element to insert into the array. As noted above, this must be a valid JSON object or the operation will fail. It can be \n                    any valid JSON object; such as a number, string, an array, or a name/value pair list. Numbers can be entered as-is, strings\n                    must be wrapped in quotes, and objects must be formated correctly (see examples below for more info)\nValid values\: Any valid JSON object\nExamples\: 1 or "a string" or {"one"\:"two", "three"\:"four"} or [1,2,3]\n\n    index -The index in the array at which to insert the new element. If index is undefined, or index is equal to the length of the array \n               (one past the last element), the new element is placed at the end of the array. See the notes above for more information\n               on using negative numbers to specify array elements.\n               If the index is valid, the new element is inserted at that position, and all remaining elements are shifted one position to the right.\n\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\nDefault value\: undefined (insert the new element at the end of the array)\n\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array with the inserted element.\n\n</pre>
e8914efd-90fb-4983-8be7-7126eccd222c.aaa5538b-bea5-4f82-9315-3457ca21de57.description=<pre>\nThis operation adds a flow variable to the local context. The variable is available in the current flow and its child flows.\n\nInputs\:\n    keyName - The name of the flow variable to add.\n    myValue - The value to assign to the flow variable.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of "myValue" input field.\n\nResponses\:\n    success - The operation completed as stated in the description.\n\nNote\:\n   If a flow variable with the same name already exists, its value will be overwritten.\n</pre>
e8914efd-90fb-4983-8be7-7126eccd222c.bdf21c79-17a8-499a-8cdb-35b22e0a6b13.description=<pre>\nThis operation adds a flow variable to the local context. The variable is available in the current flow and its child flows.\n\nInputs\:\n    keyName - The name of the flow variable to add.\n    myValue - The value to assign to the flow variable.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of "myValue" input field.\n\nResponses\:\n    success - The operation completed as stated in the description.\n\nNote\:\n   If a flow variable with the same name already exists, its value will be overwritten.\n</pre>
e8914efd-90fb-4983-8be7-7126eccd222c.e304d062-eab1-401f-8e24-582e96b12320.prompt=VMWare User\:
e8914efd-90fb-4983-8be7-7126eccd222c.f4d4e727-2fa0-4fc4-af63-bd48ca881618.prompt=Password\:
e8914efd-90fb-4983-8be7-7126eccd222c.f50846b4-ba96-4e4b-b5b8-54953a6ad367.description=Identify supported guest OSes on a host system.\n\nInputs\:\n    host - VMware host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nValid values\: 443, 80\nDefault value\: 443\n    protocol - Connection protocol.\nValid values\: https, http\nDefault value\: https\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: true, false \nDefault value\: false\n    vmDatacenter - Virtual machine's datacenter. Use ha-datacenter if host is an ESX host.\n    hostSystem - Target virtual machine host system. If host is an ESX host, use the full hostname of the ESX host as seen in the vSphere client for this host.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\nResults\: \n    returnResult - This is the primary output. Guest OS IDs (pipe-delimited).\n    guestOsId - Guest OS IDs (pipe-delimited).\n    guestOsDescription - Guest OS description (pipe-delimited).
ec6c11f4-21a2-4fa2-a6a5-35e37c51570c.060c3e7d-1fae-4e4b-b363-8dbfd92f2917.prompt=Virtual Machine\:
ec6c11f4-21a2-4fa2-a6a5-35e37c51570c.194b9326-1711-40fe-8d1b-a19a28a3752b.prompt=VMWare User\:
ec6c11f4-21a2-4fa2-a6a5-35e37c51570c.1b34ed9f-2ddd-45d2-803a-ce84d9f54324.prompt=VMWare Host\:
ec6c11f4-21a2-4fa2-a6a5-35e37c51570c.285f2711-cfaa-4b0a-ad06-2a8f94e5bac3.prompt=Password\:
ec6c11f4-21a2-4fa2-a6a5-35e37c51570c.2bf650ea-b98f-447d-981d-f7c20f57152f.description=<pre>Modifed advanced settings for a virtual machine. Optional inputs that are left empty will not be modified on the VM.\n\nInputs\:\n    host - VMware vCenter, ESX or ESXi host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    async - Asynchronously perform the task.\nValid values\: "true", "false"\n    taskTimeOut - Time to wait in seconds before the operation is considered to have failed.\nDefault value\: 800\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmIdentifierType - Virtual machine identifier type \nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"\n    vmDatacenter - Virtual machine's datacenter.\n    guestOSID - Guest OS ID (eg. win95Guest,winNetEnterprise64Guest,etc.) or OS description (Microsoft Windows 3.1,Microsoft Windows Vista (64-bit),Red Hat Enterprise Linux 3 (64-bit)). A list of valid entries can be retrieved via the GetOSDescriptors operation.\n    enableLogging - Logging setting for the VM.  If true, logging will be enabled for the VM.  If false, logging will be disabled.\nValid values\: "true", "false"\n    disableVideoAccel - Console video acceleration setting for the VM.  If true, video acceleration will be disabled.  If false, videoacceleration will be enabled.\nValid values\: "true", "false"\n    memHotAdd - Allow memory hot add for the VM.  Only supported with virtual hardware 7 or greater.\nValid values\: "true", "false"\n    cpuHotAdd - Allow cpu hot add for the VM.  Only supported with virtual hardware 7 or greater.\nValid values\: "true", "false"\n    cpuHotRemove - Allow cpu hot removal for the VM.  Only supported with virtual hardware 7 or greater.  If true, cpuHotAdd input is forced to true.\nValid values\: "true", "false"\n    swapPlacement - Prefered location of the VM swap file.\nValid values\:\ninherit - Honor the virtual machine swapfile placement policy of the compute resource that contains this virtual machine.\nvmDirectory - Store the seapfile in teh same directory as the virtual machine.\nhostLocal - Store the swapfile in the datastore specified by the localSwapDatastore property of the virtual machine's host.    \n    virtualCpuMmu - CPU instruction set and MMU virtualization preference.\nValid values\: \nauto - Automatically enable hardware instruction set or MMU virtualization if available.\nsoftware - Always used software for instruction set and MMU virtualization.\ninstructionSet - Use instruction set hardware virtualization and software MMU virtualization.\ninstructionSetMMU - Use both instruction set and MMU hardware virtualization.\n    configParamsNames - A list of names separated by <delimiter> which represent the names for the configuration parameters to be set for the given virtual machine. Existing configuration properties will be changed.\nExample\: deploymentPlatform,snapshot.action,isolation.tools.diskWiper.disable\n    configParamsValues - A list of values separated by <delimiter> which represent the values for the configuration parameters to be set for the given virtual machine.\nExample\: windows,keep,true\n    delimiter - The delimiter used for the <configParamsNames> and <configParamsValues> inputs.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    returnResult - Task result or operation result\n\nNotes\:\n1. Inventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
ec6c11f4-21a2-4fa2-a6a5-35e37c51570c.2c3d2d44-1fb1-469b-98de-b1959f30ea76.prompt=VMWare User\:
ec6c11f4-21a2-4fa2-a6a5-35e37c51570c.3df14c1a-6d76-4a99-880a-9f2226125f3e.description=<pre>Modifed advanced settings for a virtual machine. Optional inputs that are left empty will not be modified on the VM.\n\nInputs\:\n    host - VMware vCenter, ESX or ESXi host hostname or IP.\n    user - VMware username.\n    password - VMware user's password.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    async - Asynchronously perform the task.\nValid values\: "true", "false"\n    taskTimeOut - Time to wait in seconds before the operation is considered to have failed.\nDefault value\: 800\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n    vmIdentifierType - Virtual machine identifier type \nValid values\: "inventorypath", "name", "ip", "hostname", "uuid", "vmid"\n    vmDatacenter - Virtual machine's datacenter.\n    guestOSID - Guest OS ID (eg. win95Guest,winNetEnterprise64Guest,etc.) or OS description (Microsoft Windows 3.1,Microsoft Windows Vista (64-bit),Red Hat Enterprise Linux 3 (64-bit)). A list of valid entries can be retrieved via the GetOSDescriptors operation.\n    enableLogging - Logging setting for the VM.  If true, logging will be enabled for the VM.  If false, logging will be disabled.\nValid values\: "true", "false"\n    disableVideoAccel - Console video acceleration setting for the VM.  If true, video acceleration will be disabled.  If false, videoacceleration will be enabled.\nValid values\: "true", "false"\n    memHotAdd - Allow memory hot add for the VM.  Only supported with virtual hardware 7 or greater.\nValid values\: "true", "false"\n    cpuHotAdd - Allow cpu hot add for the VM.  Only supported with virtual hardware 7 or greater.\nValid values\: "true", "false"\n    cpuHotRemove - Allow cpu hot removal for the VM.  Only supported with virtual hardware 7 or greater.  If true, cpuHotAdd input is forced to true.\nValid values\: "true", "false"\n    swapPlacement - Prefered location of the VM swap file.\nValid values\:\ninherit - Honor the virtual machine swapfile placement policy of the compute resource that contains this virtual machine.\nvmDirectory - Store the seapfile in teh same directory as the virtual machine.\nhostLocal - Store the swapfile in the datastore specified by the localSwapDatastore property of the virtual machine's host.    \n    virtualCpuMmu - CPU instruction set and MMU virtualization preference.\nValid values\: \nauto - Automatically enable hardware instruction set or MMU virtualization if available.\nsoftware - Always used software for instruction set and MMU virtualization.\ninstructionSet - Use instruction set hardware virtualization and software MMU virtualization.\ninstructionSetMMU - Use both instruction set and MMU hardware virtualization.\n    configParamsNames - A list of names separated by <delimiter> which represent the names for the configuration parameters to be set for the given virtual machine. Existing configuration properties will be changed.\nExample\: deploymentPlatform,snapshot.action,isolation.tools.diskWiper.disable\n    configParamsValues - A list of values separated by <delimiter> which represent the values for the configuration parameters to be set for the given virtual machine.\nExample\: windows,keep,true\n    delimiter - The delimiter used for the <configParamsNames> and <configParamsValues> inputs.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    returnResult - Task result or operation result\n\nNotes\:\n1. Inventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
ec6c11f4-21a2-4fa2-a6a5-35e37c51570c.59f09780-3c54-4912-baf6-77df1678279a.prompt=VMWare Host\:
ec6c11f4-21a2-4fa2-a6a5-35e37c51570c.64c51524-f4ed-43d9-a598-331598e834bb.prompt=Password\:
ec6c11f4-21a2-4fa2-a6a5-35e37c51570c.8716fa98-670a-4403-8e38-2b6a0c2e9bfa.prompt=Virtual Machine\:
ec6c11f4-21a2-4fa2-a6a5-35e37c51570c.8e3f2c9c-c7a1-44c5-8ed9-d8745dafcc40.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
ec6c11f4-21a2-4fa2-a6a5-35e37c51570c.bf63b39d-4a08-4b3e-ab33-8889ee5ef74f.prompt=Password\:
ec6c11f4-21a2-4fa2-a6a5-35e37c51570c.c931f514-c81a-4acc-b02c-d1345f913e74.prompt=VMWare Host\:
ec6c11f4-21a2-4fa2-a6a5-35e37c51570c.fa73be69-866c-47f5-bcd0-ba0c42c04e3e.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
f0693cae-afb5-445a-9ac0-655356073f9a.4d18ac20-35db-4376-9e03-f809adae3d28.prompt=VMWare User\:
f0693cae-afb5-445a-9ac0-655356073f9a.5e1fe589-f552-4342-81e4-5a04b39d0b65.prompt=Target datacenter\:
f0693cae-afb5-445a-9ac0-655356073f9a.d8dad7b9-8c22-4bf9-9d8e-406bf5b3b11e.prompt=Password\:
f0693cae-afb5-445a-9ac0-655356073f9a.dab35976-1924-4a8d-8430-2b29e47f28b1.description=<pre>\nThis workflow will generate hostname based on subscription name and uuid. 20 charactes from subscription and 15 characters from uuid are appended to create unique id. For Windows  15 characters from uuid are parsed to create the hostname\n\nInputs\:\n\nsubscriptionId\t- Subscription ID\nuuid\t\t- UUID of server component Id\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\n\n\nReturns\nObjectId \t- Returns hostname\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
f0693cae-afb5-445a-9ac0-655356073f9a.description=<pre>\nClones a  Simple vCenter virtual machine from another virtual machine.\n\nInputs Parameters\:\n\n\tresourceLocation - The provider ID where the virtual machine needs to be deployed.\n\tserverCount - The number of servers to be cloned.\n\tmemory - Virtual machine memory value.\n\tnumber_of_cpu - Virtual machine cpu value.\n\terrorMessage - Error message, if any.\n\tvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123).\n\tdatacenterName - Virtual machine's datacenter.\n\tvmNamePrefix - Virtual machine name to be entered by user.\n\tvmName - Virtual machine name with unique identifier.\n\tvmFolder - Virtual machine's folder by inventory path, / delimited not including datacenter (eg. ManagedVMs/DRS/Location1). For root folder, use /\n\tvmResourcePool - Virtual machine's resource pool.\n\thostSystem - Target virtual machine host system.\n\tthinProvision - The property specifies whether virtual disks reserve space on the VMFS filesystem or not. Value \: true implies no space is reserved.\nExample \: true, false. Default value \: true\n\tvCenterCustomizationTemplateName - Customization template name to use on the existing virtual machine or on the newly created one if a new VM is being created.\n\tremoteConsolePassword - Remote Console Password is used to login the server  for remote access.\n\tvCenterRemoteConsolePort - Remote Console Port is used for remote access for the particular provisioned server.\n\n\nOutput Parameters \:\n\n\tGuest OS - The guest operating system of the VM.\n\tHost Name - Virtual machine name with unique identifier.\n\tIp Address - IP address of the virtual machine.\n\tmacAddress\t- Represents the primary MAC address of the server.\n\tPowerState - The power state of the virtual machine.\nExample \: on, off, etc.\n\tproviderId - The provider ID where the virtual machine has been deployed.\n\tType of OS Image - Type of operating system installed.\nExample \: Windows, Linux, etc.\n\tVM Name - Virtual machine name with unique identifier.\n\tvmDatacenterName - Virtual machine's datacenter.\n\tvmId - Unique identifier of the provisioned vm.\n\tvmUUID - Unique identifier of the provisioned vm.\n\t\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
f0693cae-afb5-445a-9ac0-655356073f9a.dfd44cbe-3bb9-4c3f-b6ee-665aba05acf9.prompt=User Identifier
f0693cae-afb5-445a-9ac0-655356073f9a.e7523078-f2ab-447a-87b8-8970750c1efa.description=\nInputs\:\n\nhost -  vCenter DNS name/IP Address\nusername - vCenter user\npassword - vCenter user password\nport - vCenter port\nprotocol - vCenter protocol\nhypervisorName - Hypervisor DNS name/IP Address\ndataStore - Datastore of the hypervior\ndatacenterName - Datacenter name\nhostname - VM Server name\ntemplateReference -  VM Template name\nosType -  OS Type of the template\nCPUs - CPU Count to be assigned\nMemory -  Memory Size to be assigned\n\n\nResults\:\n\nvmId - VM Identifies of the created VM\nipAddress - IP Address of the created VM\nmacAddress - MAC Address of the created VM\n\n\n\n\n
f0693cae-afb5-445a-9ac0-655356073f9a.eae80853-cdd5-4276-926d-2ead3457d9ec.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
f0693cae-afb5-445a-9ac0-655356073f9a.eef617ea-5f73-4e4b-9ab6-d85f11b9abd3.prompt=VMWare Host\:
f295138c-6a82-4bfe-ba18-cd5fbb587e7e.042ae949-c109-4b3a-bcce-61ba859759fc.description=<pre>Retrieve information about a virtual machine's snapshot. If name of snapshot not specified, returns the snapshot tree.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nsnapshotName - Name of snapshot\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task completion return message\nsnapshotInfo - Snapshot information.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
f295138c-6a82-4bfe-ba18-cd5fbb587e7e.9934bf5d-50b1-4de8-b02d-6be9635a1f28.prompt=Password\:
f295138c-6a82-4bfe-ba18-cd5fbb587e7e.a6446148-fbfa-4c33-a8fb-4ff1bc354e5c.prompt=VMWare Host\:
f2c06baa-81a5-4f79-92fa-e7cc7f478f60.1a20a0cc-6f48-4349-80c3-17349e9eb514.description=<pre> \nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\n    keyName - The key to check, i.e. the name of the flow variable. \n    trimSpaces - If set on "true" then all the whitespaces will be removed from the value stored. \nValid values\: true, false\nDefault value\: false\n\nReturns\: \n    The value in the specified key, i.e. flow variable with all whitespaces removed.\n\nResponses\:\n    isNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\n    notNull - If some value is stored in the key, i.e the flow variable has a value assigned. \n\nNotes\: \n    1. If the "trimSpaces" input is set on "true" and the value from "keyName" contains only whitespaces then the response will be "isNull". \n    2. If the "trimSpaces" input is set on "false" and the value from "keyName" contains only whitespaces then the response will be "notNull". \n    3. If any other value than "true" or "false" is passed on "trimSpaces" input then the default value (false) will be used.\n</pre>
f2c06baa-81a5-4f79-92fa-e7cc7f478f60.1b6fb001-e2b1-4b45-b020-558f05b05a70.description=<pre>Generates UUID.\n\nInputs\:\nNone\n\nResponses\:\nsuccess - The operation completed Successfully.\n\nReturns\:\nUUID [Universally Unique IDentifier] </pre>
f2c06baa-81a5-4f79-92fa-e7cc7f478f60.2d2385f4-97ed-4aa9-ad16-6cacfcb473ce.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
f2c06baa-81a5-4f79-92fa-e7cc7f478f60.8939fa7b-8482-4703-bbdb-a9a8d231b7e6.description=<pre>\nThis workflow retrieves all the child components from the list of component ids.\n\nInputs\:\n\nartifactIds\t\t- List of component ids each separated by "," for which the child components will be retrieved\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
f2c06baa-81a5-4f79-92fa-e7cc7f478f60.c3a3ea4b-fcb4-491d-98f1-b994b97d61cf.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
f2c06baa-81a5-4f79-92fa-e7cc7f478f60.description=<pre>\nThis workflow will generate hostname based on subscription name and uuid. 20 charactes from subscription and 15 characters from uuid are appended to create unique id. For Windows  15 characters from uuid are parsed to create the hostname\n\nInputs\:\n\nsubscriptionId\t- Subscription ID\nuuid\t\t- UUID of server component Id\nuserIdentifier\t- User Identifier to pass to the wrapper flow to retrieve the child components\n\n\nReturns\nObjectId \t- Returns hostname\n\nResponses\:\nsuccess - Workflow completed successfully.\nfailure - Something went wrong.\n</pre>\n\n
f556eb33-c823-4d0d-91ef-a15dd08ba99a.1c394797-d746-4a5d-a0ea-140193c2dbd9.description=<pre>\nThis workflow requests the life cycle engine to execute and take the given service component and it's childs to the deployed state.\n\nInputs-\ncomponentId \u2013 Service component id\nserviceInstanceId - Service Instance Id\nuserIdentifier  - User Identifier id\nauthType - The authentication type that this operation uses when trying to execute the request on the target server.\nvalid values\: basic, form, digest, ntlm, kerberos, anonymous (no authentication).\nDefault value\: anonymous - authentication not used when executing the request.\nkerberosConfFile - The path to the Kerberos configuration file. If this input is empty the kdc (Key Distribution Center) and realm will get their values from the full domain name which is obtained from the url of the web server.\ntimeout - The number of milliseconds to wait for a connection to be established. This input should be assigned a value greater than or equal to zero. A timeout value of zero is an infinite timeout.\nDefault value\: 0.\nuseCookies - If true, enables cookie tracking. Cookies will be stored between consecutive calls. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: true.\nproxy - A proxy to use when accessing the web site.\nproxyPort - The port on the proxy to connect to.\nproxyUsername - The username to use when connecting to the proxy.\nproxyPassword - The password to use when connecting to the proxy.\nencodeURL - If true, automatically encodes the URL. This is a boolean input. If a non-boolean value is specified, it will take the default value.\nDefault value\: false.\ntrustAllRoots - If true, enables weak security over SSL. A SSL certificate is trusted even if no trusted CA issued it.\nDefault value\: true\nkeystore - URL of the keystore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS client authentication is not to be used.\nkeystorePassword - Password to unlock the keystore.\ntrustKeystore - URL of the truststore file or local path to it (e.g. %JAVA_HOME%/jre/lib/security/cacerts). It may be empty if HTTPS server authentication is not to be used.\ntrustPassword - Password to unlock the truststore.\n\nOutputs-\ndocument  \u2013 returned XML document from API\n</pre>
f5ce72c3-0a44-408a-a2cc-5dce3ab6e86b.08eb5008-5cce-45da-9d7b-3b7f3618694a.prompt=Enter a value for value2
f5ce72c3-0a44-408a-a2cc-5dce3ab6e86b.22754469-33b3-48cc-9bef-05d5665b4f8d.prompt=Enter a value for value1
f5ce72c3-0a44-408a-a2cc-5dce3ab6e86b.43b38546-6890-474f-83b7-52e3fbbf1294.description=<pre>\nSubtracts two numbers\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe difference of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
f5ce72c3-0a44-408a-a2cc-5dce3ab6e86b.4f770807-a636-4974-8a53-ed8bd7421dc4.prompt=Enter a value for value2
f5ce72c3-0a44-408a-a2cc-5dce3ab6e86b.5b0d451b-cc3c-4d37-bb0a-0d7b02e6454a.prompt=Enter a value for value2
f5ce72c3-0a44-408a-a2cc-5dce3ab6e86b.6f1c8ab0-0784-4516-94f4-7bae2b3c8f77.prompt=Enter a value for value1
f5ce72c3-0a44-408a-a2cc-5dce3ab6e86b.7f90c7d3-2d67-4207-9dbe-29bf5632bbff.description=<pre>\nMultiplies two numbers\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe product of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
f5ce72c3-0a44-408a-a2cc-5dce3ab6e86b.c199da0f-73a0-4ef6-b28f-50555b1a38dc.description=<pre>\nMultiplies two numbers\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nThe product of the two numbers.\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n</pre>
f5ce72c3-0a44-408a-a2cc-5dce3ab6e86b.fbb1d94a-74e2-4a30-9a05-fcfbcf26a97b.prompt=Enter a value for value1
f6262108-318c-463b-8520-db7156c8151f.0a292b0a-c19b-4281-825d-fc8c0c219586.description=f6262108-318c-463b-8520-db7156c8151f.0a292b0a-c19b-4281-825d-fc8c0c219586.description
f6262108-318c-463b-8520-db7156c8151f.4e4dd83f-f722-4a5b-b289-f4ee7c60d42c.description=f6262108-318c-463b-8520-db7156c8151f.4e4dd83f-f722-4a5b-b289-f4ee7c60d42c.description
f6262108-318c-463b-8520-db7156c8151f.6274a375-5bae-4080-938f-459c53064591.description=f6262108-318c-463b-8520-db7156c8151f.6274a375-5bae-4080-938f-459c53064591.description
f6262108-318c-463b-8520-db7156c8151f.7bb41356-aafd-44ae-98d9-79fff8ef39cb.prompt=f6262108-318c-463b-8520-db7156c8151f.7bb41356-aafd-44ae-98d9-79fff8ef39cb.prompt
f6262108-318c-463b-8520-db7156c8151f.87fe6bae-476a-400f-a9c5-158dd9291f36.description=f6262108-318c-463b-8520-db7156c8151f.87fe6bae-476a-400f-a9c5-158dd9291f36.description
f6262108-318c-463b-8520-db7156c8151f.b0f0d34c-c494-4210-bed6-f0229b72d2b5.prompt=f6262108-318c-463b-8520-db7156c8151f.b0f0d34c-c494-4210-bed6-f0229b72d2b5.prompt
f6262108-318c-463b-8520-db7156c8151f.b53e2c89-3609-4a88-9bf0-cddf4971f2b6.prompt=f6262108-318c-463b-8520-db7156c8151f.b53e2c89-3609-4a88-9bf0-cddf4971f2b6.prompt
f6262108-318c-463b-8520-db7156c8151f.description=<pre> This flow will list all the networks in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of networks.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
f736363a-0a42-4595-84c1-915cd1aa162d.202840bc-e52d-4732-9241-7354246b11f9.description=<pre>Create a snapshot of an existing virtual machine disks and optionally the virtual machine memory if it is running. \n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\nvirtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\nvmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\nasync - Asynchronously perform the task (true, false).\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds).\nsnapshotName - Name of snapshot.\ndescription - Description / annotation of the snapshot.\nsnapshotMem - Snapshot virtual machine memory as well if virtual machine is running? Valid inputs\: true, false (default is true).\nquiesce - Quiesce guest filesystem if vmware tools is install on guest os and virtual machine is running? Valid inputs\: true, false (default is true).\n\nResponses\:\nsuccess - If async is true the task was successfuly queued.  If async is false the snapshot of the virtual machine was successfuly created.\nfailure - Something went wrong.  See returnResult for details.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
f736363a-0a42-4595-84c1-915cd1aa162d.6d3c02b3-f2c5-4bea-a6e2-8e01b98eba09.description=<pre>Retrieve information about a virtual machine or a group of virtual machines in a datacenter or host system (pipe-delimited). Retrieve each object one at a time from an initial search query ala SQL Query operation.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvmDatacenter - Virtual machine's datacenter.\nvmIdentifierType - Virtual machine identifier type.\nhostSystem - Target virtual machine host system.\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123).\ngetDetailed - Retrieve detailed information?\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nvmInfo - Virtual machine information.\nnumberOfResults - Number of results from the query remaining to be retrieved.\nreturnResult - Virtual machine ID or operation results.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
f736363a-0a42-4595-84c1-915cd1aa162d.9d40cbdd-ffe5-4c45-85df-546ecb375cf2.prompt=Virtual Machine\:
f736363a-0a42-4595-84c1-915cd1aa162d.d0200dba-63e8-4c4d-9df9-7bfd3c31ea18.prompt=VMWare Host\:
f8a46c6f-0240-4258-892f-8bd8d1c00d18.1027152a-d9c3-451b-95c8-f13e7fca0cc2.description=<pre>Checks if a number or word is greater than or equal to another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 >\= value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
f8a46c6f-0240-4258-892f-8bd8d1c00d18.3046f63e-4de6-48a7-ae8e-0f6a89b8db67.prompt=Enter a value for value1
f8a46c6f-0240-4258-892f-8bd8d1c00d18.89d84be6-9b7f-4681-a3fb-ceaa792bff4f.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
f8a46c6f-0240-4258-892f-8bd8d1c00d18.a6d217e2-0e18-45f5-b781-13aab5c5f19a.description=<pre>Checks if a number or word is greater than or equal to another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 >\= value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
f8a46c6f-0240-4258-892f-8bd8d1c00d18.bceac12d-56d6-45a9-9e7e-05783767594c.description=<pre>Checks if a number or word is equal to another number or word. Word comparison is case-sensitive in alphabetical order.\n\nInputs\:\nvalue1 - The first value.\nvalue2 - The second value.\n\nReturns\:\nvalue1 \=\= value2\n\nResponses\:\nsuccess - The boolean operation was evaluated to true.\nfailure - Something went wrong or the boolean operation returned false.\n</pre>
f8a46c6f-0240-4258-892f-8bd8d1c00d18.c520e9f0-a722-46d7-8199-4388090e5f03.prompt=Enter a value for value1
f8a46c6f-0240-4258-892f-8bd8d1c00d18.description=<pre>This flow validates the CPU ad memory for valid inputs.\n\nInputs\:\ncpuCount\t\t\: Number of CPUs\t\nmemoryInMb\t\t\: Memory in MB\n\n\nResponse\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n</pre>
f8a46c6f-0240-4258-892f-8bd8d1c00d18.ec7b828c-18e2-4989-b938-9bd4dbd358da.prompt=Enter a value for value1
f99962a7-878b-4929-9b26-17f834119698.10adecf6-dd16-4264-a8f6-5f2e4940cf2f.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
f99962a7-878b-4929-9b26-17f834119698.3ce1cc0a-a7a3-42e5-a13d-96711cdfff96.description=a1e1cadc-8114-4707-96d7-21d275c84a3e.e66562db-c31a-4148-826d-f41d082c5cb1.description
f99962a7-878b-4929-9b26-17f834119698.9bde7b78-370c-485a-abc1-f1c5ab21a189.description=<pre>\nStart the Virtual Machine\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
f99962a7-878b-4929-9b26-17f834119698.bf1acdcf-8afa-409e-b89a-a2276f1e54d5.description=a1e1cadc-8114-4707-96d7-21d275c84a3e.8385a693-9ae0-45a1-afd7-f7e728cdeec5.description
faa547dc-b3a6-4f85-b1f2-906de8d2615e.1a7444a6-1f0c-4888-a140-4999ddd6e028.description=faa547dc-b3a6-4f85-b1f2-906de8d2615e.1a7444a6-1f0c-4888-a140-4999ddd6e028.description
faa547dc-b3a6-4f85-b1f2-906de8d2615e.849b6cdd-45c8-46b4-9895-849733cff65c.description=faa547dc-b3a6-4f85-b1f2-906de8d2615e.849b6cdd-45c8-46b4-9895-849733cff65c.description
faa547dc-b3a6-4f85-b1f2-906de8d2615e.99b711b5-bb09-4d3f-a4e6-a09ee883cf75.description=faa547dc-b3a6-4f85-b1f2-906de8d2615e.99b711b5-bb09-4d3f-a4e6-a09ee883cf75.description
faa547dc-b3a6-4f85-b1f2-906de8d2615e.9cc1135a-e7da-4802-8d92-47c528e0e1b8.description=<pre> This flow will list all the networks in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of networks.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
faa547dc-b3a6-4f85-b1f2-906de8d2615e.bb0fb31a-7cb5-4ea0-abc5-8c73985456b8.description=faa547dc-b3a6-4f85-b1f2-906de8d2615e.bb0fb31a-7cb5-4ea0-abc5-8c73985456b8.description
faa547dc-b3a6-4f85-b1f2-906de8d2615e.c6aa632b-5e90-4b87-8f95-c56b9d8f41a8.description=faa547dc-b3a6-4f85-b1f2-906de8d2615e.c6aa632b-5e90-4b87-8f95-c56b9d8f41a8.description
faa547dc-b3a6-4f85-b1f2-906de8d2615e.c6c2c54e-c535-427d-89a4-ec881fd2670c.description=faa547dc-b3a6-4f85-b1f2-906de8d2615e.c6c2c54e-c535-427d-89a4-ec881fd2670c.description
faa547dc-b3a6-4f85-b1f2-906de8d2615e.description=<pre> This flow will list all the networks in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of networks.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
faa547dc-b3a6-4f85-b1f2-906de8d2615e.f61567b1-669b-466d-a8ac-47def17192e9.description=faa547dc-b3a6-4f85-b1f2-906de8d2615e.f61567b1-669b-466d-a8ac-47def17192e9.description
fabf251a-7533-4c5b-afea-74dede095492.072a0a11-e9f6-4697-b90f-00c7055c97bf.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
fabf251a-7533-4c5b-afea-74dede095492.29508a4e-de5e-40e6-8a91-49fc765bddd4.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
fabf251a-7533-4c5b-afea-74dede095492.588940a0-f6da-41ea-8490-2898d3c10a3c.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
fabf251a-7533-4c5b-afea-74dede095492.69c2c8c3-ab8e-4e54-a673-cb4a916a950f.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
fabf251a-7533-4c5b-afea-74dede095492.7ec4b5b1-c9da-4878-ae98-2759bf3a3fd9.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
fabf251a-7533-4c5b-afea-74dede095492.921e28fb-2c64-4b55-b605-be8af3122144.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
fabf251a-7533-4c5b-afea-74dede095492.c1f00957-7b71-488e-ac91-8d306686f0e1.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
fabf251a-7533-4c5b-afea-74dede095492.db5cf1bd-f5f6-499b-9aaa-f0ba1497effa.description=This workflow adds/ updates the component properties to Instance using Artifact APIs.\n\nonlyUpdate\: yes/no \nyes - To update values of existing properties \nno - To add and/or update properties\n\nkeyValuePairs\:\nIf you want to Add/update new properties\:\n                <property>\n                                <name>property1</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>INTEGER</name>\n                                </valueType>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <scope>\n                                                <name>PUBLIC</name>\n                                </scope>\n                                <valueType>\n                                                <name>STRING</name>\n                                </valueType>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>\n\nIf you want to only update the values of existing properties\:\n <property>\n                                <name>property1</name>\n                                <values>\n                                                <value>5</value>\n                                </values>\n                </property>    \n                <property>\n                                <name>property2</name>\n                                <values>\n                                                <value>abc xyz</value>\n                                </values>\n                </property>
fabf251a-7533-4c5b-afea-74dede095492.description=<pre>This flow updates cpu and memory values on the component.\n\nInputs\:\ncomponentId\t\t\: Component Id\nuserIdentifier\t\: User Identifier\nnCPU\t\t\: Number of CPUs\nmemory\t\t\: Memory (MB)\nnCPU_deployed\t\: CPUs Deployed\nmemory_deployed\t\: memory Deployed \n\n\nResponse\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n</pre>
fb1f1da5-cfc8-489e-907a-cdd9c3759901.147ac550-5cd1-426f-95b4-e1dfd43c91cc.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
fb1f1da5-cfc8-489e-907a-cdd9c3759901.23e5a741-453c-45c7-8be7-380872b6f2f4.description=fb1f1da5-cfc8-489e-907a-cdd9c3759901.23e5a741-453c-45c7-8be7-380872b6f2f4.description
fb1f1da5-cfc8-489e-907a-cdd9c3759901.326cc187-5fdf-4b89-afce-683e332e67c7.description=<pre>\nThis operation does not do anything. It can be used to filter flow variables by defining them as inputs and filtering them in the Results tab.\n\nInputs\:\n    field1 \u2013 An optional input that can be used for filtering flow variables.\n    field2 \u2013 An optional input that can be used for filtering flow variables.\n    field3 \u2013 An optional input that can be used for filtering flow variables.\n    field4 \u2013 An optional input that can be used for filtering flow variables.\n\nResults\:\n    returnResult - This is the primary output. It contains the value of  "field1" as it was specified at input or when filtered. \n\nResponses\:\n    success - The operation completed as stated in the description.\n</pre>
fb1f1da5-cfc8-489e-907a-cdd9c3759901.355ef2c5-c9ab-4c37-9a79-bd469b922021.description=fb1f1da5-cfc8-489e-907a-cdd9c3759901.355ef2c5-c9ab-4c37-9a79-bd469b922021.description
fb1f1da5-cfc8-489e-907a-cdd9c3759901.43c5fbc7-944f-4947-bff7-8bf844decaf7.description=fb1f1da5-cfc8-489e-907a-cdd9c3759901.43c5fbc7-944f-4947-bff7-8bf844decaf7.description
fb1f1da5-cfc8-489e-907a-cdd9c3759901.4bf788b2-9a92-4228-b948-fdce6c4560fd.description=<pre> This flow will list all the templates in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of templates.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
fb1f1da5-cfc8-489e-907a-cdd9c3759901.5fdf27b0-758d-42bf-af50-561baa7bf44e.description=b82b2e28-1cf3-444c-b35d-8e39a90ed238.f74d8ffa-dbd9-4cb9-86f8-200b5674bb20.description
fb1f1da5-cfc8-489e-907a-cdd9c3759901.6215c31e-798f-4388-b1e2-89d846515fbf.description=<pre>This operation retrieves the vCenter details.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    port - Port to connect on.\nExamples\: 443, 80\n    protocol - Connection protocol.\nValid values\: "https", "http"\n\nResults\:\n    returnResult - This is the primary result. It contains the vCenter version.\n    exception - In case of success response, this result is empty. In case of failure response, this result contains the java stack trace of the runtime exception.\n    returnCode - It contains the value 0 if the operation successfully completed but there are still more items to be retrieved, the value 1, if the operation successfully completed and there are no more items to be retrieved and the value -1 if an error occurred.\n    instanceUuid - Globally unique identifier associated with this vCenter Server instance.\n    build - Build string for the server.\nFor example, x.y.z-num. This string does not apply to the API\n    name - Short form of the product name.\n    osType - Operating system type and architecture.\n    vendor - Name of the product vendor.\n    version - Version of the product as a dot separated version string.\nFor example, 1.2.\n\nResponses\:\n    success - The operation completed successfully and there are more results available.\n    failure - Something went wrong.\n</pre>
fb1f1da5-cfc8-489e-907a-cdd9c3759901.7e8bba1e-623a-431c-9f77-62e61f61962d.description=fb1f1da5-cfc8-489e-907a-cdd9c3759901.7e8bba1e-623a-431c-9f77-62e61f61962d.description
fb1f1da5-cfc8-489e-907a-cdd9c3759901.ce274f3d-66d6-4771-aa1a-9221eed6c7a5.description=<pre> This flow will list all the customspecs in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n\nResponses\:\n    success - The operation completed successfully. It will return the list of customspecs.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
fb1f1da5-cfc8-489e-907a-cdd9c3759901.d2fb8501-2a0a-418a-86b1-006eb065e606.description=<pre> This flow will list all the datacenters in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n\nResponses\:\n    success - The operation completed successfully. It will return the list of datacenters.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
fb1f1da5-cfc8-489e-907a-cdd9c3759901.description=<pre> This flow will list all the details like datacenter, datastore, networks, templates, virtual machines, folders and customespecs in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    providerid - Id of the vCenter provider\n\nResponses\:\n    success - The operation completed successfully. It will return the list details like datacenter, datastore, networks, templates, virtual machines, folders and customespecs in the vCenter.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
fb1f1da5-cfc8-489e-907a-cdd9c3759901.e61bd10b-3b2c-4c07-999e-b65238bfc5b2.description=fb1f1da5-cfc8-489e-907a-cdd9c3759901.e61bd10b-3b2c-4c07-999e-b65238bfc5b2.description
fb3bdecf-9cc3-4809-b29f-08fc34b3089e.01a1110b-274c-476f-9c0f-4387aa70d136.description=<pre>Destroy / delete an object in VMWare.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\npropsRootObjType - VMWare object type (eg. VirtualMachine, HostSystem, ComputeResource,ResourcePool,Alarm)\npropsRootObj - VMWare object ID\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\n\nReturns\:\nreturnResult - Task ID or task completion return message</pre>
fb3bdecf-9cc3-4809-b29f-08fc34b3089e.19eebe3f-6288-49bb-b6d3-031f3e2db9e3.description=<pre>Sets the power state of virtual machine (poweredOn,poweredOff,paused). Does nothing if the virtual machine is already in the power state.\n\nInputs\:\nhost - VMWare host hostname or IP\nuser - VMWare username\npassword - VMWare user's password\nport - Port to connect on\nprotocol - Connection protocol (http or https)\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nasync - Asynchronously perform the task\ntaskTimeOut - Time to wait before the operation is considered to have failed (seconds)\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123)\nvmIdentifierType - Virtual machine identifier type\nvmPowerState - Virtual machine power state to set (poweredOn, poweredOff, suspended).\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno action - The operation completed with no action performed.\n\nReturns\:\nreturnResult - Task ID or task completion return message.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
fb3bdecf-9cc3-4809-b29f-08fc34b3089e.73ef9b94-2827-4a48-aa60-f352b5b30c50.description=<pre>Retrieve information about a virtual machine or a group of virtual machines in a datacenter or host system (pipe-delimited). Retrieve each object one at a time from an initial search query ala SQL Query operation.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation?\nvmDatacenter - Virtual machine's datacenter.\nvmIdentifierType - Virtual machine identifier type.\nhostSystem - Target virtual machine host system.\nvirtualMachine - Primary Virtual Machine identifier. IP (IPv4 or IPv6 depending upon ESX version), hostname (full), inventorypath (Datacenter/vm/MyResourcePool/MyVM), UUID, or the VM id (vm-123,123).\ngetDetailed - Retrieve detailed information?\n\nResponses\:\nsuccess - The operation completed successfully.\nfailure - Something went wrong.\nno more - there are no more results to retrieve.\n\nReturns\:\nvmInfo - Virtual machine information.\nnumberOfResults - Number of results from the query remaining to be retrieved.\nreturnResult - Virtual machine ID or operation results.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter or vSphere server the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter or vSphere client. The inventory path is case sensitive.\n</pre>
fb3bdecf-9cc3-4809-b29f-08fc34b3089e.description=<pre>\nPower off and terminate a VM.\n\nInput Parameters\:\n VMID - the unique Identifier of the VM on a vCenter.\n hostname - hostname of the VM to terminate\n host -  vCenter host to execute against\n user - vCenter username\n password - vCenter password\n vmDatacenter -  target Datacenter on the vCenter host for the VM\n hostSystem - current ESX host for the VM\n\nResponses\:\n   success - if the command completes execution and its exit code is 0\n   failure - otherwise\n</pre>
fb3bdecf-9cc3-4809-b29f-08fc34b3089e.fc39cd29-585f-4a0b-96cf-cf9899ea478e.prompt=Virtual Machine\:
fba75758-487c-4ec4-bcf8-8adbf00099a5.0564e0f7-86b6-49d0-ad51-adc3ed7e4bfc.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
fba75758-487c-4ec4-bcf8-8adbf00099a5.0586de83-c3b2-42b3-b998-214eade043da.prompt=Process Instance ID
fba75758-487c-4ec4-bcf8-8adbf00099a5.0cbf0080-0677-4b50-97ee-726688bc9744.description=<pre>Search for VMWare objects containing a given name (ignoring case). Retrieve each object one at a time from an initial search query ala SQL Query operation.\n\nInputs\:\nhost - VMWare host hostname or IP.\nuser - VMWare username.\npassword - VMWare user's password.\nport - Port to connect on.\nprotocol - Connection protocol (http or https).\ncloseSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\npropsType - VMWare properties type (VirtualMachine, Network, ComputeResource, ClusterComputeResource, ResourcePool, HostSystem, Datastore, Datacenter, VirtualApp) to filter on. Type of object results desired.\nnameToMatch - The string to perform a case insensitive contains match to.  Only objects that contain this string in their name will be matched.  If not specified, all objects of the specified type will be matched.\n\nResponses\:\nsuccess - The operation completed successfully and there are more results available.\nfailure - Something went wrong.\nno more - There are no more results to retrieve.\n\nReturns\:\nnumberOfResults - Number of results from the query remaining to be retrieved.\nreturnResult - Query result item or operation result.</pre>
fba75758-487c-4ec4-bcf8-8adbf00099a5.107ae8e2-6cfa-4805-b9e3-708bfef9987b.prompt=Password\:
fba75758-487c-4ec4-bcf8-8adbf00099a5.19f81d7e-6198-4fef-9039-a3cd55de104d.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
fba75758-487c-4ec4-bcf8-8adbf00099a5.1e429687-3cbf-4f0f-a048-aff2d0a05322.prompt=VMWare Host\:
fba75758-487c-4ec4-bcf8-8adbf00099a5.2def1e4a-fd03-4034-a341-d79f26fbc8dd.prompt=Password\:
fba75758-487c-4ec4-bcf8-8adbf00099a5.3bd440b3-de77-4f82-999c-e8ac44b5f941.prompt=User Identifier
fba75758-487c-4ec4-bcf8-8adbf00099a5.3f176bc2-e5d7-4616-9f5d-b47076e8d538.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
fba75758-487c-4ec4-bcf8-8adbf00099a5.44a026c0-e5b2-475f-adbe-934231a6b5ad.prompt=Virtual Machine\:
fba75758-487c-4ec4-bcf8-8adbf00099a5.4ac9ff6f-ced5-4b42-9291-89f0281fad3a.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
fba75758-487c-4ec4-bcf8-8adbf00099a5.4e8f8fb6-e3a5-4107-b1e5-d91cc3dab65d.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
fba75758-487c-4ec4-bcf8-8adbf00099a5.5483cc3b-7cee-4d65-a3cb-f7fcaab19c55.description=This workflow returns the component properties and values using Artifact APIs.\n\nresult\:\npropertyNameValuesList\: pipe separated list of property name and values ( where each property name and values would be ; seprated and multiple values would be , seprated)\ne.g. - property 1; value1,value2|property 2; value3|property 3; value3,value4|........
fba75758-487c-4ec4-bcf8-8adbf00099a5.58a16294-db9e-46e7-9b81-1f0ec5d17f7b.description=<pre>Checks to see if the virtual machine is template.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol (http or https).\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation (true, false).\n    vmDatacenter - Datacenter to get virtual machine from.\n    vmIdentifierType - Virtual machine identifier type (inventorypath, name, ip, hostname, uuid, vmid).\n    virtualMachine - Primary Virtual Machine identifier. Inventorypath (Datacenter/vm/Folder/MyVM), Name of VM, IP (IPv4 or IPv6 depending upon ESX version), hostname (full), UUID, or the VM id (vm-123,123).\n\nResponses\:\n    success - Successfully completed the flow.\n    failure - Something went wrong.\n\nReturns\:\n    isTemplate - Returns true if the virtual machine is template, else false.\n\nNotes\:\nInventory Path Formatting\: If host is an ESX server inventory path will be\: ha-datacenter/vm/<name of vm> .  If host is a vCenter the inventory path will be\: <name of datacenter>/vm/<folders>/<name of vm> . The <folders>/<name of vm> part of the path is based on the "Virtual Machines & Templates" view in the vCenter client. The inventory path is case sensitive.\n</pre>
fba75758-487c-4ec4-bcf8-8adbf00099a5.5a7536e7-78fa-437e-9deb-306bc1ccb25f.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
fba75758-487c-4ec4-bcf8-8adbf00099a5.67f50101-2a26-43a3-99e1-c991515a05f7.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
fba75758-487c-4ec4-bcf8-8adbf00099a5.72a9df9b-f8b6-441a-8217-5df333a07cf8.prompt=Resource Provider ID
fba75758-487c-4ec4-bcf8-8adbf00099a5.7534c807-f368-47a9-8cea-b3d049b1ea9b.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
fba75758-487c-4ec4-bcf8-8adbf00099a5.77080977-1bd7-493a-acf3-2ce99401daef.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
fba75758-487c-4ec4-bcf8-8adbf00099a5.8542b148-5e0c-45c4-8854-6b0057a46a72.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
fba75758-487c-4ec4-bcf8-8adbf00099a5.8560c8e4-9c7e-407c-8f50-967125fd7131.description=<pre> Export a guest customization spec to customization spec XML string.\nThe exported customization spec xml string can be modified and imported to the vCenter Customization Specifications Manager using the 'Import Guest Customization Spec' operation.\n\nInputs\:\n    host - VMWare vCenter hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMWare Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    customizationTemplateName - Name of the customization specification to export. The customization specification should already exist in the vCenter customization specifications manager.\n\nResponses\:\n    success - The operation completed successfully.\n    failure - Something went wrong.\n\nReturns\:\n    returnResult - Returns the customization spec Xml string or the failure message.\n\nNotes\:\nThe returnResult of this operation can be used for the 'customizationSpecXml' input in the 'Clone Virtual Machine' operation, 'Clone Virtual Machine to Template' flow and  'Deploy Virtual Machine from Template' flow.\n</pre>
fba75758-487c-4ec4-bcf8-8adbf00099a5.9387bafa-194d-455c-aea9-9c851640d717.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
fba75758-487c-4ec4-bcf8-8adbf00099a5.99aae76e-b8b5-4fd8-8eb5-f9c2c360f943.prompt=Artifact ID
fba75758-487c-4ec4-bcf8-8adbf00099a5.b874cb44-a592-4669-b3a8-d17956680dee.prompt=Process Instance ID
fba75758-487c-4ec4-bcf8-8adbf00099a5.b90354aa-dec7-4d72-af34-c74f52232bf5.prompt=User Identifier
fba75758-487c-4ec4-bcf8-8adbf00099a5.bdc60ae3-6d44-4804-b0ad-f0ed6ff03ab2.prompt=User Identifier
fba75758-487c-4ec4-bcf8-8adbf00099a5.ccdb6f87-8f72-4a44-9784-3aa4df1d5d73.prompt=User Identifier
fba75758-487c-4ec4-bcf8-8adbf00099a5.ccfb900f-ca8a-441a-8e49-0ab33e4ab0af.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
fba75758-487c-4ec4-bcf8-8adbf00099a5.dd57e771-d84c-4934-900d-6c0a036dd29e.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
fba75758-487c-4ec4-bcf8-8adbf00099a5.dee4ab52-6339-40ee-8c2d-6708da8c0987.prompt=VMWare Host\:
fba75758-487c-4ec4-bcf8-8adbf00099a5.description=<pre>\nValidates virtual machine deployment input properties. This can be attached pre deployment state to check all the required information available to deploy.\n\nInputs Parameters\:\n\n CSA_CONTEXT_ID \u2013 CSA Context Id\n CSA_PROCESS_ID \u2013 CSA Process Instance Id\n SVC_COMPONENT_ID - This token will resolve to the Service component Id. Default value for this token is [TOKEN\:SVC_COMPONENT_ID]\n RSC_PROVIDER_ID - This token will resolve to the Resource Provider Id that was selected at the Subscription time. Default value for this token is [TOKEN\:RSC_PROVIDER_ID]\n SVC_SUBSCRIPTION_EMAIL - This token will resolve to the subscriber\u2019s email address. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_EMAIL]\n RSC_SUBSCRIPTION_ID - This token will resolve to the Resource Subscription Id that was created from the Resource Offering at the Subscription time.\n  \t\tDefault value for this token is [TOKEN\: RSC_SUBSCRIPTION_ID]\n SVC_COMPONENT_TYPE - This token will resolve to the Service component type. Eg\: Server.. Default value for this token is [TOKEN\: SVC_COMPONENT_TYPE]\n RSC_POOL_ID - This token will resolve to the Resource pool Id that was selected at the Subscription time. Default value for this token is [TOKEN\: RSC_POOL_ID]\n SVC_INSTANCE_ID - This token will resolve to the Service Instance Id. Default value for this token is [TOKEN\: SVC_INSTANCE_ID]\n SVC_SUBSCRIPTION_ID - This token will resolve to the Subscription Id that was created at the Subscription time. Default value for this token is [TOKEN\: SVC_SUBSCRIPTION_ID]\n PRN_COMPONENT_ID \u2013 This token will resolve to the parent Component\u2019s Service Component Id. Default value for this token is [TOKEN\: PRN_COMPONENT_ID]\n REQ_ORG_ID - This token will resolve to the Organization Id associated with the service request. Default value for this token is [TOKEN\: REQ_ORG_ID]\n REQ_USER_ID - This token will resolve to the User Id associated with the service request. Default value for this token is [TOKEN\: REQ_USER_ID]\n USR_ORG_ID - This token will resolve to the Organization Id associated with the subscriber. Default value for this token is [TOKEN\: USR_ORG_ID]\n RSC_BINDING_ID - This token will resolve to the Resource Binding Id that was created at the Subscription time. Default value for this token is [TOKEN\: RSC_BINDING_ID]\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n</pre>\n   
fba75758-487c-4ec4-bcf8-8adbf00099a5.e39b9a58-a2f5-4140-8e64-29c41213dd21.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
fba75758-487c-4ec4-bcf8-8adbf00099a5.e58e1069-be57-49b0-8ab0-c7b5840b258f.prompt=Process Instance ID
fba75758-487c-4ec4-bcf8-8adbf00099a5.ee396b07-85f3-4e15-9625-970b53e37b21.description=This workflow updates the Process Instance State using PEM API.\n\nInputs\:\n_PROCESS_INSTANCE_ID - Process Instance Id\n_processInstanceState - Process Instance State (Use value from selection list CSA-ProcessInstance-State)\n\n\n\nResult\:\n_processInstanceState -Updated Process Instance State\n
fba75758-487c-4ec4-bcf8-8adbf00099a5.f61a191f-f823-4dd4-94e1-acec2145afb3.prompt=User Identifier
fba75758-487c-4ec4-bcf8-8adbf00099a5.f96d62f2-afb3-462e-875b-a67dc666cffa.prompt=VMWare Host\:
fba75758-487c-4ec4-bcf8-8adbf00099a5.fb47d5ba-7dfa-46a6-9dcf-11ae2baed44b.prompt=Password\:
fba75758-487c-4ec4-bcf8-8adbf00099a5.fd97a896-b128-43ec-830a-380ded7ebb18.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.1b09dfc3-03fd-494b-9d93-fd28b104ef0a.description=fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.1b09dfc3-03fd-494b-9d93-fd28b104ef0a.description
fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.39a0c5b8-c0ce-439d-9049-d28884be8df8.description=fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.39a0c5b8-c0ce-439d-9049-d28884be8df8.description
fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.48bbce4c-5b76-49f2-95d4-72e197d9bf08.prompt=fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.48bbce4c-5b76-49f2-95d4-72e197d9bf08.prompt
fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.5c31cc8c-8a7c-4759-8e17-7d31dd27be7c.description=<pre> This flow will list all the clusters in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResponses\:\n    success - The operation completed successfully. It will return the list of clusters.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.740ef31c-567d-4685-9889-b328436a55b5.description=fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.740ef31c-567d-4685-9889-b328436a55b5.description
fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.8686cd12-c9ea-47ee-8405-c201bc392f7f.prompt=fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.8686cd12-c9ea-47ee-8405-c201bc392f7f.prompt
fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.a6900f27-4c48-4ae1-8552-92fd15317c7c.description=fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.a6900f27-4c48-4ae1-8552-92fd15317c7c.description
fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.b566e16d-079b-4771-9633-9eaaf9b5b881.description=fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.b566e16d-079b-4771-9633-9eaaf9b5b881.description
fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.bee3b227-89a3-470c-a99e-b9791da25ea4.description=fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.bee3b227-89a3-470c-a99e-b9791da25ea4.description
fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.d1c4bfcb-2fb1-4aa6-9646-f0a25570ba4b.prompt=fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.d1c4bfcb-2fb1-4aa6-9646-f0a25570ba4b.prompt
fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.description=<pre> This flow will list all the clusters in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    closeSession - Close the internally kept VMware Infrastructure API session at completion of operation.\nValid values\: "true", "false"\n    propsType - VMWare properties type to filter on.\nExample\: Task, Datacenter, VirtualMachine, Network.\n    propsPathset - Comma-delimited list of property filters pathsets\nExample\: name, info.name, runtime.host, config.hardware.memoryMB.\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    connectionTimeout -  The time to wait for a connection to be established, in seconds. A "connectionTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n    socketTimeout -  The time to wait for data (a maximum period of inactivity between two consecutive data packets), in seconds. A "socketTimeout" value of '0' represents an infinite timeout.\nDefault value\: 0\nFormat\: an integer representing seconds\nExamples\: 10, 20\n\nResponses\:\n    success - The operation completed successfully. It will return the list of clusters.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.e91fa453-a109-43cb-a307-dfbf14b5766b.description=fcdc36ce-8d72-4bd4-9a06-dd12d22f94bd.e91fa453-a109-43cb-a307-dfbf14b5766b.description
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.00749d47-3f88-404d-ba72-3f1a9c891547.prompt=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.00749d47-3f88-404d-ba72-3f1a9c891547.prompt
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.1147c75c-d138-4ec3-a7d7-4564b6e2bae9.description=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.1147c75c-d138-4ec3-a7d7-4564b6e2bae9.description
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.288c9868-14d9-4dfc-9499-8deb6a512ec2.description=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.288c9868-14d9-4dfc-9499-8deb6a512ec2.description
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.3f2f140e-e7b2-4201-9796-8074d9ec20de.prompt=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.3f2f140e-e7b2-4201-9796-8074d9ec20de.prompt
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.4857f02e-8886-46e5-9970-bca0212cdec3.prompt=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.4857f02e-8886-46e5-9970-bca0212cdec3.prompt
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.49691bc5-d214-4600-844f-1ffeca8ca32a.prompt=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.49691bc5-d214-4600-844f-1ffeca8ca32a.prompt
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.576be513-b14e-4d2a-aa47-ad01756534a0.prompt=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.49691bc5-d214-4600-844f-1ffeca8ca32a.prompt
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.616165df-63bb-414c-9156-4633fd1f22cb.description=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.616165df-63bb-414c-9156-4633fd1f22cb.description
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.6f3e330e-d6c1-4cec-89e2-d8bf3b0f77f5.description=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.6f3e330e-d6c1-4cec-89e2-d8bf3b0f77f5.description
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.80c236bf-fdf2-40cc-8908-80c4a57dc831.description=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.80c236bf-fdf2-40cc-8908-80c4a57dc831.description
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.863248d3-efee-4720-a5e4-38b7efc7a823.prompt=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.4857f02e-8886-46e5-9970-bca0212cdec3.prompt
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.abd8e7e3-a6b7-4097-8e4a-f4a2beec52d6.description=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.abd8e7e3-a6b7-4097-8e4a-f4a2beec52d6.description
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.bb41dd52-2e26-49d5-8cf5-4575ab56373f.prompt=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.bb41dd52-2e26-49d5-8cf5-4575ab56373f.prompt
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.cfe7724e-a246-4521-848c-f8fdfd01a820.description=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.cfe7724e-a246-4521-848c-f8fdfd01a820.description
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.d2054ca8-eb33-46bd-b10e-f81642fbb573.description=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.d2054ca8-eb33-46bd-b10e-f81642fbb573.description
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.d9b8470d-3aa5-4aa9-91ea-4bbaa7e42492.description=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.d9b8470d-3aa5-4aa9-91ea-4bbaa7e42492.description
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.description=<pre> This flow will list all the datastores in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    datacenter -  Name of the datacenter.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of datastores.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.e3b3b615-9502-4029-91fd-2f170dad2eb1.prompt=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.e3b3b615-9502-4029-91fd-2f170dad2eb1.prompt
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.eaa0d11d-8684-448b-9e18-c23f0cc96635.description=<pre> This flow will list all the datastores in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    datacenter -  Name of the datacenter.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of datastores.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.f3211d00-4d2b-4a62-923f-9f9387b8e5a5.prompt=fd7690b4-f0a6-4790-a0b4-c196d7bd6f65.f3211d00-4d2b-4a62-923f-9f9387b8e5a5.prompt
ff4372ed-3224-482b-bd01-45773ec4f68a.352a3d8b-d284-4aa2-8bbd-77bcd75c3972.description=ff4372ed-3224-482b-bd01-45773ec4f68a.352a3d8b-d284-4aa2-8bbd-77bcd75c3972.description
ff4372ed-3224-482b-bd01-45773ec4f68a.3fe5fafb-3285-4ea1-a01c-8f7f6c8409e8.description=ff4372ed-3224-482b-bd01-45773ec4f68a.3fe5fafb-3285-4ea1-a01c-8f7f6c8409e8.description
ff4372ed-3224-482b-bd01-45773ec4f68a.979af6eb-42c1-49a9-b4a0-d207865ae697.description=ff4372ed-3224-482b-bd01-45773ec4f68a.979af6eb-42c1-49a9-b4a0-d207865ae697.description
ff4372ed-3224-482b-bd01-45773ec4f68a.a53586eb-1854-4f38-ace3-675c4737fac6.description=<pre> This flow will list all the folders in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    datacenter -  Name of the datacenter.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of folders.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
ff4372ed-3224-482b-bd01-45773ec4f68a.a96551fb-408f-45a3-bf50-2978fd9d8b59.description=ff4372ed-3224-482b-bd01-45773ec4f68a.a96551fb-408f-45a3-bf50-2978fd9d8b59.description
ff4372ed-3224-482b-bd01-45773ec4f68a.ab414521-cc1d-4a6d-bd9e-38f8ff35bb7d.description=ff4372ed-3224-482b-bd01-45773ec4f68a.ab414521-cc1d-4a6d-bd9e-38f8ff35bb7d.description
ff4372ed-3224-482b-bd01-45773ec4f68a.bd84b992-81e5-4d19-b82d-7a959c8963a9.description=ff4372ed-3224-482b-bd01-45773ec4f68a.bd84b992-81e5-4d19-b82d-7a959c8963a9.description
ff4372ed-3224-482b-bd01-45773ec4f68a.description=<pre> This flow will list all the folders in the vCenter.\n\nInputs\:\n    host - VMWare host hostname or IP.\n    user - VMWare username.\n    password - VMWare user's password.\n    port - Port to connect on.\n    protocol - Connection protocol.\nValid values\: "https", "http"\n    propsRootObjType - The type of the Managed Object Reference (such as VirtualMachine, HostSystem, ComputeResource, ResourcePool, Alarm, Datacenter, Datastore) to begin the search on. Leaving this blank will default the root object to the root   folder of the ESX or VC host. \n    propsRootObj - The value of the reference (such as vm-123, datastore-123, network-123) used as a root object. Leaving this blank will default the root object to be the root folder of the ESX or VC host. \n    datacenter -  Name of the datacenter.\n\nResponses\:\n    success - The operation completed successfully. It will return the list of folders.\n    failure - Something went wrong. See returnResult for details.\n\nReturns\:\n    numberOfResults - Number of results from the query remaining to be retrieved.\n    returnResult - Query result item or reason for failure.</pre>
ff4372ed-3224-482b-bd01-45773ec4f68a.f0987971-d22a-43d6-8209-acd9d372f07c.description=ff4372ed-3224-482b-bd01-45773ec4f68a.f0987971-d22a-43d6-8209-acd9d372f07c.description
ff4372ed-3224-482b-bd01-45773ec4f68a.fb213b50-e44b-4a7b-93b8-003d366e8b0f.description=ff4372ed-3224-482b-bd01-45773ec4f68a.fb213b50-e44b-4a7b-93b8-003d366e8b0f.description
ff4372ed-3224-482b-bd01-45773ec4f68a.fb859462-1a1f-4ba9-a5ce-f03a8f9e60f2.description=ff4372ed-3224-482b-bd01-45773ec4f68a.fb859462-1a1f-4ba9-a5ce-f03a8f9e60f2.description
ffa37705-a70a-4d79-8636-3932cf544354.11cd2e1e-7679-4472-ba40-6705260aa999.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
ffa37705-a70a-4d79-8636-3932cf544354.319e8070-6bd5-47fb-b3c8-781baeb07745.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
ffa37705-a70a-4d79-8636-3932cf544354.3495d5ba-fadc-497b-81d4-e817e1951a19.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
ffa37705-a70a-4d79-8636-3932cf544354.4d0eacec-1f75-4ece-ab27-929154c820c3.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
ffa37705-a70a-4d79-8636-3932cf544354.9552e39a-1bec-42f8-bce0-d6ac5bfc7985.description=<pre>\nCompares two strings, returning a true response if and only if they contain the same sequence of characters. A null string is considered to be equal to an empty string.\n\nInputs\:\nstring1 - The first string.\nstring2 - The second string.\nignoreCase - If set to 'true', then the comparison ignores case considerations. The two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. If set to any value other than 'true', then the strings must match exactly to be considered equal.\n\nresponses\:\ntrue - If the two strings are equal\nfalse - If the two strings are not equal\n\n</pre>
ffa37705-a70a-4d79-8636-3932cf544354.9dc57bb5-1dae-4f89-921c-fab723ef4afb.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
ffa37705-a70a-4d79-8636-3932cf544354.add4bfb9-5eea-433b-9cd2-46f3cb28d7d8.description=<pre>This is an operation that does nothing. It can be used for filtering flow variables by feeding them in as inputs and filtering them on the results tab.\n\nInputs\:\nfield1 - optional input that can be used for filtering flow variables.\nfield2 - optional input that can be used for filtering flow variables.\nfield3 - optional input that can be used for filtering flow variables.\nfield4 - optional input that can be used for filtering flow variables.\n\nResponses\:\nsuccess - this operation never fails.\n</pre>
ffa37705-a70a-4d79-8636-3932cf544354.b84b8885-e76d-4348-876d-2f6f12107a68.description=<pre>\nCheck to see if the value stored in a specified flow variable, denoted by key, is null.\n\nInputs\:\nkeyName - The key to check, i.e. the name of the flow variable.\n\nReturns\: \nThe value in the specified key, i.e. flow variable.\n\nResponses\:\nisNull - If the key is a null pointer, i.e. the flow variable doesn't have an assigned value.\nnotNull - If some value is stored in the key, i.e the flow variable has a value assigned.\n</pre>
ffa37705-a70a-4d79-8636-3932cf544354.dc2e0aa9-6a77-4e78-b2c0-0e9215bb7a69.description=<pre>Adds a flow variable into the local context (available to itself and child flows only)\n\nInput Parameters\:\nkeyName - the name of the flow variable to use\nmyValue - the value to assign the flow variable\n\nResponses\:\nsuccess - assigned the flow variable\n\nScriptlet Example\:\n[$scriptletContext putGlobal\: $keyName, $myValue];</pre>
ffa37705-a70a-4d79-8636-3932cf544354.description=<pre>\nBuild Fixed IP Customization Specification XML.\n\nInputs Parameters\:\n\n customSpecXml - User provided customization specification\n customSpecType - Type of the customization specification type i.e. Linux or Windows\n osType - OS type specified by the user.\n ipAddress - IP Address\n subnetMask - Subnet Mask\n gatewayIpList - List of gateway IP address\n dnsServerIpList - List of DNS server IP address\n\nResponses\:\n success - The operation completed successfully.\n failure - Something went wrong.\n\nOutput\:\ncustomizationSpecXml - Customization Specification XML with Fixed IP.\n</pre>
